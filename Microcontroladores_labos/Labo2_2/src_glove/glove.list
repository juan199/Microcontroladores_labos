
glove.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 00 02 20 65 1c 00 08 63 1c 00 08 61 1c 00 08     ... e...c...a...
 8000010:	61 1c 00 08 61 1c 00 08 61 1c 00 08 00 00 00 00     a...a...a.......
	...
 800002c:	63 1c 00 08 63 1c 00 08 00 00 00 00 63 1c 00 08     c...c.......c...
 800003c:	63 1c 00 08 61 1c 00 08 61 1c 00 08 61 1c 00 08     c...a...a...a...
 800004c:	61 1c 00 08 61 1c 00 08 61 1c 00 08 61 1c 00 08     a...a...a...a...
 800005c:	61 1c 00 08 61 1c 00 08 61 1c 00 08 61 1c 00 08     a...a...a...a...
 800006c:	61 1c 00 08 61 1c 00 08 61 1c 00 08 61 1c 00 08     a...a...a...a...
 800007c:	61 1c 00 08 61 1c 00 08 61 1c 00 08 61 1c 00 08     a...a...a...a...
 800008c:	61 1c 00 08 61 1c 00 08 61 1c 00 08 61 1c 00 08     a...a...a...a...
 800009c:	61 1c 00 08 61 1c 00 08 29 05 00 08 61 1c 00 08     a...a...)...a...
 80000ac:	61 1c 00 08 61 1c 00 08 61 1c 00 08 61 1c 00 08     a...a...a...a...
 80000bc:	61 1c 00 08 61 1c 00 08 61 1c 00 08 61 1c 00 08     a...a...a...a...
 80000cc:	61 1c 00 08 61 1c 00 08 61 1c 00 08 61 1c 00 08     a...a...a...a...
 80000dc:	61 1c 00 08 61 1c 00 08 61 1c 00 08 61 1c 00 08     a...a...a...a...
 80000ec:	61 1c 00 08 61 1c 00 08 61 1c 00 08 61 1c 00 08     a...a...a...a...
 80000fc:	61 1c 00 08 61 1c 00 08 61 1c 00 08 61 1c 00 08     a...a...a...a...
 800010c:	61 1c 00 08 61 1c 00 08 61 1c 00 08 61 1c 00 08     a...a...a...a...
 800011c:	61 1c 00 08 61 1c 00 08 61 1c 00 08 61 1c 00 08     a...a...a...a...
 800012c:	61 1c 00 08 61 1c 00 08 61 1c 00 08 61 1c 00 08     a...a...a...a...
 800013c:	61 1c 00 08 61 1c 00 08 61 1c 00 08 61 1c 00 08     a...a...a...a...
 800014c:	d5 05 00 08 61 1c 00 08 61 1c 00 08 61 1c 00 08     ....a...a...a...
 800015c:	61 1c 00 08 61 1c 00 08 61 1c 00 08 61 1c 00 08     a...a...a...a...
 800016c:	61 1c 00 08 61 1c 00 08 61 1c 00 08 61 1c 00 08     a...a...a...a...
 800017c:	61 1c 00 08 61 1c 00 08                             a...a...

08000184 <DTC_SVM_tim_init>:



//*************************************************Empieza el timer************************************************************
void DTC_SVM_tim_init(void) //Temporizador
{
 8000184:	b538      	push	{r3, r4, r5, lr}
	/* Enable TIM1 clock. and Port E clock (for outputs) */
	rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_TIM1EN);
 8000186:	487e      	ldr	r0, [pc, #504]	; (8000380 <DTC_SVM_tim_init+0x1fc>)
	rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPEEN);

	//Set TIM1 channel (and complementary) output to alternate function push-pull'.
	//f4 TIM1=> GIO9: CH1, GPIO11: CH2, GPIO13: CH3
	//f4 TIM1=> GIO8: CH1N, GPIO10: CH2N, GPIO12: CH3N
	gpio_mode_setup(GPIOE, GPIO_MODE_AF,GPIO_PUPD_NONE,GPIO9 | GPIO11 | GPIO13);
 8000188:	4c7e      	ldr	r4, [pc, #504]	; (8000384 <DTC_SVM_tim_init+0x200>)

//*************************************************Empieza el timer************************************************************
void DTC_SVM_tim_init(void) //Temporizador
{
	/* Enable TIM1 clock. and Port E clock (for outputs) */
	rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_TIM1EN);
 800018a:	2101      	movs	r1, #1
 800018c:	f001 f96e 	bl	800146c <rcc_peripheral_enable_clock>
	rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPEEN);
 8000190:	487d      	ldr	r0, [pc, #500]	; (8000388 <DTC_SVM_tim_init+0x204>)
 8000192:	2110      	movs	r1, #16
 8000194:	f001 f96a 	bl	800146c <rcc_peripheral_enable_clock>

	//Set TIM1 channel (and complementary) output to alternate function push-pull'.
	//f4 TIM1=> GIO9: CH1, GPIO11: CH2, GPIO13: CH3
	//f4 TIM1=> GIO8: CH1N, GPIO10: CH2N, GPIO12: CH3N
	gpio_mode_setup(GPIOE, GPIO_MODE_AF,GPIO_PUPD_NONE,GPIO9 | GPIO11 | GPIO13);
 8000198:	4620      	mov	r0, r4
 800019a:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800019e:	2102      	movs	r1, #2
 80001a0:	2200      	movs	r2, #0
 80001a2:	f000 fe60 	bl	8000e66 <gpio_mode_setup>
	gpio_set_af(GPIOE, GPIO_AF1, GPIO9 | GPIO11 | GPIO13);
 80001a6:	4620      	mov	r0, r4
 80001a8:	2101      	movs	r1, #1
 80001aa:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80001ae:	f000 fe7c 	bl	8000eaa <gpio_set_af>
	gpio_mode_setup(GPIOE, GPIO_MODE_AF,GPIO_PUPD_NONE,GPIO8 | GPIO10 | GPIO12);
 80001b2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 80001b6:	4620      	mov	r0, r4
 80001b8:	2102      	movs	r1, #2
 80001ba:	2200      	movs	r2, #0
 80001bc:	f000 fe53 	bl	8000e66 <gpio_mode_setup>
	gpio_set_af(GPIOE, GPIO_AF1, GPIO8 | GPIO10 | GPIO12);
 80001c0:	4620      	mov	r0, r4
 80001c2:	2101      	movs	r1, #1

	/* Enable TIM1 commutation interrupt. */
	//nvic_enable_irq(NVIC_TIM1_TRG_COM_TIM11_IRQ);	//f4

	/* Reset TIM1 peripheral. */
	timer_reset(TIM1);
 80001c4:	f5a4 3488 	sub.w	r4, r4, #69632	; 0x11000
	//f4 TIM1=> GIO9: CH1, GPIO11: CH2, GPIO13: CH3
	//f4 TIM1=> GIO8: CH1N, GPIO10: CH2N, GPIO12: CH3N
	gpio_mode_setup(GPIOE, GPIO_MODE_AF,GPIO_PUPD_NONE,GPIO9 | GPIO11 | GPIO13);
	gpio_set_af(GPIOE, GPIO_AF1, GPIO9 | GPIO11 | GPIO13);
	gpio_mode_setup(GPIOE, GPIO_MODE_AF,GPIO_PUPD_NONE,GPIO8 | GPIO10 | GPIO12);
	gpio_set_af(GPIOE, GPIO_AF1, GPIO8 | GPIO10 | GPIO12);
 80001c8:	f44f 52a8 	mov.w	r2, #5376	; 0x1500
 80001cc:	f000 fe6d 	bl	8000eaa <gpio_set_af>

	/* Enable TIM1 commutation interrupt. */
	//nvic_enable_irq(NVIC_TIM1_TRG_COM_TIM11_IRQ);	//f4

	/* Reset TIM1 peripheral. */
	timer_reset(TIM1);
 80001d0:	4620      	mov	r0, r4
 80001d2:	f000 fe93 	bl	8000efc <timer_reset>
	/* Timer global mode:
	 * - No divider
	 * - Alignment edge
	 * - Direction up
	 */
	timer_set_mode(TIM1, TIM_CR1_CKD_CK_INT, //For dead time and filter sampling, not important for now.
 80001d6:	2100      	movs	r1, #0
 80001d8:	460b      	mov	r3, r1
 80001da:	460a      	mov	r2, r1
 80001dc:	4620      	mov	r0, r4
 80001de:	f000 fefc 	bl	8000fda <timer_set_mode>
						//TIM_CR1_CMS_CENTER_1
						//TIM_CR1_CMS_CENTER_2
						//TIM_CR1_CMS_CENTER_3 la frequencia del pwm se divide a la mitad. (frecuencia senoidal)
			 TIM_CR1_DIR_UP);

	timer_set_prescaler(TIM1, PRESCALE); //1 = disabled (max speed)
 80001e2:	4620      	mov	r0, r4
 80001e4:	2101      	movs	r1, #1
 80001e6:	f000 ff21 	bl	800102c <timer_set_prescaler>
	timer_set_repetition_counter(TIM1, 0); //disabled
 80001ea:	2100      	movs	r1, #0
 80001ec:	4620      	mov	r0, r4
 80001ee:	f000 ff1f 	bl	8001030 <timer_set_repetition_counter>
	timer_enable_preload(TIM1);
 80001f2:	4620      	mov	r0, r4
 80001f4:	f000 fefa 	bl	8000fec <timer_enable_preload>
	timer_continuous_mode(TIM1);
 80001f8:	4620      	mov	r0, r4
 80001fa:	f000 fefc 	bl	8000ff6 <timer_continuous_mode>

	/* Period (32kHz). */
	timer_set_period(TIM1, PWM_PERIOD_ARR); //ARR (value compared against main counter to reload counter aka: period of counter)
 80001fe:	f24a 4110 	movw	r1, #42000	; 0xa410
 8000202:	4620      	mov	r0, r4
 8000204:	f000 ff1e 	bl	8001044 <timer_set_period>

	/* Configure break and deadtime. */
	//timer_set_deadtime(TIM1, deadtime_percentage*pwm_period_ARR);
    //timer_set_deadtime(TIM1, 1100.0f*PWM_PERIOD_ARR);
    //timer_set_deadtime(TIM1, DEAD_TIME_PERCENTAGE*PWM_PERIOD_ARR);
	timer_set_enabled_off_state_in_idle_mode(TIM1);
 8000208:	4620      	mov	r0, r4
 800020a:	f001 f909 	bl	8001420 <timer_set_enabled_off_state_in_idle_mode>
	timer_set_enabled_off_state_in_run_mode(TIM1);
 800020e:	4620      	mov	r0, r4
 8000210:	f001 f8fa 	bl	8001408 <timer_set_enabled_off_state_in_run_mode>
	timer_disable_break(TIM1);
 8000214:	4620      	mov	r0, r4
 8000216:	f001 f8eb 	bl	80013f0 <timer_disable_break>
	timer_set_break_polarity_high(TIM1);
 800021a:	4620      	mov	r0, r4
 800021c:	f001 f8dc 	bl	80013d8 <timer_set_break_polarity_high>
	timer_disable_break_automatic_output(TIM1);
 8000220:	4620      	mov	r0, r4
 8000222:	f001 f8cd 	bl	80013c0 <timer_disable_break_automatic_output>
	timer_set_break_lock(TIM1, TIM_BDTR_LOCK_OFF);
 8000226:	4620      	mov	r0, r4
 8000228:	2100      	movs	r1, #0
 800022a:	f001 f905 	bl	8001438 <timer_set_break_lock>

	/* Disable outputs. */
	timer_disable_oc_output(TIM1, TIM_OC1);
 800022e:	4620      	mov	r0, r4
 8000230:	2100      	movs	r1, #0
 8000232:	f001 f84b 	bl	80012cc <timer_disable_oc_output>
	timer_disable_oc_output(TIM1, TIM_OC1N);
 8000236:	4620      	mov	r0, r4
 8000238:	2101      	movs	r1, #1
 800023a:	f001 f847 	bl	80012cc <timer_disable_oc_output>
	timer_disable_oc_output(TIM1, TIM_OC2);
 800023e:	4620      	mov	r0, r4
 8000240:	2102      	movs	r1, #2
 8000242:	f001 f843 	bl	80012cc <timer_disable_oc_output>
	timer_disable_oc_output(TIM1, TIM_OC2N);
 8000246:	4620      	mov	r0, r4
 8000248:	2103      	movs	r1, #3
 800024a:	f001 f83f 	bl	80012cc <timer_disable_oc_output>
	timer_disable_oc_output(TIM1, TIM_OC3);
 800024e:	4620      	mov	r0, r4
 8000250:	2104      	movs	r1, #4
 8000252:	f001 f83b 	bl	80012cc <timer_disable_oc_output>
	timer_disable_oc_output(TIM1, TIM_OC3N);
 8000256:	4620      	mov	r0, r4
 8000258:	2105      	movs	r1, #5
 800025a:	f001 f837 	bl	80012cc <timer_disable_oc_output>

	/* -- OC1 and OC1N configuration -- */
	/* Configure global mode of line 1. */
	timer_enable_oc_preload(TIM1, TIM_OC1);
 800025e:	4620      	mov	r0, r4
 8000260:	2100      	movs	r1, #0
 8000262:	f000 ffb4 	bl	80011ce <timer_enable_oc_preload>
	timer_set_oc_mode(TIM1, TIM_OC1, TIM_OCM_PWM1);
 8000266:	2206      	movs	r2, #6
 8000268:	4620      	mov	r0, r4
 800026a:	2100      	movs	r1, #0
 800026c:	f000 feec 	bl	8001048 <timer_set_oc_mode>
	/* Configure OC1. */
	timer_set_oc_polarity_high(TIM1, TIM_OC1);
 8000270:	4620      	mov	r0, r4
 8000272:	2100      	movs	r1, #0
 8000274:	f000 ffc6 	bl	8001204 <timer_set_oc_polarity_high>
	timer_set_oc_idle_state_unset(TIM1, TIM_OC1); //When idle (braked) put 0 on output
 8000278:	4620      	mov	r0, r4
 800027a:	2100      	movs	r1, #0
 800027c:	f001 f858 	bl	8001330 <timer_set_oc_idle_state_unset>
	/* Configure OC1N. */
	timer_set_oc_polarity_high(TIM1, TIM_OC1N);
 8000280:	4620      	mov	r0, r4
 8000282:	2101      	movs	r1, #1
 8000284:	f000 ffbe 	bl	8001204 <timer_set_oc_polarity_high>
	timer_set_oc_idle_state_unset(TIM1, TIM_OC1N);
	/* Set the capture compare value for OC1. */
	timer_set_oc_value(TIM1, TIM_OC1, INIT_DUTY*PWM_PERIOD_ARR);//initial_duty_cycle*pwm_period_ARR);
 8000288:	f245 2508 	movw	r5, #21000	; 0x5208
	/* Configure OC1. */
	timer_set_oc_polarity_high(TIM1, TIM_OC1);
	timer_set_oc_idle_state_unset(TIM1, TIM_OC1); //When idle (braked) put 0 on output
	/* Configure OC1N. */
	timer_set_oc_polarity_high(TIM1, TIM_OC1N);
	timer_set_oc_idle_state_unset(TIM1, TIM_OC1N);
 800028c:	4620      	mov	r0, r4
 800028e:	2101      	movs	r1, #1
 8000290:	f001 f84e 	bl	8001330 <timer_set_oc_idle_state_unset>
	/* Set the capture compare value for OC1. */
	timer_set_oc_value(TIM1, TIM_OC1, INIT_DUTY*PWM_PERIOD_ARR);//initial_duty_cycle*pwm_period_ARR);
 8000294:	462a      	mov	r2, r5
 8000296:	4620      	mov	r0, r4
 8000298:	2100      	movs	r1, #0
 800029a:	f001 f875 	bl	8001388 <timer_set_oc_value>

	/* -- OC2 and OC2N configuration -- */
	/* Configure global mode of line 2. */
	timer_enable_oc_preload(TIM1, TIM_OC2);
 800029e:	4620      	mov	r0, r4
 80002a0:	2102      	movs	r1, #2
 80002a2:	f000 ff94 	bl	80011ce <timer_enable_oc_preload>
	timer_set_oc_mode(TIM1, TIM_OC2, TIM_OCM_PWM1);
 80002a6:	2206      	movs	r2, #6
 80002a8:	4620      	mov	r0, r4
 80002aa:	2102      	movs	r1, #2
 80002ac:	f000 fecc 	bl	8001048 <timer_set_oc_mode>
	/* Configure OC2. */
	timer_set_oc_polarity_high(TIM1, TIM_OC2);
 80002b0:	4620      	mov	r0, r4
 80002b2:	2102      	movs	r1, #2
 80002b4:	f000 ffa6 	bl	8001204 <timer_set_oc_polarity_high>
	timer_set_oc_idle_state_unset(TIM1, TIM_OC2);
 80002b8:	4620      	mov	r0, r4
 80002ba:	2102      	movs	r1, #2
 80002bc:	f001 f838 	bl	8001330 <timer_set_oc_idle_state_unset>
	/* Configure OC2N. */
	timer_set_oc_polarity_high(TIM1, TIM_OC2N);
 80002c0:	4620      	mov	r0, r4
 80002c2:	2103      	movs	r1, #3
 80002c4:	f000 ff9e 	bl	8001204 <timer_set_oc_polarity_high>
	timer_set_oc_idle_state_unset(TIM1, TIM_OC2N);
 80002c8:	4620      	mov	r0, r4
 80002ca:	2103      	movs	r1, #3
 80002cc:	f001 f830 	bl	8001330 <timer_set_oc_idle_state_unset>
	/* Set the capture compare value for OC2. */
	timer_set_oc_value(TIM1, TIM_OC2, INIT_DUTY*PWM_PERIOD_ARR);//initial_duty_cycle*pwm_period_ARR);
 80002d0:	462a      	mov	r2, r5
 80002d2:	4620      	mov	r0, r4
 80002d4:	2102      	movs	r1, #2
 80002d6:	f001 f857 	bl	8001388 <timer_set_oc_value>

	/* -- OC3 and OC3N configuration -- */
	/* Configure global mode of line 3. */
	timer_enable_oc_preload(TIM1, TIM_OC3);
 80002da:	4620      	mov	r0, r4
 80002dc:	2104      	movs	r1, #4
 80002de:	f000 ff76 	bl	80011ce <timer_enable_oc_preload>
	timer_set_oc_mode(TIM1, TIM_OC3, TIM_OCM_PWM1);
 80002e2:	2206      	movs	r2, #6
 80002e4:	4620      	mov	r0, r4
 80002e6:	2104      	movs	r1, #4
 80002e8:	f000 feae 	bl	8001048 <timer_set_oc_mode>
	/* Configure OC3. */
	timer_set_oc_polarity_high(TIM1, TIM_OC3);
 80002ec:	4620      	mov	r0, r4
 80002ee:	2104      	movs	r1, #4
 80002f0:	f000 ff88 	bl	8001204 <timer_set_oc_polarity_high>
	timer_set_oc_idle_state_unset(TIM1, TIM_OC3);
 80002f4:	4620      	mov	r0, r4
 80002f6:	2104      	movs	r1, #4
 80002f8:	f001 f81a 	bl	8001330 <timer_set_oc_idle_state_unset>
	/* Configure OC3N. */
	timer_set_oc_polarity_high(TIM1, TIM_OC3N);
 80002fc:	4620      	mov	r0, r4
 80002fe:	2105      	movs	r1, #5
 8000300:	f000 ff80 	bl	8001204 <timer_set_oc_polarity_high>
	timer_set_oc_idle_state_unset(TIM1, TIM_OC3N);
 8000304:	4620      	mov	r0, r4
 8000306:	2105      	movs	r1, #5
 8000308:	f001 f812 	bl	8001330 <timer_set_oc_idle_state_unset>
	/* Set the capture compare value for OC3. */
	timer_set_oc_value(TIM1, TIM_OC3, INIT_DUTY*PWM_PERIOD_ARR);//initial_duty_cycle*pwm_period_ARR);//100);
 800030c:	462a      	mov	r2, r5
 800030e:	4620      	mov	r0, r4
 8000310:	2104      	movs	r1, #4
 8000312:	f001 f839 	bl	8001388 <timer_set_oc_value>

	/* Reenable outputs. */
	timer_enable_oc_output(TIM1, TIM_OC1);
 8000316:	4620      	mov	r0, r4
 8000318:	2100      	movs	r1, #0
 800031a:	f000 ffa5 	bl	8001268 <timer_enable_oc_output>
	timer_enable_oc_output(TIM1, TIM_OC1N);
 800031e:	4620      	mov	r0, r4
 8000320:	2101      	movs	r1, #1
 8000322:	f000 ffa1 	bl	8001268 <timer_enable_oc_output>
	timer_enable_oc_output(TIM1, TIM_OC2);
 8000326:	4620      	mov	r0, r4
 8000328:	2102      	movs	r1, #2
 800032a:	f000 ff9d 	bl	8001268 <timer_enable_oc_output>
	timer_enable_oc_output(TIM1, TIM_OC2N);
 800032e:	4620      	mov	r0, r4
 8000330:	2103      	movs	r1, #3
 8000332:	f000 ff99 	bl	8001268 <timer_enable_oc_output>
	timer_enable_oc_output(TIM1, TIM_OC3);
 8000336:	4620      	mov	r0, r4
 8000338:	2104      	movs	r1, #4
 800033a:	f000 ff95 	bl	8001268 <timer_enable_oc_output>
	timer_enable_oc_output(TIM1, TIM_OC3N);
 800033e:	2105      	movs	r1, #5
 8000340:	4620      	mov	r0, r4
 8000342:	f000 ff91 	bl	8001268 <timer_enable_oc_output>

	/* ---- */

	/* ARR reload enable. */
	timer_enable_preload(TIM1);
 8000346:	4620      	mov	r0, r4
 8000348:	f000 fe50 	bl	8000fec <timer_enable_preload>
	/*
	 * Enable preload of complementary channel configurations and
	 * update on COM event.
	 */
	//timer_enable_preload_complementry_enable_bits(TIM1);
	timer_disable_preload_complementry_enable_bits(TIM1);
 800034c:	4620      	mov	r0, r4
 800034e:	f000 fe61 	bl	8001014 <timer_disable_preload_complementry_enable_bits>

	/* Enable outputs in the break subsystem. */
	timer_enable_break_main_output(TIM1);
 8000352:	4620      	mov	r0, r4
 8000354:	f001 f828 	bl	80013a8 <timer_enable_break_main_output>

	/* Generate update event to reload all registers before starting*/
	timer_generate_event(TIM1, TIM_EGR_UG);
 8000358:	2101      	movs	r1, #1
 800035a:	4620      	mov	r0, r4
 800035c:	f001 f878 	bl	8001450 <timer_generate_event>

	/* Counter enable. */
	timer_enable_counter(TIM1);
 8000360:	4620      	mov	r0, r4
 8000362:	f000 fe52 	bl	800100a <timer_enable_counter>

	/*********/
	/*Capture compare interrupt*/

	//enable capture compare interrupt
	timer_enable_update_event(TIM1);
 8000366:	4620      	mov	r0, r4
 8000368:	f000 fe4a 	bl	8001000 <timer_enable_update_event>

	/* Enable commutation interrupt. */
	//timer_enable_irq(TIM1, TIM_DIER_CC1IE);	//Capture/compare 1 interrupt enable
	/* Enable commutation interrupt. */
	//timer_enable_irq(TIM1, TIM_DIER_CC1IE);
	timer_enable_irq(TIM1, TIM_DIER_UIE);
 800036c:	4620      	mov	r0, r4
 800036e:	2101      	movs	r1, #1
 8000370:	f000 fe2a 	bl	8000fc8 <timer_enable_irq>
	nvic_enable_irq(NVIC_TIM1_UP_TIM10_IRQ);
 8000374:	2019      	movs	r0, #25
}
 8000376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	/* Enable commutation interrupt. */
	//timer_enable_irq(TIM1, TIM_DIER_CC1IE);	//Capture/compare 1 interrupt enable
	/* Enable commutation interrupt. */
	//timer_enable_irq(TIM1, TIM_DIER_CC1IE);
	timer_enable_irq(TIM1, TIM_DIER_UIE);
	nvic_enable_irq(NVIC_TIM1_UP_TIM10_IRQ);
 800037a:	f001 bcbb 	b.w	8001cf4 <nvic_enable_irq>
 800037e:	bf00      	nop
 8000380:	40023844 	.word	0x40023844
 8000384:	40021000 	.word	0x40021000
 8000388:	40023830 	.word	0x40023830

0800038c <leds_init>:
}
//****************************************Termina el timer********************************************


void leds_init(void) 
{
 800038c:	b510      	push	{r4, lr}
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPDEN);
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO12);
 800038e:	4c11      	ldr	r4, [pc, #68]	; (80003d4 <leds_init+0x48>)
//****************************************Termina el timer********************************************


void leds_init(void) 
{
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPDEN);
 8000390:	4811      	ldr	r0, [pc, #68]	; (80003d8 <leds_init+0x4c>)
 8000392:	2108      	movs	r1, #8
 8000394:	f001 f86a 	bl	800146c <rcc_peripheral_enable_clock>
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO12);
 8000398:	4620      	mov	r0, r4
 800039a:	2101      	movs	r1, #1
 800039c:	2200      	movs	r2, #0
 800039e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003a2:	f000 fd60 	bl	8000e66 <gpio_mode_setup>
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO13);
 80003a6:	4620      	mov	r0, r4
 80003a8:	2101      	movs	r1, #1
 80003aa:	2200      	movs	r2, #0
 80003ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003b0:	f000 fd59 	bl	8000e66 <gpio_mode_setup>
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO14);
 80003b4:	4620      	mov	r0, r4
 80003b6:	2101      	movs	r1, #1
 80003b8:	2200      	movs	r2, #0
 80003ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003be:	f000 fd52 	bl	8000e66 <gpio_mode_setup>
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO15);
 80003c2:	4620      	mov	r0, r4
 80003c4:	2101      	movs	r1, #1
 80003c6:	2200      	movs	r2, #0
 80003c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
 80003cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPDEN);
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO12);
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO13);
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO14);
  gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO15);
 80003d0:	f000 bd49 	b.w	8000e66 <gpio_mode_setup>
 80003d4:	40020c00 	.word	0x40020c00
 80003d8:	40023830 	.word	0x40023830

080003dc <adc_init>:
}


//*******************************  Para medir la tensión en los pines **********************************
void adc_init (void)
{
 80003dc:	b510      	push	{r4, lr}
  rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_ADC1EN);
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPAEN);
 80003de:	4c33      	ldr	r4, [pc, #204]	; (80004ac <adc_init+0xd0>)


//*******************************  Para medir la tensión en los pines **********************************
void adc_init (void)
{
  rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_ADC1EN);
 80003e0:	4833      	ldr	r0, [pc, #204]	; (80004b0 <adc_init+0xd4>)
 80003e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e6:	f001 f841 	bl	800146c <rcc_peripheral_enable_clock>
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPAEN);
 80003ea:	4620      	mov	r0, r4
 80003ec:	2101      	movs	r1, #1
 80003ee:	f001 f83d 	bl	800146c <rcc_peripheral_enable_clock>
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPCEN);
 80003f2:	4620      	mov	r0, r4



  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO1);	//PA1   joint_1
 80003f4:	4c2f      	ldr	r4, [pc, #188]	; (80004b4 <adc_init+0xd8>)
//*******************************  Para medir la tensión en los pines **********************************
void adc_init (void)
{
  rcc_peripheral_enable_clock(&RCC_APB2ENR, RCC_APB2ENR_ADC1EN);
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPAEN);
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPCEN);
 80003f6:	2104      	movs	r1, #4
 80003f8:	f001 f838 	bl	800146c <rcc_peripheral_enable_clock>



  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO1);	//PA1   joint_1
 80003fc:	4620      	mov	r0, r4
 80003fe:	2103      	movs	r1, #3
 8000400:	2200      	movs	r2, #0
 8000402:	2302      	movs	r3, #2
 8000404:	f000 fd2f 	bl	8000e66 <gpio_mode_setup>
  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO2);	//PA2   joint_2
 8000408:	4620      	mov	r0, r4
 800040a:	2103      	movs	r1, #3
 800040c:	2200      	movs	r2, #0
 800040e:	2304      	movs	r3, #4
 8000410:	f000 fd29 	bl	8000e66 <gpio_mode_setup>
  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO3);	//PA3   joint_3
 8000414:	4620      	mov	r0, r4
 8000416:	2103      	movs	r1, #3
  gpio_mode_setup(GPIOC, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO1);	//PC1   joint_4
 8000418:	f504 6400 	add.w	r4, r4, #2048	; 0x800



  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO1);	//PA1   joint_1
  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO2);	//PA2   joint_2
  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO3);	//PA3   joint_3
 800041c:	2200      	movs	r2, #0
 800041e:	2308      	movs	r3, #8
 8000420:	f000 fd21 	bl	8000e66 <gpio_mode_setup>
  gpio_mode_setup(GPIOC, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO1);	//PC1   joint_4
 8000424:	4620      	mov	r0, r4
 8000426:	2103      	movs	r1, #3
 8000428:	2200      	movs	r2, #0
 800042a:	2302      	movs	r3, #2
 800042c:	f000 fd1b 	bl	8000e66 <gpio_mode_setup>
  gpio_mode_setup(GPIOC, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO2);	//PC2   joint_5
 8000430:	4620      	mov	r0, r4
 8000432:	2103      	movs	r1, #3
 8000434:	2200      	movs	r2, #0
 8000436:	2304      	movs	r3, #4
 8000438:	f000 fd15 	bl	8000e66 <gpio_mode_setup>
  gpio_mode_setup(GPIOC, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO5);	//PC5   joint_6
 800043c:	2320      	movs	r3, #32
 800043e:	2103      	movs	r1, #3
 8000440:	2200      	movs	r2, #0
 8000442:	4620      	mov	r0, r4
 8000444:	f000 fd0f 	bl	8000e66 <gpio_mode_setup>

  adc_set_clk_prescale(ADC_CCR_ADCPRE_BY2);
  adc_disable_scan_mode(ADC1);
 8000448:	f5a4 4468 	sub.w	r4, r4, #59392	; 0xe800
  gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO3);	//PA3   joint_3
  gpio_mode_setup(GPIOC, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO1);	//PC1   joint_4
  gpio_mode_setup(GPIOC, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO2);	//PC2   joint_5
  gpio_mode_setup(GPIOC, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO5);	//PC5   joint_6

  adc_set_clk_prescale(ADC_CCR_ADCPRE_BY2);
 800044c:	2000      	movs	r0, #0
 800044e:	f000 fbe9 	bl	8000c24 <adc_set_clk_prescale>
  adc_disable_scan_mode(ADC1);
 8000452:	4620      	mov	r0, r4
 8000454:	f000 fb68 	bl	8000b28 <adc_disable_scan_mode>
  adc_set_single_conversion_mode(ADC1);
 8000458:	4620      	mov	r0, r4
 800045a:	f000 fb74 	bl	8000b46 <adc_set_single_conversion_mode>

  adc_set_sample_time(ADC1, ADC_CHANNEL1, ADC_SMPR_SMP_3CYC);   //joint_1
 800045e:	4620      	mov	r0, r4
 8000460:	2101      	movs	r1, #1
 8000462:	2200      	movs	r2, #0
 8000464:	f000 fb74 	bl	8000b50 <adc_set_sample_time>
  adc_set_sample_time(ADC1, ADC_CHANNEL2, ADC_SMPR_SMP_3CYC);   //joint_2
 8000468:	4620      	mov	r0, r4
 800046a:	2102      	movs	r1, #2
 800046c:	2200      	movs	r2, #0
 800046e:	f000 fb6f 	bl	8000b50 <adc_set_sample_time>
  adc_set_sample_time(ADC1, ADC_CHANNEL3, ADC_SMPR_SMP_3CYC);   //joint_3
 8000472:	4620      	mov	r0, r4
 8000474:	2103      	movs	r1, #3
 8000476:	2200      	movs	r2, #0
 8000478:	f000 fb6a 	bl	8000b50 <adc_set_sample_time>
  adc_set_sample_time(ADC1, ADC_CHANNEL11, ADC_SMPR_SMP_3CYC);  //joint_4
 800047c:	4620      	mov	r0, r4
 800047e:	210b      	movs	r1, #11
 8000480:	2200      	movs	r2, #0
 8000482:	f000 fb65 	bl	8000b50 <adc_set_sample_time>
  adc_set_sample_time(ADC1, ADC_CHANNEL12, ADC_SMPR_SMP_3CYC);  //joint_5
 8000486:	4620      	mov	r0, r4
 8000488:	210c      	movs	r1, #12
 800048a:	2200      	movs	r2, #0
 800048c:	f000 fb60 	bl	8000b50 <adc_set_sample_time>
  adc_set_sample_time(ADC1, ADC_CHANNEL15, ADC_SMPR_SMP_3CYC);  //joint_6
 8000490:	4620      	mov	r0, r4
 8000492:	210f      	movs	r1, #15
 8000494:	2200      	movs	r2, #0
 8000496:	f000 fb5b 	bl	8000b50 <adc_set_sample_time>

  adc_set_multi_mode(ADC_CCR_MULTI_INDEPENDENT);
 800049a:	2000      	movs	r0, #0
 800049c:	f000 fbcc 	bl	8000c38 <adc_set_multi_mode>
  adc_power_on(ADC1);
 80004a0:	4620      	mov	r0, r4

  //nvic_enable_irq(NVIC_ADC_IRQ);
  //adc_enable_eoc_interrupt(ADC1);
  //adc_disable_eoc_interrupt(ADC1);
}
 80004a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  adc_set_sample_time(ADC1, ADC_CHANNEL11, ADC_SMPR_SMP_3CYC);  //joint_4
  adc_set_sample_time(ADC1, ADC_CHANNEL12, ADC_SMPR_SMP_3CYC);  //joint_5
  adc_set_sample_time(ADC1, ADC_CHANNEL15, ADC_SMPR_SMP_3CYC);  //joint_6

  adc_set_multi_mode(ADC_CCR_MULTI_INDEPENDENT);
  adc_power_on(ADC1);
 80004a6:	f000 bbb7 	b.w	8000c18 <adc_power_on>
 80004aa:	bf00      	nop
 80004ac:	40023830 	.word	0x40023830
 80004b0:	40023844 	.word	0x40023844
 80004b4:	40020000 	.word	0x40020000

080004b8 <system_init>:
  //adc_enable_eoc_interrupt(ADC1);
  //adc_disable_eoc_interrupt(ADC1);
}

void system_init(void) 
{
 80004b8:	b508      	push	{r3, lr}
  rcc_clock_setup_hse_3v3(&hse_8mhz_3v3[CLOCK_3V3_168MHZ]);
 80004ba:	4809      	ldr	r0, [pc, #36]	; (80004e0 <system_init+0x28>)
 80004bc:	f000 fc82 	bl	8000dc4 <rcc_clock_setup_hse_3v3>
  leds_init();
 80004c0:	f7ff ff64 	bl	800038c <leds_init>
  adc_init();
 80004c4:	f7ff ff8a 	bl	80003dc <adc_init>
  cdcacm_init();
 80004c8:	f000 f856 	bl	8000578 <cdcacm_init>
  printled(4, LRED);
 80004cc:	2004      	movs	r0, #4
 80004ce:	4905      	ldr	r1, [pc, #20]	; (80004e4 <system_init+0x2c>)
 80004d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004d4:	f000 f890 	bl	80005f8 <printled>
  DTC_SVM_tim_init();

}
 80004d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  rcc_clock_setup_hse_3v3(&hse_8mhz_3v3[CLOCK_3V3_168MHZ]);
  leds_init();
  adc_init();
  cdcacm_init();
  printled(4, LRED);
  DTC_SVM_tim_init();
 80004dc:	f7ff be52 	b.w	8000184 <DTC_SVM_tim_init>
 80004e0:	08007cf4 	.word	0x08007cf4
 80004e4:	40020c00 	.word	0x40020c00

080004e8 <voltage_measure>:

}

//********************************** Función para medir Tensión**************************************
float voltage_measure (uint32_t adc,uint8_t channel)
{
 80004e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t channels[16];
    float voltage;
            
    channels[0] = channel;
 80004ea:	aa04      	add	r2, sp, #16

}

//********************************** Función para medir Tensión**************************************
float voltage_measure (uint32_t adc,uint8_t channel)
{
 80004ec:	4604      	mov	r4, r0
    uint8_t channels[16];
    float voltage;
            
    channels[0] = channel;
 80004ee:	f802 1d10 	strb.w	r1, [r2, #-16]!
    adc_set_regular_sequence(adc, 1, channels);	
 80004f2:	2101      	movs	r1, #1
 80004f4:	466a      	mov	r2, sp
 80004f6:	f000 fb47 	bl	8000b88 <adc_set_regular_sequence>
    adc_start_conversion_regular(adc);
 80004fa:	4620      	mov	r0, r4
 80004fc:	f000 fb19 	bl	8000b32 <adc_start_conversion_regular>


    while (!adc_eoc(adc));
 8000500:	4620      	mov	r0, r4
 8000502:	f000 fb83 	bl	8000c0c <adc_eoc>
 8000506:	2800      	cmp	r0, #0
 8000508:	d0fa      	beq.n	8000500 <voltage_measure+0x18>
    voltage=adc_read_regular(adc)*(VREF/ADC_CONVERSION_FACTOR);
 800050a:	4620      	mov	r0, r4
 800050c:	f000 fb82 	bl	8000c14 <adc_read_regular>
 8000510:	ee07 0a90 	vmov	s15, r0
 8000514:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    return voltage;
}
 8000518:	eddf 7a02 	vldr	s15, [pc, #8]	; 8000524 <voltage_measure+0x3c>
 800051c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000520:	b004      	add	sp, #16
 8000522:	bd10      	pop	{r4, pc}
 8000524:	3a3dd2f2 	.word	0x3a3dd2f2

08000528 <tim1_up_tim10_isr>:

//*************************************************Interrupción****************************************
void tim1_up_tim10_isr(void) 
{  
  //Clear the update interrupt flag
  timer_clear_flag(TIM1,TIM_SR_UIF);
 8000528:	4801      	ldr	r0, [pc, #4]	; (8000530 <tim1_up_tim10_isr+0x8>)
 800052a:	2101      	movs	r1, #1
 800052c:	f000 bd50 	b.w	8000fd0 <timer_clear_flag>
 8000530:	40010000 	.word	0x40010000

08000534 <main>:




int main(void)
{
 8000534:	b510      	push	{r4, lr}
    system_init();
 8000536:	f7ff ffbf 	bl	80004b8 <system_init>
        //joint_1_angle = CONVERSION_FACTOR_JOINT_1*voltage_joint_1;
        //joint_2_angle = CONVERSION_FACTOR_JOINT_2*voltage_joint_2;   
		//joint_3_angle = CONVERSION_FACTOR_JOINT_3*voltage_joint_3; 
		
		static int counter0 = 0;
		counter0+=1;
 800053a:	4c0c      	ldr	r4, [pc, #48]	; (800056c <main+0x38>)
  //float joint_1_angle = 0.0f;
  //float joint_2_angle = 0.0f;   
  //float joint_3_angle = 0.0f;

	
        voltage_joint_0	= voltage_measure (ADC1,ADC_CHANNEL1);      
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <main+0x3c>)
 800053e:	2101      	movs	r1, #1
 8000540:	f7ff ffd2 	bl	80004e8 <voltage_measure>
        //joint_1_angle = CONVERSION_FACTOR_JOINT_1*voltage_joint_1;
        //joint_2_angle = CONVERSION_FACTOR_JOINT_2*voltage_joint_2;   
		//joint_3_angle = CONVERSION_FACTOR_JOINT_3*voltage_joint_3; 
		
		static int counter0 = 0;
		counter0+=1;
 8000544:	6823      	ldr	r3, [r4, #0]
		if(counter0>=50000){
 8000546:	f24c 324f 	movw	r2, #49999	; 0xc34f
        //joint_1_angle = CONVERSION_FACTOR_JOINT_1*voltage_joint_1;
        //joint_2_angle = CONVERSION_FACTOR_JOINT_2*voltage_joint_2;   
		//joint_3_angle = CONVERSION_FACTOR_JOINT_3*voltage_joint_3; 
		
		static int counter0 = 0;
		counter0+=1;
 800054a:	3301      	adds	r3, #1
		if(counter0>=50000){
 800054c:	4293      	cmp	r3, r2
  //float joint_1_angle = 0.0f;
  //float joint_2_angle = 0.0f;   
  //float joint_3_angle = 0.0f;

	
        voltage_joint_0	= voltage_measure (ADC1,ADC_CHANNEL1);      
 800054e:	ee10 0a10 	vmov	r0, s0
        //joint_1_angle = CONVERSION_FACTOR_JOINT_1*voltage_joint_1;
        //joint_2_angle = CONVERSION_FACTOR_JOINT_2*voltage_joint_2;   
		//joint_3_angle = CONVERSION_FACTOR_JOINT_3*voltage_joint_3; 
		
		static int counter0 = 0;
		counter0+=1;
 8000552:	6023      	str	r3, [r4, #0]
		if(counter0>=50000){
 8000554:	ddf1      	ble.n	800053a <main+0x6>
        //printf("%6.2f %6.2f %6.2f %6.2f \n",joint_0_angle,joint_1_angle,joint_2_angle, joint_3_angle);
        printf("%6.2f \n",joint_0_angle);
 8000556:	f006 fd43 	bl	8006fe0 <__aeabi_f2d>
 800055a:	4602      	mov	r2, r0
 800055c:	460b      	mov	r3, r1
 800055e:	4805      	ldr	r0, [pc, #20]	; (8000574 <main+0x40>)
 8000560:	f002 fa46 	bl	80029f0 <printf>
        counter0 =0; 
 8000564:	2300      	movs	r3, #0
 8000566:	6023      	str	r3, [r4, #0]
 8000568:	e7e7      	b.n	800053a <main+0x6>
 800056a:	bf00      	nop
 800056c:	200008c4 	.word	0x200008c4
 8000570:	40012000 	.word	0x40012000
 8000574:	08007bc4 	.word	0x08007bc4

08000578 <cdcacm_init>:
#include <libopencm3-plus/utils/data_structs.h>
#include <libopencm3-plus/cdcacm_one_serial/cdcacm.h>
#include <libopencm3-plus/utils/common.h>
#include <libopencm3-plus/cdcacm_one_serial/cdcacm_common.h>

void cdcacm_init(void) {
 8000578:	b508      	push	{r3, lr}
  //system setup
  rcc_peripheral_enable_clock(&RCC_AHB1ENR, RCC_AHB1ENR_IOPAEN);
 800057a:	4813      	ldr	r0, [pc, #76]	; (80005c8 <cdcacm_init+0x50>)
 800057c:	2101      	movs	r1, #1
 800057e:	f000 ff75 	bl	800146c <rcc_peripheral_enable_clock>
  rcc_peripheral_enable_clock(&RCC_AHB2ENR, RCC_AHB2ENR_OTGFSEN);
 8000582:	4812      	ldr	r0, [pc, #72]	; (80005cc <cdcacm_init+0x54>)
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	f000 ff71 	bl	800146c <rcc_peripheral_enable_clock>
  gpio_mode_setup(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE,
 800058a:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 800058e:	4810      	ldr	r0, [pc, #64]	; (80005d0 <cdcacm_init+0x58>)
 8000590:	2102      	movs	r1, #2
 8000592:	2200      	movs	r2, #0
 8000594:	f000 fc67 	bl	8000e66 <gpio_mode_setup>
			GPIO9 | GPIO11 | GPIO12);
  gpio_set_af(GPIOA, GPIO_AF10, GPIO9 | GPIO11 | GPIO12);
 8000598:	480d      	ldr	r0, [pc, #52]	; (80005d0 <cdcacm_init+0x58>)
 800059a:	210a      	movs	r1, #10
 800059c:	f44f 52d0 	mov.w	r2, #6656	; 0x1a00
 80005a0:	f000 fc83 	bl	8000eaa <gpio_set_af>

  cdcacm_usb_init();
 80005a4:	f000 f9e4 	bl	8000970 <cdcacm_usb_init>
  nvic_set_priority(NVIC_OTG_FS_IRQ, IRQ_PRI_USB);
 80005a8:	2043      	movs	r0, #67	; 0x43
 80005aa:	2120      	movs	r1, #32
 80005ac:	f001 fbb0 	bl	8001d10 <nvic_set_priority>
  nvic_enable_irq(NVIC_OTG_FS_IRQ);
 80005b0:	2043      	movs	r0, #67	; 0x43
 80005b2:	f001 fb9f 	bl	8001cf4 <nvic_enable_irq>
  while (cdcacm_get_config() != 1) { wait(1); }; //wait until usb is configured
 80005b6:	f000 f981 	bl	80008bc <cdcacm_get_config>
 80005ba:	2801      	cmp	r0, #1
 80005bc:	d003      	beq.n	80005c6 <cdcacm_init+0x4e>
 80005be:	2001      	movs	r0, #1
 80005c0:	f000 f80e 	bl	80005e0 <wait>
 80005c4:	e7f7      	b.n	80005b6 <cdcacm_init+0x3e>
}
 80005c6:	bd08      	pop	{r3, pc}
 80005c8:	40023830 	.word	0x40023830
 80005cc:	40023834 	.word	0x40023834
 80005d0:	40020000 	.word	0x40020000

080005d4 <otg_fs_isr>:

void otg_fs_isr(void)
{
  usbd_poll(usbdev);
 80005d4:	4b01      	ldr	r3, [pc, #4]	; (80005dc <otg_fs_isr+0x8>)
 80005d6:	6818      	ldr	r0, [r3, #0]
 80005d8:	f000 bf7a 	b.w	80014d0 <usbd_poll>
 80005dc:	200088d0 	.word	0x200088d0

080005e0 <wait>:
#include <libopencm3-plus/utils/misc.h>
#include <libopencm3/stm32/gpio.h>

void wait(int a) {
  int i, j;
  for (j=0; j< a; j++) {
 80005e0:	2200      	movs	r2, #0
 80005e2:	4282      	cmp	r2, r0
 80005e4:	da05      	bge.n	80005f2 <wait+0x12>
 80005e6:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <wait+0x14>)
    for (i = 0; i < 100000; i++)   /* Wait a bit. */
      __asm__("nop");
 80005e8:	bf00      	nop
#include <libopencm3/stm32/gpio.h>

void wait(int a) {
  int i, j;
  for (j=0; j< a; j++) {
    for (i = 0; i < 100000; i++)   /* Wait a bit. */
 80005ea:	3b01      	subs	r3, #1
 80005ec:	d1fc      	bne.n	80005e8 <wait+0x8>
#include <libopencm3-plus/utils/misc.h>
#include <libopencm3/stm32/gpio.h>

void wait(int a) {
  int i, j;
  for (j=0; j< a; j++) {
 80005ee:	3201      	adds	r2, #1
 80005f0:	e7f7      	b.n	80005e2 <wait+0x2>
 80005f2:	4770      	bx	lr
 80005f4:	000186a0 	.word	0x000186a0

080005f8 <printled>:
    for (i = 0; i < 100000; i++)   /* Wait a bit. */
      __asm__("nop");
  }
}

void printled(int rep, int gpiop, int pin) {
 80005f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005fc:	230a      	movs	r3, #10
 80005fe:	4606      	mov	r6, r0
 8000600:	460d      	mov	r5, r1
 8000602:	4617      	mov	r7, r2
 8000604:	4c0f      	ldr	r4, [pc, #60]	; (8000644 <printled+0x4c>)
  int i, j;
  for (j=0; j< 10; j++) {
    for (i = 0; i < 1000000; i++)   /* Wait a bit. */
      __asm__("nop");
 8000606:	bf00      	nop
}

void printled(int rep, int gpiop, int pin) {
  int i, j;
  for (j=0; j< 10; j++) {
    for (i = 0; i < 1000000; i++)   /* Wait a bit. */
 8000608:	3c01      	subs	r4, #1
 800060a:	d1fc      	bne.n	8000606 <printled+0xe>
  }
}

void printled(int rep, int gpiop, int pin) {
  int i, j;
  for (j=0; j< 10; j++) {
 800060c:	3b01      	subs	r3, #1
 800060e:	d1f9      	bne.n	8000604 <printled+0xc>
 8000610:	461c      	mov	r4, r3
    for (i = 0; i < 1000000; i++)   /* Wait a bit. */
      __asm__("nop");
  }
  for (i=0; i<rep; i++) {
 8000612:	42b4      	cmp	r4, r6
 8000614:	da13      	bge.n	800063e <printled+0x46>
    gpio_set(gpiop, pin);
 8000616:	fa1f f887 	uxth.w	r8, r7
 800061a:	4628      	mov	r0, r5
 800061c:	4641      	mov	r1, r8
 800061e:	f000 fc19 	bl	8000e54 <gpio_set>
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <printled+0x50>)
    for (j = 0; j < 8000000; j++)   /* Wait a bit. */
      __asm__("nop");
 8000624:	bf00      	nop
    for (i = 0; i < 1000000; i++)   /* Wait a bit. */
      __asm__("nop");
  }
  for (i=0; i<rep; i++) {
    gpio_set(gpiop, pin);
    for (j = 0; j < 8000000; j++)   /* Wait a bit. */
 8000626:	3b01      	subs	r3, #1
 8000628:	d1fc      	bne.n	8000624 <printled+0x2c>
      __asm__("nop");
    gpio_clear(gpiop, pin);
 800062a:	4628      	mov	r0, r5
 800062c:	4641      	mov	r1, r8
 800062e:	f000 fc13 	bl	8000e58 <gpio_clear>
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <printled+0x50>)
    for (j = 0; j < 8000000; j++)   /* Wait a bit. */
      __asm__("nop");
 8000634:	bf00      	nop
  for (i=0; i<rep; i++) {
    gpio_set(gpiop, pin);
    for (j = 0; j < 8000000; j++)   /* Wait a bit. */
      __asm__("nop");
    gpio_clear(gpiop, pin);
    for (j = 0; j < 8000000; j++)   /* Wait a bit. */
 8000636:	3b01      	subs	r3, #1
 8000638:	d1fc      	bne.n	8000634 <printled+0x3c>
  int i, j;
  for (j=0; j< 10; j++) {
    for (i = 0; i < 1000000; i++)   /* Wait a bit. */
      __asm__("nop");
  }
  for (i=0; i<rep; i++) {
 800063a:	3401      	adds	r4, #1
 800063c:	e7e9      	b.n	8000612 <printled+0x1a>
      __asm__("nop");
    gpio_clear(gpiop, pin);
    for (j = 0; j < 8000000; j++)   /* Wait a bit. */
      __asm__("nop");
  }
}
 800063e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000642:	bf00      	nop
 8000644:	000f4240 	.word	0x000f4240
 8000648:	007a1200 	.word	0x007a1200

0800064c <strlen2>:
      __asm__("nop");
  }
}

int strlen2(char s[]) {
  int i=0;
 800064c:	2300      	movs	r3, #0
  while (s[i] != '\0') {
 800064e:	5cc2      	ldrb	r2, [r0, r3]
 8000650:	3301      	adds	r3, #1
 8000652:	2a00      	cmp	r2, #0
 8000654:	d1fb      	bne.n	800064e <strlen2+0x2>
    i++;
  }
  return(i+1);
}
 8000656:	4618      	mov	r0, r3
 8000658:	4770      	bx	lr

0800065a <reverse>:

void reverse(char s[])
{
 800065a:	b510      	push	{r4, lr}
 800065c:	4604      	mov	r4, r0
  int i, j;
  char c;
  for (i = 0, j = strlen2(s)-2; i<j; i++, j--) {
 800065e:	f7ff fff5 	bl	800064c <strlen2>
 8000662:	2200      	movs	r2, #0
 8000664:	1e83      	subs	r3, r0, #2
 8000666:	429a      	cmp	r2, r3
 8000668:	da06      	bge.n	8000678 <reverse+0x1e>
    c = s[i];
 800066a:	5ca1      	ldrb	r1, [r4, r2]
    s[i] = s[j];
 800066c:	5ce0      	ldrb	r0, [r4, r3]
 800066e:	54a0      	strb	r0, [r4, r2]
    s[j] = c;
 8000670:	54e1      	strb	r1, [r4, r3]

void reverse(char s[])
{
  int i, j;
  char c;
  for (i = 0, j = strlen2(s)-2; i<j; i++, j--) {
 8000672:	3201      	adds	r2, #1
 8000674:	3b01      	subs	r3, #1
 8000676:	e7f6      	b.n	8000666 <reverse+0xc>
    c = s[i];
    s[i] = s[j];
    s[j] = c;
  }
}
 8000678:	bd10      	pop	{r4, pc}

0800067a <itoa>:

void itoa(int n, char s[])
{
 800067a:	b570      	push	{r4, r5, r6, lr}
 800067c:	2200      	movs	r2, #0
 800067e:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 8000682:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
  int i, sign;
  if ((sign = n) < 0)  /* record sign */
    n = -n;          /* make n positive */
  i = 0;
  do {       /* generate digits in reverse order */
    s[i++] = n % 10 + '0';   /* get next digit */
 8000686:	260a      	movs	r6, #10
 8000688:	fb94 f5f6 	sdiv	r5, r4, r6
 800068c:	fb06 4415 	mls	r4, r6, r5, r4
 8000690:	3430      	adds	r4, #48	; 0x30
 8000692:	548c      	strb	r4, [r1, r2]
 8000694:	1c53      	adds	r3, r2, #1
  } while ((n /= 10) > 0);     /* delete it */
 8000696:	462c      	mov	r4, r5
 8000698:	b10d      	cbz	r5, 800069e <itoa+0x24>
  int i, sign;
  if ((sign = n) < 0)  /* record sign */
    n = -n;          /* make n positive */
  i = 0;
  do {       /* generate digits in reverse order */
    s[i++] = n % 10 + '0';   /* get next digit */
 800069a:	461a      	mov	r2, r3
 800069c:	e7f3      	b.n	8000686 <itoa+0xc>
  } while ((n /= 10) > 0);     /* delete it */
  if (sign < 0)
 800069e:	2800      	cmp	r0, #0
  int i, sign;
  if ((sign = n) < 0)  /* record sign */
    n = -n;          /* make n positive */
  i = 0;
  do {       /* generate digits in reverse order */
    s[i++] = n % 10 + '0';   /* get next digit */
 80006a0:	461c      	mov	r4, r3
  } while ((n /= 10) > 0);     /* delete it */
  if (sign < 0)
 80006a2:	da02      	bge.n	80006aa <itoa+0x30>
    s[i++] = '-';
 80006a4:	1c93      	adds	r3, r2, #2
 80006a6:	222d      	movs	r2, #45	; 0x2d
 80006a8:	550a      	strb	r2, [r1, r4]
  s[i] = '\0';
 80006aa:	2200      	movs	r2, #0
 80006ac:	54ca      	strb	r2, [r1, r3]
  reverse(s);
 80006ae:	4608      	mov	r0, r1
}
 80006b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    s[i++] = n % 10 + '0';   /* get next digit */
  } while ((n /= 10) > 0);     /* delete it */
  if (sign < 0)
    s[i++] = '-';
  s[i] = '\0';
  reverse(s);
 80006b4:	f7ff bfd1 	b.w	800065a <reverse>

080006b8 <_write>:
   &dotab_cdcacm,  /* standard error */
   0             /* terminates the list */
};

long _write(int fd, const void *buf, size_t cnt);
long _write(int fd, const void *buf, size_t cnt) {
 80006b8:	b508      	push	{r3, lr}
  return (*devoptab_list[fd]).write(fd, buf, cnt);
 80006ba:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <_write+0x10>)
 80006bc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	4798      	blx	r3
}
 80006c4:	bd08      	pop	{r3, pc}
 80006c6:	bf00      	nop
 80006c8:	20000000 	.word	0x20000000

080006cc <_read>:

long _read(int fd, char *buf, size_t cnt);
long _read(int fd, char *buf, size_t cnt) {
 80006cc:	b508      	push	{r3, lr}
  return (*devoptab_list[fd]).read(fd, buf, cnt);
 80006ce:	4b03      	ldr	r3, [pc, #12]	; (80006dc <_read+0x10>)
 80006d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80006d4:	691b      	ldr	r3, [r3, #16]
 80006d6:	4798      	blx	r3
}
 80006d8:	bd08      	pop	{r3, pc}
 80006da:	bf00      	nop
 80006dc:	20000000 	.word	0x20000000

080006e0 <_open>:

int _open(const char *file, int flags, int mode);
int _open(const char *file, int flags, int mode) {
 80006e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006e4:	4605      	mov	r5, r0
 80006e6:	460f      	mov	r7, r1
 80006e8:	4690      	mov	r8, r2
  int which_devoptab = 0;
 80006ea:	2400      	movs	r4, #0
  int fd = -1;
  /* search for "file" in dotab_list[].name */
  do {
    if( strcmp( (*devoptab_list[which_devoptab]).name, file ) == 0 ) {
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <_open+0x30>)
 80006ee:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 80006f2:	4629      	mov	r1, r5
 80006f4:	6830      	ldr	r0, [r6, #0]
 80006f6:	f002 fa2f 	bl	8002b58 <strcmp>
 80006fa:	b108      	cbz	r0, 8000700 <_open+0x20>
      fd = which_devoptab;
      break;
    }
  } while( devoptab_list[which_devoptab++] );
 80006fc:	3401      	adds	r4, #1
 80006fe:	e7f5      	b.n	80006ec <_open+0xc>
  /* if we found the requested file/device,
     then invoke the device's open_r() method */
  if( fd != -1 ) (*devoptab_list[fd]).open(file, flags, mode );
 8000700:	6873      	ldr	r3, [r6, #4]
 8000702:	4628      	mov	r0, r5
 8000704:	4639      	mov	r1, r7
 8000706:	4642      	mov	r2, r8
 8000708:	4798      	blx	r3
  /* it doesn't exist! */
  else errno = ENODEV;
  return fd;
}
 800070a:	4620      	mov	r0, r4
 800070c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000710:	20000000 	.word	0x20000000

08000714 <_close>:

long _close(int fd);
long _close(int fd) {
 8000714:	b508      	push	{r3, lr}
  return (*devoptab_list[fd]).close(fd);
 8000716:	4b03      	ldr	r3, [pc, #12]	; (8000724 <_close+0x10>)
 8000718:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	4798      	blx	r3
}
 8000720:	bd08      	pop	{r3, pc}
 8000722:	bf00      	nop
 8000724:	20000000 	.word	0x20000000

08000728 <_sbrk>:

unsigned char _heap[HEAPSIZE];

caddr_t _sbrk(int incr);
caddr_t _sbrk(int incr) {
 8000728:	b530      	push	{r4, r5, lr}
  static unsigned char *heap_end;
  unsigned char *prev_heap_end;
  ///* debugging
  ///*
  static int first=0;
  if (first==2) {
 800072a:	4b20      	ldr	r3, [pc, #128]	; (80007ac <_sbrk+0x84>)
 800072c:	681c      	ldr	r4, [r3, #0]
 800072e:	2c02      	cmp	r4, #2
}

unsigned char _heap[HEAPSIZE];

caddr_t _sbrk(int incr);
caddr_t _sbrk(int incr) {
 8000730:	b085      	sub	sp, #20
 8000732:	4605      	mov	r5, r0
  static unsigned char *heap_end;
  unsigned char *prev_heap_end;
  ///* debugging
  ///*
  static int first=0;
  if (first==2) {
 8000734:	d116      	bne.n	8000764 <_sbrk+0x3c>
    write( 2, "Asking for: ", 12);
 8000736:	220c      	movs	r2, #12
 8000738:	4620      	mov	r0, r4
 800073a:	491d      	ldr	r1, [pc, #116]	; (80007b0 <_sbrk+0x88>)
 800073c:	f002 fb4a 	bl	8002dd4 <write>
    char incr_c[15];
    itoa(incr, incr_c);
 8000740:	4669      	mov	r1, sp
 8000742:	4628      	mov	r0, r5
 8000744:	f7ff ff99 	bl	800067a <itoa>
    write( 2, incr_c, strlen2(incr_c));
 8000748:	4668      	mov	r0, sp
 800074a:	f7ff ff7f 	bl	800064c <strlen2>
 800074e:	4669      	mov	r1, sp
 8000750:	4602      	mov	r2, r0
 8000752:	4620      	mov	r0, r4
 8000754:	f002 fb3e 	bl	8002dd4 <write>
    write( 2, " bytes.\n", 8);
 8000758:	4620      	mov	r0, r4
 800075a:	4916      	ldr	r1, [pc, #88]	; (80007b4 <_sbrk+0x8c>)
 800075c:	2208      	movs	r2, #8
 800075e:	f002 fb39 	bl	8002dd4 <write>
 8000762:	e001      	b.n	8000768 <_sbrk+0x40>
  } else {
    first++;
 8000764:	3401      	adds	r4, #1
 8000766:	601c      	str	r4, [r3, #0]
  }
  //*/
  //
/* initialize */
  if( heap_end == 0 ) heap_end = _heap;
 8000768:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <_sbrk+0x90>)
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <_sbrk+0x94>)
 800076c:	6811      	ldr	r1, [r2, #0]
 800076e:	b901      	cbnz	r1, 8000772 <_sbrk+0x4a>
 8000770:	6013      	str	r3, [r2, #0]
  prev_heap_end = heap_end;
 8000772:	6810      	ldr	r0, [r2, #0]
  if( heap_end + incr -_heap > HEAPSIZE ) {
 8000774:	4405      	add	r5, r0
 8000776:	1aeb      	subs	r3, r5, r3
 8000778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800077c:	dd12      	ble.n	80007a4 <_sbrk+0x7c>
/* heap overflow—announce on stderr */
    printled(10, LRED);
 800077e:	200a      	movs	r0, #10
 8000780:	490f      	ldr	r1, [pc, #60]	; (80007c0 <_sbrk+0x98>)
 8000782:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000786:	f7ff ff37 	bl	80005f8 <printled>
    printled(10, LORANGE);
 800078a:	200a      	movs	r0, #10
 800078c:	490c      	ldr	r1, [pc, #48]	; (80007c0 <_sbrk+0x98>)
 800078e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000792:	f7ff ff31 	bl	80005f8 <printled>
    write( 2, "Heap overflow!\n", 15 );
 8000796:	490b      	ldr	r1, [pc, #44]	; (80007c4 <_sbrk+0x9c>)
 8000798:	220f      	movs	r2, #15
 800079a:	2002      	movs	r0, #2
 800079c:	f002 fb1a 	bl	8002dd4 <write>
    abort();
 80007a0:	f001 fcd0 	bl	8002144 <abort>
  }
  heap_end += incr;
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <_sbrk+0x90>)
 80007a6:	601d      	str	r5, [r3, #0]
  return (caddr_t) prev_heap_end;
}
 80007a8:	b005      	add	sp, #20
 80007aa:	bd30      	pop	{r4, r5, pc}
 80007ac:	200008c8 	.word	0x200008c8
 80007b0:	08007bcc 	.word	0x08007bcc
 80007b4:	08007bd9 	.word	0x08007bd9
 80007b8:	200088cc 	.word	0x200088cc
 80007bc:	200008cc 	.word	0x200008cc
 80007c0:	40020c00 	.word	0x40020c00
 80007c4:	08007be2 	.word	0x08007be2

080007c8 <_stat>:

int _stat(const char *file, struct stat *pstat);
int _stat(NOT_USED const char *file, struct stat *pstat) {
  pstat->st_mode = S_IFCHR;
 80007c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007cc:	604b      	str	r3, [r1, #4]
  return 0;
}
 80007ce:	2000      	movs	r0, #0
 80007d0:	4770      	bx	lr

080007d2 <_fstat>:

int _fstat(int fd, struct stat *pstat);
int _fstat(NOT_USED int fd, struct stat *pstat) {
  pstat->st_mode = S_IFCHR;
 80007d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d6:	604b      	str	r3, [r1, #4]
  return 0;
}
 80007d8:	2000      	movs	r0, #0
 80007da:	4770      	bx	lr

080007dc <_lseek>:

off_t _lseek(int fd, off_t pos, int whence);
off_t _lseek(NOT_USED int fd, NOT_USED off_t pos, NOT_USED int whence) {
   return 0;
}
 80007dc:	2000      	movs	r0, #0
 80007de:	4770      	bx	lr

080007e0 <cdcacm_control_request>:
	(void)complete;
	(void)buf;
	(void)usbd_dev;
	(void)len;

	switch (req->bRequest) {
 80007e0:	7848      	ldrb	r0, [r1, #1]
 80007e2:	2820      	cmp	r0, #32
 80007e4:	d004      	beq.n	80007f0 <cdcacm_control_request+0x10>
	case USB_CDC_REQ_SET_LINE_CODING:
		if (*len < sizeof(struct usb_cdc_line_coding))
			return 0;
		return 1;
	}
	return 0;
 80007e6:	f1b0 0322 	subs.w	r3, r0, #34	; 0x22
 80007ea:	4258      	negs	r0, r3
 80007ec:	4158      	adcs	r0, r3
 80007ee:	4770      	bx	lr
		 * advertise it in the ACM functional descriptor.
		 */
		return 1;
		}
	case USB_CDC_REQ_SET_LINE_CODING:
		if (*len < sizeof(struct usb_cdc_line_coding))
 80007f0:	8818      	ldrh	r0, [r3, #0]
 80007f2:	2806      	cmp	r0, #6
 80007f4:	bf94      	ite	ls
 80007f6:	2000      	movls	r0, #0
 80007f8:	2001      	movhi	r0, #1
			return 0;
		return 1;
	}
	return 0;
}
 80007fa:	4770      	bx	lr

080007fc <cdcacm_callback_out>:
int cdcacm_sent=true;

static void cdcacm_callback_out(NOT_USED usbd_device* usbd_dev,NOT_USED uint8_t ep)
{
  //printled(1, LORANGE);
  cdcacm_sent=true;
 80007fc:	4b01      	ldr	r3, [pc, #4]	; (8000804 <cdcacm_callback_out+0x8>)
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	4770      	bx	lr
 8000804:	2000001c 	.word	0x2000001c

08000808 <cdcacm_reset>:
  };
  return(cbuf_pop(&cdc_cbuf_in, ptr, len));
}

void cdcacm_reset(void);
void cdcacm_reset(void) {
 8000808:	4770      	bx	lr
	...

0800080c <cdcacm_set_config>:
{
	return configured;
}

static void cdcacm_set_config(usbd_device *usbd_dev, uint16_t wValue)
{
 800080c:	b530      	push	{r4, r5, lr}
	configured = wValue;
 800080e:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <cdcacm_set_config+0x78>)
{
	return configured;
}

static void cdcacm_set_config(usbd_device *usbd_dev, uint16_t wValue)
{
 8000810:	b087      	sub	sp, #28
	configured = wValue;
 8000812:	6019      	str	r1, [r3, #0]
	usbd_ep_setup(usbd_dev, 0x01, USB_ENDPOINT_ATTR_BULK, CDCACM_PACKET_SIZE, cdcacm_callback_in);
 8000814:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <cdcacm_set_config+0x7c>)
 8000816:	2101      	movs	r1, #1
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	2202      	movs	r2, #2
 800081c:	2340      	movs	r3, #64	; 0x40
{
	return configured;
}

static void cdcacm_set_config(usbd_device *usbd_dev, uint16_t wValue)
{
 800081e:	4604      	mov	r4, r0
	configured = wValue;
	usbd_ep_setup(usbd_dev, 0x01, USB_ENDPOINT_ATTR_BULK, CDCACM_PACKET_SIZE, cdcacm_callback_in);
 8000820:	f000 fe5c 	bl	80014dc <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, 0x82, USB_ENDPOINT_ATTR_BULK, CDCACM_PACKET_SIZE, cdcacm_callback_out);
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <cdcacm_set_config+0x80>)
	usbd_ep_setup(usbd_dev, 0x83, USB_ENDPOINT_ATTR_INTERRUPT, 16, NULL);
 8000826:	2500      	movs	r5, #0

static void cdcacm_set_config(usbd_device *usbd_dev, uint16_t wValue)
{
	configured = wValue;
	usbd_ep_setup(usbd_dev, 0x01, USB_ENDPOINT_ATTR_BULK, CDCACM_PACKET_SIZE, cdcacm_callback_in);
	usbd_ep_setup(usbd_dev, 0x82, USB_ENDPOINT_ATTR_BULK, CDCACM_PACKET_SIZE, cdcacm_callback_out);
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	4620      	mov	r0, r4
 800082c:	2182      	movs	r1, #130	; 0x82
 800082e:	2202      	movs	r2, #2
 8000830:	2340      	movs	r3, #64	; 0x40
 8000832:	f000 fe53 	bl	80014dc <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, 0x83, USB_ENDPOINT_ATTR_INTERRUPT, 16, NULL);
 8000836:	4620      	mov	r0, r4
 8000838:	9500      	str	r5, [sp, #0]
 800083a:	2183      	movs	r1, #131	; 0x83
 800083c:	2203      	movs	r2, #3
 800083e:	2310      	movs	r3, #16
 8000840:	f000 fe4c 	bl	80014dc <usbd_ep_setup>
	usbd_register_control_callback(
 8000844:	4620      	mov	r0, r4
 8000846:	2121      	movs	r1, #33	; 0x21
 8000848:	227f      	movs	r2, #127	; 0x7f
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <cdcacm_set_config+0x84>)
 800084c:	f001 f90b 	bl	8001a66 <usbd_register_control_callback>
	 * Allows the use of /dev/tty* devices on *BSD/MacOS
	 */
	char buf[10];
	struct usb_cdc_notification *notif = (void*)buf;
	/* We echo signals back to host as notification */
	notif->bmRequestType = 0xA1;
 8000850:	23a1      	movs	r3, #161	; 0xa1
 8000852:	f88d 300c 	strb.w	r3, [sp, #12]
	notif->bNotification = USB_CDC_NOTIFY_SERIAL_STATE;
 8000856:	2320      	movs	r3, #32
 8000858:	f88d 300d 	strb.w	r3, [sp, #13]
	notif->wValue = 0;
	notif->wIndex = 0;
	notif->wLength = 2;
 800085c:	2302      	movs	r3, #2
 800085e:	f8ad 3012 	strh.w	r3, [sp, #18]
	buf[8] = 3; /* DCD | DSR */
 8000862:	2303      	movs	r3, #3
 8000864:	f88d 3014 	strb.w	r3, [sp, #20]
	buf[9] = 0;
	usbd_ep_write_packet(usbd_dev, 0x83, buf, 10);
 8000868:	4620      	mov	r0, r4
 800086a:	2183      	movs	r1, #131	; 0x83
 800086c:	aa03      	add	r2, sp, #12
 800086e:	230a      	movs	r3, #10
	char buf[10];
	struct usb_cdc_notification *notif = (void*)buf;
	/* We echo signals back to host as notification */
	notif->bmRequestType = 0xA1;
	notif->bNotification = USB_CDC_NOTIFY_SERIAL_STATE;
	notif->wValue = 0;
 8000870:	f8ad 500e 	strh.w	r5, [sp, #14]
	notif->wIndex = 0;
 8000874:	f8ad 5010 	strh.w	r5, [sp, #16]
	notif->wLength = 2;
	buf[8] = 3; /* DCD | DSR */
	buf[9] = 0;
 8000878:	f88d 5015 	strb.w	r5, [sp, #21]
	usbd_ep_write_packet(usbd_dev, 0x83, buf, 10);
 800087c:	f000 fe4d 	bl	800151a <usbd_ep_write_packet>
}
 8000880:	b007      	add	sp, #28
 8000882:	bd30      	pop	{r4, r5, pc}
 8000884:	200089bc 	.word	0x200089bc
 8000888:	08000895 	.word	0x08000895
 800088c:	080007fd 	.word	0x080007fd
 8000890:	080007e1 	.word	0x080007e1

08000894 <cdcacm_callback_in>:
	}
	return 0;
}

static void cdcacm_callback_in(usbd_device *usbd_dev, uint8_t ep)
{
 8000894:	b508      	push	{r3, lr}
  (void)ep;
  static char buf[CDCACM_PACKET_SIZE];
  int len = usbd_ep_read_packet(usbd_dev, 0x01, buf, CDCACM_PACKET_SIZE);
 8000896:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <cdcacm_callback_in+0x20>)
 8000898:	2101      	movs	r1, #1
 800089a:	2340      	movs	r3, #64	; 0x40
 800089c:	f000 fe43 	bl	8001526 <usbd_ep_read_packet>
  if (len > 0) {
 80008a0:	4602      	mov	r2, r0
 80008a2:	b128      	cbz	r0, 80008b0 <cdcacm_callback_in+0x1c>
    cbuf_append(&cdc_cbuf_in, buf,  len);
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <cdcacm_callback_in+0x24>)
 80008a6:	4903      	ldr	r1, [pc, #12]	; (80008b4 <cdcacm_callback_in+0x20>)
  }
}
 80008a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  (void)ep;
  static char buf[CDCACM_PACKET_SIZE];
  int len = usbd_ep_read_packet(usbd_dev, 0x01, buf, CDCACM_PACKET_SIZE);
  if (len > 0) {
    cbuf_append(&cdc_cbuf_in, buf,  len);
 80008ac:	f000 b90e 	b.w	8000acc <cbuf_append>
 80008b0:	bd08      	pop	{r3, pc}
 80008b2:	bf00      	nop
 80008b4:	20008958 	.word	0x20008958
 80008b8:	200089a4 	.word	0x200089a4

080008bc <cdcacm_get_config>:
}

int cdcacm_get_config(void)
{
	return configured;
}
 80008bc:	4b01      	ldr	r3, [pc, #4]	; (80008c4 <cdcacm_get_config+0x8>)
 80008be:	6818      	ldr	r0, [r3, #0]
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	200089bc 	.word	0x200089bc

080008c8 <cdcacm_open>:
  return s;
}

int cdcacm_open(NOT_USED const char *path, NOT_USED int flags, NOT_USED int mode) {
  return(0);
}
 80008c8:	2000      	movs	r0, #0
 80008ca:	4770      	bx	lr

080008cc <cdcacm_close>:

int cdcacm_close(NOT_USED int fd) {
  return(0);
}
 80008cc:	2000      	movs	r0, #0
 80008ce:	4770      	bx	lr

080008d0 <cdcacm_write_now>:

void cdcacm_write_now(char* buf, int len) {
 80008d0:	b538      	push	{r3, r4, r5, lr}
 80008d2:	4605      	mov	r5, r0
 80008d4:	460c      	mov	r4, r1
  //printled(1, LGREEN);
  //while (cdcacm_sent == false) {};
  //nvic_disable_irq(NVIC_OTG_FS_IRQ);
  //cdcacm_sent=false;
  //__asm__("CPSID i;");
  while (usbd_ep_write_packet(usbdev, 0x82, buf, len) ==0);
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <cdcacm_write_now+0x1c>)
 80008d8:	2182      	movs	r1, #130	; 0x82
 80008da:	6818      	ldr	r0, [r3, #0]
 80008dc:	462a      	mov	r2, r5
 80008de:	b2a3      	uxth	r3, r4
 80008e0:	f000 fe1b 	bl	800151a <usbd_ep_write_packet>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d0f6      	beq.n	80008d6 <cdcacm_write_now+0x6>
  //cdcacm_sent=false;
  //nvic_enable_irq(NVIC_OTG_FS_IRQ);
  //__asm__("CPSIE i;");
  //printled(2, LGREEN);
}
 80008e8:	bd38      	pop	{r3, r4, r5, pc}
 80008ea:	bf00      	nop
 80008ec:	200088d0 	.word	0x200088d0

080008f0 <cdcacm_write>:

long cdcacm_write(NOT_USED int fd, const char *ptr, int len) {
 80008f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008f4:	4688      	mov	r8, r1
 80008f6:	4617      	mov	r7, r2
  //printled2(1, 10, LGREEN);
  int index;
  static char buf[CDCACM_PACKET_SIZE];
  static int buf_pos=0;
  /* For example, output string by UART */
  for(index=0; index<len; index++)
 80008f8:	2500      	movs	r5, #0
 80008fa:	42bd      	cmp	r5, r7
 80008fc:	da1e      	bge.n	800093c <cdcacm_write+0x4c>
    {
      buf[buf_pos]=ptr[index];
 80008fe:	4c11      	ldr	r4, [pc, #68]	; (8000944 <cdcacm_write+0x54>)
 8000900:	4e11      	ldr	r6, [pc, #68]	; (8000948 <cdcacm_write+0x58>)
 8000902:	6821      	ldr	r1, [r4, #0]
 8000904:	f818 3005 	ldrb.w	r3, [r8, r5]
 8000908:	5473      	strb	r3, [r6, r1]
      buf_pos+=1;
 800090a:	3101      	adds	r1, #1
      if (buf_pos == 1) {
 800090c:	2901      	cmp	r1, #1
  static int buf_pos=0;
  /* For example, output string by UART */
  for(index=0; index<len; index++)
    {
      buf[buf_pos]=ptr[index];
      buf_pos+=1;
 800090e:	6021      	str	r1, [r4, #0]
 8000910:	4630      	mov	r0, r6
      if (buf_pos == 1) {
 8000912:	d103      	bne.n	800091c <cdcacm_write+0x2c>
	//if (buf_pos == CDCACM_PACKET_SIZE/2) {
	cdcacm_write_now(buf, buf_pos);
 8000914:	f7ff ffdc 	bl	80008d0 <cdcacm_write_now>
	buf_pos=0;
 8000918:	2300      	movs	r3, #0
 800091a:	6023      	str	r3, [r4, #0]
      }	
      if (ptr[index] == '\n')
 800091c:	f818 3005 	ldrb.w	r3, [r8, r5]
 8000920:	2b0a      	cmp	r3, #10
 8000922:	d109      	bne.n	8000938 <cdcacm_write+0x48>
	{
	  buf[buf_pos]='\r';
 8000924:	6821      	ldr	r1, [r4, #0]
	  buf_pos+=1;
	  cdcacm_write_now(buf, buf_pos);
 8000926:	4808      	ldr	r0, [pc, #32]	; (8000948 <cdcacm_write+0x58>)
	cdcacm_write_now(buf, buf_pos);
	buf_pos=0;
      }	
      if (ptr[index] == '\n')
	{
	  buf[buf_pos]='\r';
 8000928:	230d      	movs	r3, #13
 800092a:	5473      	strb	r3, [r6, r1]
	  buf_pos+=1;
 800092c:	3101      	adds	r1, #1
 800092e:	6021      	str	r1, [r4, #0]
	  cdcacm_write_now(buf, buf_pos);
 8000930:	f7ff ffce 	bl	80008d0 <cdcacm_write_now>
	  buf_pos=0;
 8000934:	2300      	movs	r3, #0
 8000936:	6023      	str	r3, [r4, #0]
  //printled2(1, 10, LGREEN);
  int index;
  static char buf[CDCACM_PACKET_SIZE];
  static int buf_pos=0;
  /* For example, output string by UART */
  for(index=0; index<len; index++)
 8000938:	3501      	adds	r5, #1
 800093a:	e7de      	b.n	80008fa <cdcacm_write+0xa>
	  buf_pos=0;
	}
    }

  return len;
}
 800093c:	4638      	mov	r0, r7
 800093e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000942:	bf00      	nop
 8000944:	20008954 	.word	0x20008954
 8000948:	200089c0 	.word	0x200089c0

0800094c <cdcacm_read>:

long cdcacm_read(NOT_USED int fd, char *ptr, int len) {
 800094c:	b538      	push	{r3, r4, r5, lr}
 800094e:	460d      	mov	r5, r1
 8000950:	4614      	mov	r4, r2
  //printf("read len %d\n", len);
  while (cbuf_used(&cdc_cbuf_in) < len) {
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <cdcacm_read+0x20>)
 8000954:	f000 f880 	bl	8000a58 <cbuf_used>
 8000958:	42a0      	cmp	r0, r4
 800095a:	dbfa      	blt.n	8000952 <cdcacm_read+0x6>
  };
  return(cbuf_pop(&cdc_cbuf_in, ptr, len));
 800095c:	4629      	mov	r1, r5
 800095e:	4622      	mov	r2, r4
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <cdcacm_read+0x20>)
}
 8000962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

long cdcacm_read(NOT_USED int fd, char *ptr, int len) {
  //printf("read len %d\n", len);
  while (cbuf_used(&cdc_cbuf_in) < len) {
  };
  return(cbuf_pop(&cdc_cbuf_in, ptr, len));
 8000966:	f000 b887 	b.w	8000a78 <cbuf_pop>
 800096a:	bf00      	nop
 800096c:	200089a4 	.word	0x200089a4

08000970 <cdcacm_usb_init>:
  } else {
    return(-1);
  }
}

void cdcacm_usb_init(void) {
 8000970:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  //receive buffer setup
  if (cbuf_init(&cdc_cbuf_in, CDCACM_READ_BUF_SIZE) != 0) { //couldn't initialize buffer for usb
 8000972:	4823      	ldr	r0, [pc, #140]	; (8000a00 <cdcacm_usb_init+0x90>)
 8000974:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000978:	f000 f85a 	bl	8000a30 <cbuf_init>
 800097c:	b130      	cbz	r0, 800098c <cdcacm_usb_init+0x1c>
    while(1) {
      printled(5, LRED);
 800097e:	2005      	movs	r0, #5
 8000980:	4920      	ldr	r1, [pc, #128]	; (8000a04 <cdcacm_usb_init+0x94>)
 8000982:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000986:	f7ff fe37 	bl	80005f8 <printled>
 800098a:	e7f8      	b.n	800097e <cdcacm_usb_init+0xe>
#elif defined(STM32F3)
  volatile uint32_t *unique_id_p = (volatile uint32_t *)0x1FFFF7AC;
#else
  volatile uint32_t *unique_id_p = (volatile uint32_t *)0x1FFFF7E8;
#endif
  uint32_t unique_id = *unique_id_p +
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <cdcacm_usb_init+0x98>)
 800098e:	681a      	ldr	r2, [r3, #0]
                       *(unique_id_p + 1) +
 8000990:	685c      	ldr	r4, [r3, #4]
                       *(unique_id_p + 2);
 8000992:	3308      	adds	r3, #8
#elif defined(STM32F3)
  volatile uint32_t *unique_id_p = (volatile uint32_t *)0x1FFFF7AC;
#else
  volatile uint32_t *unique_id_p = (volatile uint32_t *)0x1FFFF7E8;
#endif
  uint32_t unique_id = *unique_id_p +
 8000994:	4414      	add	r4, r2
                       *(unique_id_p + 1) +
                       *(unique_id_p + 2);
 8000996:	681b      	ldr	r3, [r3, #0]
#elif defined(STM32F3)
  volatile uint32_t *unique_id_p = (volatile uint32_t *)0x1FFFF7AC;
#else
  volatile uint32_t *unique_id_p = (volatile uint32_t *)0x1FFFF7E8;
#endif
  uint32_t unique_id = *unique_id_p +
 8000998:	441c      	add	r4, r3
 800099a:	f06f 0103 	mvn.w	r1, #3
 800099e:	4341      	muls	r1, r0
 80009a0:	4a1a      	ldr	r2, [pc, #104]	; (8000a0c <cdcacm_usb_init+0x9c>)
                       *(unique_id_p + 2);
  int i;

  /* Fetch serial number from chip's unique ID */
  for(i = 0; i < 8; i++) {
    s[7-i] = ((unique_id >> (4*i)) & 0xF) + '0';
 80009a2:	fa24 f101 	lsr.w	r1, r4, r1
 80009a6:	1813      	adds	r3, r2, r0
 80009a8:	f001 010f 	and.w	r1, r1, #15
 80009ac:	3801      	subs	r0, #1
 80009ae:	3130      	adds	r1, #48	; 0x30
                       *(unique_id_p + 1) +
                       *(unique_id_p + 2);
  int i;

  /* Fetch serial number from chip's unique ID */
  for(i = 0; i < 8; i++) {
 80009b0:	f110 0f08 	cmn.w	r0, #8
    s[7-i] = ((unique_id >> (4*i)) & 0xF) + '0';
 80009b4:	71d9      	strb	r1, [r3, #7]
                       *(unique_id_p + 1) +
                       *(unique_id_p + 2);
  int i;

  /* Fetch serial number from chip's unique ID */
  for(i = 0; i < 8; i++) {
 80009b6:	d1f0      	bne.n	800099a <cdcacm_usb_init+0x2a>
 80009b8:	2300      	movs	r3, #0
    s[7-i] = ((unique_id >> (4*i)) & 0xF) + '0';
  }
  for(i = 0; i < 8; i++)
    if(s[i] > '9')
 80009ba:	5cd1      	ldrb	r1, [r2, r3]
 80009bc:	2939      	cmp	r1, #57	; 0x39
 80009be:	d902      	bls.n	80009c6 <cdcacm_usb_init+0x56>
      s[i] += 'A' - '9' - 1;
 80009c0:	4812      	ldr	r0, [pc, #72]	; (8000a0c <cdcacm_usb_init+0x9c>)
 80009c2:	3107      	adds	r1, #7
 80009c4:	5419      	strb	r1, [r3, r0]

  /* Fetch serial number from chip's unique ID */
  for(i = 0; i < 8; i++) {
    s[7-i] = ((unique_id >> (4*i)) & 0xF) + '0';
  }
  for(i = 0; i < 8; i++)
 80009c6:	3301      	adds	r3, #1
 80009c8:	2b08      	cmp	r3, #8
 80009ca:	d1f6      	bne.n	80009ba <cdcacm_usb_init+0x4a>
    if(s[i] > '9')
      s[i] += 'A' - '9' - 1;
  s[8] = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	7213      	strb	r3, [r2, #8]
    }
  }
  //usb setup
  get_dev_unique_id(serial_no);
#ifdef STM32F4
  usbdev = usbd_init(&otgfs_usb_driver, &dev, &config, usb_strings, sizeof(usb_strings)/sizeof(char *), usbd_control_buffer, sizeof(usbd_control_buffer));
 80009d0:	2303      	movs	r3, #3
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <cdcacm_usb_init+0xa0>)
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <cdcacm_usb_init+0xa4>)
 80009d8:	9301      	str	r3, [sp, #4]
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	9302      	str	r3, [sp, #8]
 80009de:	490e      	ldr	r1, [pc, #56]	; (8000a18 <cdcacm_usb_init+0xa8>)
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <cdcacm_usb_init+0xac>)
 80009e2:	480f      	ldr	r0, [pc, #60]	; (8000a20 <cdcacm_usb_init+0xb0>)
 80009e4:	4c0f      	ldr	r4, [pc, #60]	; (8000a24 <cdcacm_usb_init+0xb4>)
 80009e6:	f000 fd4f 	bl	8001488 <usbd_init>
#else
  usbdev = usbd_init(&stm32f103_usb_driver, &dev, &config, usb_strings, sizeof(usb_strings)/sizeof(char *), usbd_control_buffer, sizeof(usbd_control_buffer));
#endif
  usbd_register_set_config_callback(usbdev, cdcacm_set_config);
 80009ea:	490f      	ldr	r1, [pc, #60]	; (8000a28 <cdcacm_usb_init+0xb8>)
    }
  }
  //usb setup
  get_dev_unique_id(serial_no);
#ifdef STM32F4
  usbdev = usbd_init(&otgfs_usb_driver, &dev, &config, usb_strings, sizeof(usb_strings)/sizeof(char *), usbd_control_buffer, sizeof(usbd_control_buffer));
 80009ec:	6020      	str	r0, [r4, #0]
#else
  usbdev = usbd_init(&stm32f103_usb_driver, &dev, &config, usb_strings, sizeof(usb_strings)/sizeof(char *), usbd_control_buffer, sizeof(usbd_control_buffer));
#endif
  usbd_register_set_config_callback(usbdev, cdcacm_set_config);
 80009ee:	f000 ff45 	bl	800187c <usbd_register_set_config_callback>
  usbd_register_reset_callback(usbdev, cdcacm_reset);
 80009f2:	6820      	ldr	r0, [r4, #0]
 80009f4:	490d      	ldr	r1, [pc, #52]	; (8000a2c <cdcacm_usb_init+0xbc>)
}
 80009f6:	b004      	add	sp, #16
 80009f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usbdev = usbd_init(&otgfs_usb_driver, &dev, &config, usb_strings, sizeof(usb_strings)/sizeof(char *), usbd_control_buffer, sizeof(usbd_control_buffer));
#else
  usbdev = usbd_init(&stm32f103_usb_driver, &dev, &config, usb_strings, sizeof(usb_strings)/sizeof(char *), usbd_control_buffer, sizeof(usbd_control_buffer));
#endif
  usbd_register_set_config_callback(usbdev, cdcacm_set_config);
  usbd_register_reset_callback(usbdev, cdcacm_reset);
 80009fc:	f000 bd66 	b.w	80014cc <usbd_register_reset_callback>
 8000a00:	200089a4 	.word	0x200089a4
 8000a04:	40020c00 	.word	0x40020c00
 8000a08:	1fff7a10 	.word	0x1fff7a10
 8000a0c:	20008998 	.word	0x20008998
 8000a10:	200088d4 	.word	0x200088d4
 8000a14:	08007c30 	.word	0x08007c30
 8000a18:	08007c10 	.word	0x08007c10
 8000a1c:	20000010 	.word	0x20000010
 8000a20:	08007d64 	.word	0x08007d64
 8000a24:	200088d0 	.word	0x200088d0
 8000a28:	0800080d 	.word	0x0800080d
 8000a2c:	08000809 	.word	0x08000809

08000a30 <cbuf_init>:
#include <libopencm3-plus/utils/data_structs.h>
#include <libopencm3-plus/stm32f4discovery/leds.h>

//Circular buffer:
//**********
int cbuf_init(cbuf_t* cbuf, int size) {
 8000a30:	b570      	push	{r4, r5, r6, lr}
  cbuf->size=0;
 8000a32:	2500      	movs	r5, #0
#include <libopencm3-plus/utils/data_structs.h>
#include <libopencm3-plus/stm32f4discovery/leds.h>

//Circular buffer:
//**********
int cbuf_init(cbuf_t* cbuf, int size) {
 8000a34:	4604      	mov	r4, r0
  cbuf->size=0;
 8000a36:	6045      	str	r5, [r0, #4]
  cbuf->first_pos=0;
 8000a38:	6085      	str	r5, [r0, #8]
  cbuf->last_pos=0;
 8000a3a:	60c5      	str	r5, [r0, #12]
  cbuf->wmut=0;
 8000a3c:	6105      	str	r5, [r0, #16]
  cbuf->rmut=0;
 8000a3e:	6145      	str	r5, [r0, #20]
  cbuf->buf=malloc(sizeof(char)*size);
 8000a40:	4608      	mov	r0, r1
#include <libopencm3-plus/utils/data_structs.h>
#include <libopencm3-plus/stm32f4discovery/leds.h>

//Circular buffer:
//**********
int cbuf_init(cbuf_t* cbuf, int size) {
 8000a42:	460e      	mov	r6, r1
  cbuf->size=0;
  cbuf->first_pos=0;
  cbuf->last_pos=0;
  cbuf->wmut=0;
  cbuf->rmut=0;
  cbuf->buf=malloc(sizeof(char)*size);
 8000a44:	f001 fc32 	bl	80022ac <malloc>
 8000a48:	6020      	str	r0, [r4, #0]
  if (cbuf->buf == NULL) {
 8000a4a:	b110      	cbz	r0, 8000a52 <cbuf_init+0x22>
    return(-1);
  } else {
    cbuf->size=size;
 8000a4c:	6066      	str	r6, [r4, #4]
    return(0);
 8000a4e:	4628      	mov	r0, r5
 8000a50:	bd70      	pop	{r4, r5, r6, pc}
  cbuf->last_pos=0;
  cbuf->wmut=0;
  cbuf->rmut=0;
  cbuf->buf=malloc(sizeof(char)*size);
  if (cbuf->buf == NULL) {
    return(-1);
 8000a52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  } else {
    cbuf->size=size;
    return(0);
  }
}
 8000a56:	bd70      	pop	{r4, r5, r6, pc}

08000a58 <cbuf_used>:
  cbuf->rmut=0;
  cbuf->buf=NULL;
}

int cbuf_used(cbuf_t* cbuf) {
  if (cbuf->last_pos >= cbuf->first_pos) {
 8000a58:	68c2      	ldr	r2, [r0, #12]
 8000a5a:	6883      	ldr	r3, [r0, #8]
 8000a5c:	429a      	cmp	r2, r3
    return(cbuf->last_pos-cbuf->first_pos);
  } else {
    return(cbuf->last_pos+cbuf->size-cbuf->first_pos);
 8000a5e:	bfbc      	itt	lt
 8000a60:	6840      	ldrlt	r0, [r0, #4]
 8000a62:	1812      	addlt	r2, r2, r0
 8000a64:	1ad0      	subs	r0, r2, r3
  }
}
 8000a66:	4770      	bx	lr

08000a68 <cbuf_free>:

int cbuf_free(cbuf_t* cbuf) {
 8000a68:	b510      	push	{r4, lr}
 8000a6a:	4604      	mov	r4, r0
  return(cbuf->size-cbuf_used(cbuf));
 8000a6c:	f7ff fff4 	bl	8000a58 <cbuf_used>
 8000a70:	6863      	ldr	r3, [r4, #4]
}
 8000a72:	1a18      	subs	r0, r3, r0
 8000a74:	bd10      	pop	{r4, pc}
	...

08000a78 <cbuf_pop>:

int cbuf_pop(cbuf_t* cbuf, char *out, int out_len){
 8000a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	460e      	mov	r6, r1
  int i=0;
  gpio_toggle(LBLUE);
 8000a7e:	4812      	ldr	r0, [pc, #72]	; (8000ac8 <cbuf_pop+0x50>)
 8000a80:	f44f 4100 	mov.w	r1, #32768	; 0x8000

int cbuf_free(cbuf_t* cbuf) {
  return(cbuf->size-cbuf_used(cbuf));
}

int cbuf_pop(cbuf_t* cbuf, char *out, int out_len){
 8000a84:	4617      	mov	r7, r2
  int i=0;
  gpio_toggle(LBLUE);
 8000a86:	f000 f9ea 	bl	8000e5e <gpio_toggle>
  LOCK(cbuf->rmut);
 8000a8a:	b672      	cpsid	i
 8000a8c:	6960      	ldr	r0, [r4, #20]
 8000a8e:	b9b8      	cbnz	r0, 8000ac0 <cbuf_pop+0x48>
 8000a90:	2301      	movs	r3, #1
 8000a92:	6163      	str	r3, [r4, #20]
  for (i=0; i<out_len; i++) {
 8000a94:	42b8      	cmp	r0, r7
 8000a96:	da03      	bge.n	8000aa0 <cbuf_pop+0x28>
    if (cbuf->first_pos == cbuf->last_pos) { //empty
 8000a98:	68a3      	ldr	r3, [r4, #8]
 8000a9a:	68e5      	ldr	r5, [r4, #12]
 8000a9c:	42ab      	cmp	r3, r5
 8000a9e:	d102      	bne.n	8000aa6 <cbuf_pop+0x2e>
    cbuf->first_pos++;
    if (cbuf->first_pos == cbuf->size) {
      cbuf->first_pos=0;
    }
  }
  UNLOCK(cbuf->rmut);
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	6163      	str	r3, [r4, #20]
 8000aa4:	e00d      	b.n	8000ac2 <cbuf_pop+0x4a>
  LOCK(cbuf->rmut);
  for (i=0; i<out_len; i++) {
    if (cbuf->first_pos == cbuf->last_pos) { //empty
      break;
    }
    out[i]=cbuf->buf[cbuf->first_pos];
 8000aa6:	6825      	ldr	r5, [r4, #0]
 8000aa8:	5ceb      	ldrb	r3, [r5, r3]
 8000aaa:	5433      	strb	r3, [r6, r0]
    cbuf->first_pos++;
 8000aac:	68a3      	ldr	r3, [r4, #8]
    if (cbuf->first_pos == cbuf->size) {
 8000aae:	6865      	ldr	r5, [r4, #4]
  for (i=0; i<out_len; i++) {
    if (cbuf->first_pos == cbuf->last_pos) { //empty
      break;
    }
    out[i]=cbuf->buf[cbuf->first_pos];
    cbuf->first_pos++;
 8000ab0:	3301      	adds	r3, #1
    if (cbuf->first_pos == cbuf->size) {
 8000ab2:	42ab      	cmp	r3, r5
  for (i=0; i<out_len; i++) {
    if (cbuf->first_pos == cbuf->last_pos) { //empty
      break;
    }
    out[i]=cbuf->buf[cbuf->first_pos];
    cbuf->first_pos++;
 8000ab4:	60a3      	str	r3, [r4, #8]
    if (cbuf->first_pos == cbuf->size) {
      cbuf->first_pos=0;
 8000ab6:	bf04      	itt	eq
 8000ab8:	2300      	moveq	r3, #0
 8000aba:	60a3      	streq	r3, [r4, #8]

int cbuf_pop(cbuf_t* cbuf, char *out, int out_len){
  int i=0;
  gpio_toggle(LBLUE);
  LOCK(cbuf->rmut);
  for (i=0; i<out_len; i++) {
 8000abc:	3001      	adds	r0, #1
 8000abe:	e7e9      	b.n	8000a94 <cbuf_pop+0x1c>
int cbuf_free(cbuf_t* cbuf) {
  return(cbuf->size-cbuf_used(cbuf));
}

int cbuf_pop(cbuf_t* cbuf, char *out, int out_len){
  int i=0;
 8000ac0:	2000      	movs	r0, #0
    cbuf->first_pos++;
    if (cbuf->first_pos == cbuf->size) {
      cbuf->first_pos=0;
    }
  }
  UNLOCK(cbuf->rmut);
 8000ac2:	b662      	cpsie	i
  return(i);
}
 8000ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40020c00 	.word	0x40020c00

08000acc <cbuf_append>:

int cbuf_append(cbuf_t* cbuf, char *in,  int in_size) {
 8000acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ace:	4604      	mov	r4, r0
 8000ad0:	460f      	mov	r7, r1
  int i=0;
  gpio_toggle(LORANGE);
 8000ad2:	4814      	ldr	r0, [pc, #80]	; (8000b24 <cbuf_append+0x58>)
 8000ad4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  }
  UNLOCK(cbuf->rmut);
  return(i);
}

int cbuf_append(cbuf_t* cbuf, char *in,  int in_size) {
 8000ad8:	4615      	mov	r5, r2
  int i=0;
  gpio_toggle(LORANGE);
 8000ada:	f000 f9c0 	bl	8000e5e <gpio_toggle>
  LOCK(cbuf->wmut);
 8000ade:	b672      	cpsid	i
 8000ae0:	6926      	ldr	r6, [r4, #16]
 8000ae2:	b9e6      	cbnz	r6, 8000b1e <cbuf_append+0x52>
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	6123      	str	r3, [r4, #16]
  if (cbuf_free(cbuf) > in_size) {
 8000ae8:	4620      	mov	r0, r4
 8000aea:	f7ff ffbd 	bl	8000a68 <cbuf_free>
 8000aee:	42a8      	cmp	r0, r5
 8000af0:	4630      	mov	r0, r6
 8000af2:	dd11      	ble.n	8000b18 <cbuf_append+0x4c>
    for (i=0; i<in_size; i++) {
 8000af4:	42a8      	cmp	r0, r5
 8000af6:	da0d      	bge.n	8000b14 <cbuf_append+0x48>
      cbuf->buf[cbuf->last_pos]=in[i];
 8000af8:	5c39      	ldrb	r1, [r7, r0]
 8000afa:	68e3      	ldr	r3, [r4, #12]
 8000afc:	6822      	ldr	r2, [r4, #0]
 8000afe:	54d1      	strb	r1, [r2, r3]
      cbuf->last_pos++;
 8000b00:	68e3      	ldr	r3, [r4, #12]
      if (cbuf->last_pos == cbuf->size) {
 8000b02:	6862      	ldr	r2, [r4, #4]
  gpio_toggle(LORANGE);
  LOCK(cbuf->wmut);
  if (cbuf_free(cbuf) > in_size) {
    for (i=0; i<in_size; i++) {
      cbuf->buf[cbuf->last_pos]=in[i];
      cbuf->last_pos++;
 8000b04:	3301      	adds	r3, #1
      if (cbuf->last_pos == cbuf->size) {
 8000b06:	4293      	cmp	r3, r2
  gpio_toggle(LORANGE);
  LOCK(cbuf->wmut);
  if (cbuf_free(cbuf) > in_size) {
    for (i=0; i<in_size; i++) {
      cbuf->buf[cbuf->last_pos]=in[i];
      cbuf->last_pos++;
 8000b08:	60e3      	str	r3, [r4, #12]
      if (cbuf->last_pos == cbuf->size) {
	cbuf->last_pos=0;
 8000b0a:	bf04      	itt	eq
 8000b0c:	2300      	moveq	r3, #0
 8000b0e:	60e3      	streq	r3, [r4, #12]
int cbuf_append(cbuf_t* cbuf, char *in,  int in_size) {
  int i=0;
  gpio_toggle(LORANGE);
  LOCK(cbuf->wmut);
  if (cbuf_free(cbuf) > in_size) {
    for (i=0; i<in_size; i++) {
 8000b10:	3001      	adds	r0, #1
 8000b12:	e7ef      	b.n	8000af4 <cbuf_append+0x28>
 8000b14:	ea25 70e5 	bic.w	r0, r5, r5, asr #31
      if (cbuf->last_pos == cbuf->size) {
	cbuf->last_pos=0;
      }
    }
  }
  UNLOCK(cbuf->wmut);
 8000b18:	2300      	movs	r3, #0
 8000b1a:	6123      	str	r3, [r4, #16]
 8000b1c:	e000      	b.n	8000b20 <cbuf_append+0x54>
  UNLOCK(cbuf->rmut);
  return(i);
}

int cbuf_append(cbuf_t* cbuf, char *in,  int in_size) {
  int i=0;
 8000b1e:	2000      	movs	r0, #0
      if (cbuf->last_pos == cbuf->size) {
	cbuf->last_pos=0;
      }
    }
  }
  UNLOCK(cbuf->wmut);
 8000b20:	b662      	cpsie	i
  return(i);
}
 8000b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b24:	40020c00 	.word	0x40020c00

08000b28 <adc_disable_scan_mode>:
@param[in] adc Unsigned int32. ADC block register address base @ref adc_reg_base
*/

void adc_disable_scan_mode(uint32_t adc)
{
	ADC_CR1(adc) &= ~ADC_CR1_SCAN;
 8000b28:	6843      	ldr	r3, [r0, #4]
 8000b2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b2e:	6043      	str	r3, [r0, #4]
 8000b30:	4770      	bx	lr

08000b32 <adc_start_conversion_regular>:
*/

void adc_start_conversion_regular(uint32_t adc)
{
	/* Start conversion on regular channels. */
	ADC_CR2(adc) |= ADC_CR2_SWSTART;
 8000b32:	6883      	ldr	r3, [r0, #8]
 8000b34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000b38:	f100 0208 	add.w	r2, r0, #8
 8000b3c:	6083      	str	r3, [r0, #8]

	/* Wait until the ADC starts the conversion. */
	while (ADC_CR2(adc) & ADC_CR2_SWSTART);
 8000b3e:	6813      	ldr	r3, [r2, #0]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	d4fc      	bmi.n	8000b3e <adc_start_conversion_regular+0xc>
}
 8000b44:	4770      	bx	lr

08000b46 <adc_set_single_conversion_mode>:
@param[in] adc Unsigned int32. ADC block register address base @ref adc_reg_base
*/

void adc_set_single_conversion_mode(uint32_t adc)
{
	ADC_CR2(adc) &= ~ADC_CR2_CONT;
 8000b46:	6883      	ldr	r3, [r0, #8]
 8000b48:	f023 0302 	bic.w	r3, r3, #2
 8000b4c:	6083      	str	r3, [r0, #8]
 8000b4e:	4770      	bx	lr

08000b50 <adc_set_sample_time>:

void adc_set_sample_time(uint32_t adc, uint8_t channel, uint8_t time)
{
	uint32_t reg32;

	if (channel < 10) {
 8000b50:	2909      	cmp	r1, #9
adc_channel
@param[in] time Unsigned int8. Sampling time selection from @ref adc_sample_rg
*/

void adc_set_sample_time(uint32_t adc, uint8_t channel, uint8_t time)
{
 8000b52:	b510      	push	{r4, lr}
	uint32_t reg32;

	if (channel < 10) {
 8000b54:	d80b      	bhi.n	8000b6e <adc_set_sample_time+0x1e>
		reg32 = ADC_SMPR2(adc);
 8000b56:	6904      	ldr	r4, [r0, #16]
		reg32 &= ~(0x7 << (channel * 3));
 8000b58:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000b5c:	2307      	movs	r3, #7
 8000b5e:	408b      	lsls	r3, r1
 8000b60:	ea24 0303 	bic.w	r3, r4, r3
		reg32 |= (time << (channel * 3));
 8000b64:	fa02 f101 	lsl.w	r1, r2, r1
 8000b68:	4319      	orrs	r1, r3
		ADC_SMPR2(adc) = reg32;
 8000b6a:	6101      	str	r1, [r0, #16]
 8000b6c:	bd10      	pop	{r4, pc}
	} else {
		reg32 = ADC_SMPR1(adc);
		reg32 &= ~(0x7 << ((channel - 10) * 3));
 8000b6e:	2303      	movs	r3, #3
 8000b70:	390a      	subs	r1, #10
 8000b72:	4359      	muls	r1, r3
		reg32 = ADC_SMPR2(adc);
		reg32 &= ~(0x7 << (channel * 3));
		reg32 |= (time << (channel * 3));
		ADC_SMPR2(adc) = reg32;
	} else {
		reg32 = ADC_SMPR1(adc);
 8000b74:	68c4      	ldr	r4, [r0, #12]
		reg32 &= ~(0x7 << ((channel - 10) * 3));
 8000b76:	2307      	movs	r3, #7
 8000b78:	408b      	lsls	r3, r1
 8000b7a:	ea24 0303 	bic.w	r3, r4, r3
		reg32 |= (time << ((channel - 10) * 3));
 8000b7e:	408a      	lsls	r2, r1
 8000b80:	ea43 0102 	orr.w	r1, r3, r2
		ADC_SMPR1(adc) = reg32;
 8000b84:	60c1      	str	r1, [r0, #12]
 8000b86:	bd10      	pop	{r4, pc}

08000b88 <adc_set_regular_sequence>:
{
	uint32_t reg32_1 = 0, reg32_2 = 0, reg32_3 = 0;
	uint8_t i = 0;

	/* Maximum sequence length is 16 channels. */
	if (length > 16) {
 8000b88:	2910      	cmp	r1, #16
@param[in] length Unsigned int8. Number of channels in the group.
@param[in] channel Unsigned int8[]. Set of channels in sequence, integers 0..18.
*/

void adc_set_regular_sequence(uint32_t adc, uint8_t length, uint8_t channel[])
{
 8000b8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reg32_1 = 0, reg32_2 = 0, reg32_3 = 0;
	uint8_t i = 0;

	/* Maximum sequence length is 16 channels. */
	if (length > 16) {
 8000b8e:	d83b      	bhi.n	8000c08 <adc_set_regular_sequence+0x80>
 8000b90:	2300      	movs	r3, #0
 8000b92:	f06f 053b 	mvn.w	r5, #59	; 0x3b
 8000b96:	2401      	movs	r4, #1
 8000b98:	461e      	mov	r6, r3
 8000b9a:	461f      	mov	r7, r3
 8000b9c:	469c      	mov	ip, r3
		return;
	}

	for (i = 1; i <= length; i++) {
 8000b9e:	428c      	cmp	r4, r1
 8000ba0:	d82c      	bhi.n	8000bfc <adc_set_regular_sequence+0x74>
		if (i <= 6) {
 8000ba2:	2c06      	cmp	r4, #6
 8000ba4:	d809      	bhi.n	8000bba <adc_set_regular_sequence+0x32>
			reg32_3 |= (channel[i - 1] << ((i - 1) * 5));
 8000ba6:	f812 9003 	ldrb.w	r9, [r2, r3]
 8000baa:	f04f 0805 	mov.w	r8, #5
 8000bae:	fb08 f803 	mul.w	r8, r8, r3
 8000bb2:	fa09 f808 	lsl.w	r8, r9, r8
 8000bb6:	ea46 0608 	orr.w	r6, r6, r8
 8000bba:	f1a4 0807 	sub.w	r8, r4, #7
		}
		if ((i > 6) & (i <= 12)) {
 8000bbe:	fa5f f888 	uxtb.w	r8, r8
 8000bc2:	f1b8 0f05 	cmp.w	r8, #5
 8000bc6:	d807      	bhi.n	8000bd8 <adc_set_regular_sequence+0x50>
			reg32_2 |= (channel[i - 1] << ((i - 6 - 1) * 5));
 8000bc8:	f812 9003 	ldrb.w	r9, [r2, r3]
 8000bcc:	f105 081e 	add.w	r8, r5, #30
 8000bd0:	fa09 f808 	lsl.w	r8, r9, r8
 8000bd4:	ea47 0708 	orr.w	r7, r7, r8
 8000bd8:	f1a4 080d 	sub.w	r8, r4, #13
		}
		if ((i > 12) & (i <= 16)) {
 8000bdc:	fa5f f888 	uxtb.w	r8, r8
 8000be0:	f1b8 0f03 	cmp.w	r8, #3
 8000be4:	d805      	bhi.n	8000bf2 <adc_set_regular_sequence+0x6a>
			reg32_1 |= (channel[i - 1] << ((i - 12 - 1) * 5));
 8000be6:	f812 8003 	ldrb.w	r8, [r2, r3]
 8000bea:	fa08 f805 	lsl.w	r8, r8, r5
 8000bee:	ea4c 0c08 	orr.w	ip, ip, r8
	/* Maximum sequence length is 16 channels. */
	if (length > 16) {
		return;
	}

	for (i = 1; i <= length; i++) {
 8000bf2:	3401      	adds	r4, #1
 8000bf4:	b2e4      	uxtb	r4, r4
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	3505      	adds	r5, #5
 8000bfa:	e7d0      	b.n	8000b9e <adc_set_regular_sequence+0x16>
		}
		if ((i > 12) & (i <= 16)) {
			reg32_1 |= (channel[i - 1] << ((i - 12 - 1) * 5));
		}
	}
	reg32_1 |= ((length - 1) << ADC_SQR1_L_LSB);
 8000bfc:	3901      	subs	r1, #1
 8000bfe:	ea4c 5101 	orr.w	r1, ip, r1, lsl #20

	ADC_SQR1(adc) = reg32_1;
 8000c02:	62c1      	str	r1, [r0, #44]	; 0x2c
	ADC_SQR2(adc) = reg32_2;
 8000c04:	6307      	str	r7, [r0, #48]	; 0x30
	ADC_SQR3(adc) = reg32_3;
 8000c06:	6346      	str	r6, [r0, #52]	; 0x34
 8000c08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c0c <adc_eoc>:
@returns bool. End of conversion flag.
*/

bool adc_eoc(uint32_t adc)
{
	return (ADC_SR(adc) & ADC_SR_EOC) != 0;
 8000c0c:	6800      	ldr	r0, [r0, #0]
}
 8000c0e:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8000c12:	4770      	bx	lr

08000c14 <adc_read_regular>:
@returns Unsigned int32 conversion result.
*/

uint32_t adc_read_regular(uint32_t adc)
{
	return ADC_DR(adc);
 8000c14:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
 8000c16:	4770      	bx	lr

08000c18 <adc_power_on>:
@param[in] adc Unsigned int32. ADC block register address base @ref adc_reg_base
*/

void adc_power_on(uint32_t adc)
{
	ADC_CR2(adc) |= ADC_CR2_ADON;
 8000c18:	6883      	ldr	r3, [r0, #8]
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6083      	str	r3, [r0, #8]
 8000c20:	4770      	bx	lr
	...

08000c24 <adc_set_clk_prescale>:
adc_ccr_adcpre
*/

void adc_set_clk_prescale(uint32_t prescale)
{
	uint32_t reg32 = ((ADC_CCR & ~ADC_CCR_ADCPRE_MASK) | prescale);
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <adc_set_clk_prescale+0x10>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000c2c:	4310      	orrs	r0, r2
	ADC_CCR = reg32;
 8000c2e:	6018      	str	r0, [r3, #0]
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40012304 	.word	0x40012304

08000c38 <adc_set_multi_mode>:
@param[in] mode Unsigned int32. Multiple mode selection from @ref adc_multi_mode
*/

void adc_set_multi_mode(uint32_t mode)
{
	ADC_CCR |= mode;
 8000c38:	4b02      	ldr	r3, [pc, #8]	; (8000c44 <adc_set_multi_mode+0xc>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4310      	orrs	r0, r2
 8000c3e:	6018      	str	r0, [r3, #0]
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40012304 	.word	0x40012304

08000c48 <rcc_wait_for_osc_ready>:
	return ((RCC_CIR & RCC_CIR_CSSF) != 0);
}

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
	switch (osc) {
 8000c48:	2804      	cmp	r0, #4
 8000c4a:	d81c      	bhi.n	8000c86 <rcc_wait_for_osc_ready+0x3e>
 8000c4c:	e8df f000 	tbb	[pc, r0]
 8000c50:	120d0803 	.word	0x120d0803
 8000c54:	17          	.byte	0x17
 8000c55:	00          	.byte	0x00
	case PLL:
		while ((RCC_CR & RCC_CR_PLLRDY) == 0);
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <rcc_wait_for_osc_ready+0x40>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	019b      	lsls	r3, r3, #6
 8000c5c:	d5fb      	bpl.n	8000c56 <rcc_wait_for_osc_ready+0xe>
 8000c5e:	4770      	bx	lr
		break;
	case HSE:
		while ((RCC_CR & RCC_CR_HSERDY) == 0);
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <rcc_wait_for_osc_ready+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	0398      	lsls	r0, r3, #14
 8000c66:	d5fb      	bpl.n	8000c60 <rcc_wait_for_osc_ready+0x18>
 8000c68:	4770      	bx	lr
		break;
	case HSI:
		while ((RCC_CR & RCC_CR_HSIRDY) == 0);
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <rcc_wait_for_osc_ready+0x40>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	0799      	lsls	r1, r3, #30
 8000c70:	d5fb      	bpl.n	8000c6a <rcc_wait_for_osc_ready+0x22>
 8000c72:	4770      	bx	lr
		break;
	case LSE:
		while ((RCC_BDCR & RCC_BDCR_LSERDY) == 0);
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <rcc_wait_for_osc_ready+0x44>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	079a      	lsls	r2, r3, #30
 8000c7a:	d5fb      	bpl.n	8000c74 <rcc_wait_for_osc_ready+0x2c>
 8000c7c:	4770      	bx	lr
		break;
	case LSI:
		while ((RCC_CSR & RCC_CSR_LSIRDY) == 0);
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <rcc_wait_for_osc_ready+0x48>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	079b      	lsls	r3, r3, #30
 8000c84:	d5fb      	bpl.n	8000c7e <rcc_wait_for_osc_ready+0x36>
 8000c86:	4770      	bx	lr
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40023870 	.word	0x40023870
 8000c90:	40023874 	.word	0x40023874

08000c94 <rcc_wait_for_sysclk_status>:
	}
}

void rcc_wait_for_sysclk_status(enum rcc_osc osc)
{
	switch (osc) {
 8000c94:	2801      	cmp	r0, #1
 8000c96:	d00a      	beq.n	8000cae <rcc_wait_for_sysclk_status+0x1a>
 8000c98:	d302      	bcc.n	8000ca0 <rcc_wait_for_sysclk_status+0xc>
 8000c9a:	2802      	cmp	r0, #2
 8000c9c:	d00e      	beq.n	8000cbc <rcc_wait_for_sysclk_status+0x28>
 8000c9e:	4770      	bx	lr
	case PLL:
		while ((RCC_CFGR & ((1 << 1) | (1 << 0))) != RCC_CFGR_SWS_PLL);
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <rcc_wait_for_sysclk_status+0x34>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 0303 	and.w	r3, r3, #3
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d1f9      	bne.n	8000ca0 <rcc_wait_for_sysclk_status+0xc>
 8000cac:	4770      	bx	lr
		break;
	case HSE:
		while ((RCC_CFGR & ((1 << 1) | (1 << 0))) != RCC_CFGR_SWS_HSE);
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <rcc_wait_for_sysclk_status+0x34>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d1f9      	bne.n	8000cae <rcc_wait_for_sysclk_status+0x1a>
 8000cba:	4770      	bx	lr
		break;
	case HSI:
		while ((RCC_CFGR & ((1 << 1) | (1 << 0))) != RCC_CFGR_SWS_HSI);
 8000cbc:	4b02      	ldr	r3, [pc, #8]	; (8000cc8 <rcc_wait_for_sysclk_status+0x34>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	079a      	lsls	r2, r3, #30
 8000cc2:	d1fb      	bne.n	8000cbc <rcc_wait_for_sysclk_status+0x28>
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40023808 	.word	0x40023808

08000ccc <rcc_osc_on>:
	}
}

void rcc_osc_on(enum rcc_osc osc)
{
	switch (osc) {
 8000ccc:	2804      	cmp	r0, #4
 8000cce:	d817      	bhi.n	8000d00 <rcc_osc_on+0x34>
 8000cd0:	e8df f000 	tbb	[pc, r0]
 8000cd4:	0f0d0803 	.word	0x0f0d0803
 8000cd8:	11          	.byte	0x11
 8000cd9:	00          	.byte	0x00
	case PLL:
		RCC_CR |= RCC_CR_PLLON;
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <rcc_osc_on+0x38>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000ce2:	e00c      	b.n	8000cfe <rcc_osc_on+0x32>
		break;
	case HSE:
		RCC_CR |= RCC_CR_HSEON;
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <rcc_osc_on+0x38>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000cec:	e007      	b.n	8000cfe <rcc_osc_on+0x32>
		break;
	case HSI:
		RCC_CR |= RCC_CR_HSION;
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <rcc_osc_on+0x38>)
 8000cf0:	e002      	b.n	8000cf8 <rcc_osc_on+0x2c>
		break;
	case LSE:
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <rcc_osc_on+0x3c>)
 8000cf4:	e000      	b.n	8000cf8 <rcc_osc_on+0x2c>
		break;
	case LSI:
		RCC_CSR |= RCC_CSR_LSION;
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <rcc_osc_on+0x40>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	f042 0201 	orr.w	r2, r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40023870 	.word	0x40023870
 8000d0c:	40023874 	.word	0x40023874

08000d10 <rcc_osc_off>:
	}
}

void rcc_osc_off(enum rcc_osc osc)
{
	switch (osc) {
 8000d10:	2804      	cmp	r0, #4
 8000d12:	d817      	bhi.n	8000d44 <rcc_osc_off+0x34>
 8000d14:	e8df f000 	tbb	[pc, r0]
 8000d18:	0f0d0803 	.word	0x0f0d0803
 8000d1c:	11          	.byte	0x11
 8000d1d:	00          	.byte	0x00
	case PLL:
		RCC_CR &= ~RCC_CR_PLLON;
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <rcc_osc_off+0x38>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8000d26:	e00c      	b.n	8000d42 <rcc_osc_off+0x32>
		break;
	case HSE:
		RCC_CR &= ~RCC_CR_HSEON;
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <rcc_osc_off+0x38>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d30:	e007      	b.n	8000d42 <rcc_osc_off+0x32>
		break;
	case HSI:
		RCC_CR &= ~RCC_CR_HSION;
 8000d32:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <rcc_osc_off+0x38>)
 8000d34:	e002      	b.n	8000d3c <rcc_osc_off+0x2c>
		break;
	case LSE:
		RCC_BDCR &= ~RCC_BDCR_LSEON;
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <rcc_osc_off+0x3c>)
 8000d38:	e000      	b.n	8000d3c <rcc_osc_off+0x2c>
		break;
	case LSI:
		RCC_CSR &= ~RCC_CSR_LSION;
 8000d3a:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <rcc_osc_off+0x40>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	f022 0201 	bic.w	r2, r2, #1
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40023870 	.word	0x40023870
 8000d50:	40023874 	.word	0x40023874

08000d54 <rcc_set_sysclk_source>:

void rcc_set_sysclk_source(uint32_t clk)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <rcc_set_sysclk_source+0x10>)
 8000d56:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 1) | (1 << 0));
 8000d58:	f022 0203 	bic.w	r2, r2, #3
	RCC_CFGR = (reg32 | clk);
 8000d5c:	4310      	orrs	r0, r2
 8000d5e:	6018      	str	r0, [r3, #0]
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40023808 	.word	0x40023808

08000d68 <rcc_set_ppre2>:

void rcc_set_ppre2(uint32_t ppre2)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <rcc_set_ppre2+0x10>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 13) | (1 << 14) | (1 << 15));
 8000d6c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
	RCC_CFGR = (reg32 | (ppre2 << 13));
 8000d70:	ea42 3040 	orr.w	r0, r2, r0, lsl #13
 8000d74:	6018      	str	r0, [r3, #0]
 8000d76:	4770      	bx	lr
 8000d78:	40023808 	.word	0x40023808

08000d7c <rcc_set_ppre1>:

void rcc_set_ppre1(uint32_t ppre1)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <rcc_set_ppre1+0x10>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 10) | (1 << 11) | (1 << 12));
 8000d80:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
	RCC_CFGR = (reg32 | (ppre1 << 10));
 8000d84:	ea42 2080 	orr.w	r0, r2, r0, lsl #10
 8000d88:	6018      	str	r0, [r3, #0]
 8000d8a:	4770      	bx	lr
 8000d8c:	40023808 	.word	0x40023808

08000d90 <rcc_set_hpre>:

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg32;

	reg32 = RCC_CFGR;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <rcc_set_hpre+0x10>)
 8000d92:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 4) | (1 << 5) | (1 << 6) | (1 << 7));
 8000d94:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
	RCC_CFGR = (reg32 | (hpre << 4));
 8000d98:	ea42 1000 	orr.w	r0, r2, r0, lsl #4
 8000d9c:	6018      	str	r0, [r3, #0]
 8000d9e:	4770      	bx	lr
 8000da0:	40023808 	.word	0x40023808

08000da4 <rcc_set_main_pll_hse>:
}

void rcc_set_main_pll_hse(uint32_t pllm, uint32_t plln, uint32_t pllp,
			  uint32_t pllq)
{
	RCC_PLLCFGR = (pllm << RCC_PLLCFGR_PLLM_SHIFT) |
 8000da4:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
		(plln << RCC_PLLCFGR_PLLN_SHIFT) |
 8000da8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
		(((pllp >> 1) - 1) << RCC_PLLCFGR_PLLP_SHIFT) |
 8000dac:	0852      	lsrs	r2, r2, #1
		RCC_PLLCFGR_PLLSRC |
 8000dae:	ea43 1181 	orr.w	r1, r3, r1, lsl #6
void rcc_set_main_pll_hse(uint32_t pllm, uint32_t plln, uint32_t pllp,
			  uint32_t pllq)
{
	RCC_PLLCFGR = (pllm << RCC_PLLCFGR_PLLM_SHIFT) |
		(plln << RCC_PLLCFGR_PLLN_SHIFT) |
		(((pllp >> 1) - 1) << RCC_PLLCFGR_PLLP_SHIFT) |
 8000db2:	1e53      	subs	r3, r2, #1
}

void rcc_set_main_pll_hse(uint32_t pllm, uint32_t plln, uint32_t pllp,
			  uint32_t pllq)
{
	RCC_PLLCFGR = (pllm << RCC_PLLCFGR_PLLM_SHIFT) |
 8000db4:	4a02      	ldr	r2, [pc, #8]	; (8000dc0 <rcc_set_main_pll_hse+0x1c>)
		(plln << RCC_PLLCFGR_PLLN_SHIFT) |
		(((pllp >> 1) - 1) << RCC_PLLCFGR_PLLP_SHIFT) |
		RCC_PLLCFGR_PLLSRC |
 8000db6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
}

void rcc_set_main_pll_hse(uint32_t pllm, uint32_t plln, uint32_t pllp,
			  uint32_t pllq)
{
	RCC_PLLCFGR = (pllm << RCC_PLLCFGR_PLLM_SHIFT) |
 8000dba:	6011      	str	r1, [r2, #0]
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40023804 	.word	0x40023804

08000dc4 <rcc_clock_setup_hse_3v3>:
	/* Return the clock source which is used as system clock. */
	return (RCC_CFGR & 0x000c) >> 2;
}

void rcc_clock_setup_hse_3v3(const clock_scale_t *clock)
{
 8000dc4:	b510      	push	{r4, lr}
 8000dc6:	4604      	mov	r4, r0
	/* Enable internal high-speed oscillator. */
	rcc_osc_on(HSI);
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f7ff ff7f 	bl	8000ccc <rcc_osc_on>
	rcc_wait_for_osc_ready(HSI);
 8000dce:	2002      	movs	r0, #2
 8000dd0:	f7ff ff3a 	bl	8000c48 <rcc_wait_for_osc_ready>

	/* Select HSI as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_HSI);
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff ffbd 	bl	8000d54 <rcc_set_sysclk_source>

	/* Enable external high-speed oscillator 8MHz. */
	rcc_osc_on(HSE);
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f7ff ff76 	bl	8000ccc <rcc_osc_on>
	rcc_wait_for_osc_ready(HSE);
 8000de0:	2001      	movs	r0, #1
 8000de2:	f7ff ff31 	bl	8000c48 <rcc_wait_for_osc_ready>

	/* Enable/disable high performance mode */
	if (!clock->power_save) {
 8000de6:	7be0      	ldrb	r0, [r4, #15]
 8000de8:	b100      	cbz	r0, 8000dec <rcc_clock_setup_hse_3v3+0x28>
		pwr_set_vos_scale(SCALE1);
	} else {
		pwr_set_vos_scale(SCALE2);
 8000dea:	2001      	movs	r0, #1
 8000dec:	f000 ffa0 	bl	8001d30 <pwr_set_vos_scale>

	/*
	 * Set prescalers for AHB, ADC, ABP1, ABP2.
	 * Do this before touching the PLL (TODO: why?).
	 */
	rcc_set_hpre(clock->hpre);
 8000df0:	7b20      	ldrb	r0, [r4, #12]
 8000df2:	f7ff ffcd 	bl	8000d90 <rcc_set_hpre>
	rcc_set_ppre1(clock->ppre1);
 8000df6:	7b60      	ldrb	r0, [r4, #13]
 8000df8:	f7ff ffc0 	bl	8000d7c <rcc_set_ppre1>
	rcc_set_ppre2(clock->ppre2);
 8000dfc:	7ba0      	ldrb	r0, [r4, #14]
 8000dfe:	f7ff ffb3 	bl	8000d68 <rcc_set_ppre2>

	rcc_set_main_pll_hse(clock->pllm, clock->plln,
 8000e02:	7922      	ldrb	r2, [r4, #4]
 8000e04:	7963      	ldrb	r3, [r4, #5]
 8000e06:	7820      	ldrb	r0, [r4, #0]
 8000e08:	8861      	ldrh	r1, [r4, #2]
 8000e0a:	f7ff ffcb 	bl	8000da4 <rcc_set_main_pll_hse>

void rcc_osc_on(enum rcc_osc osc)
{
	switch (osc) {
	case PLL:
		RCC_CR |= RCC_CR_PLLON;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <rcc_clock_setup_hse_3v3+0x84>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000e16:	601a      	str	r2, [r3, #0]

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
	switch (osc) {
	case PLL:
		while ((RCC_CR & RCC_CR_PLLRDY) == 0);
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	0191      	lsls	r1, r2, #6
 8000e1c:	d5fc      	bpl.n	8000e18 <rcc_clock_setup_hse_3v3+0x54>
	/* Enable PLL oscillator and wait for it to stabilize. */
	rcc_osc_on(PLL);
	rcc_wait_for_osc_ready(PLL);

	/* Configure flash settings. */
	flash_set_ws(clock->flash_config);
 8000e1e:	68a0      	ldr	r0, [r4, #8]
 8000e20:	f000 fb1a 	bl	8001458 <flash_set_ws>

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_PLL);
 8000e24:	2002      	movs	r0, #2
 8000e26:	f7ff ff95 	bl	8000d54 <rcc_set_sysclk_source>

	/* Wait for PLL clock to be selected. */
	rcc_wait_for_sysclk_status(PLL);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff ff32 	bl	8000c94 <rcc_wait_for_sysclk_status>

	/* Set the peripheral clock frequencies used. */
	rcc_ppre1_frequency = clock->apb1_frequency;
 8000e30:	6923      	ldr	r3, [r4, #16]
 8000e32:	4a06      	ldr	r2, [pc, #24]	; (8000e4c <rcc_clock_setup_hse_3v3+0x88>)
 8000e34:	6013      	str	r3, [r2, #0]
	rcc_ppre2_frequency = clock->apb2_frequency;
 8000e36:	6962      	ldr	r2, [r4, #20]
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <rcc_clock_setup_hse_3v3+0x8c>)

	/* Disable internal high-speed oscillator. */
	rcc_osc_off(HSI);
 8000e3a:	2002      	movs	r0, #2
}
 8000e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* Wait for PLL clock to be selected. */
	rcc_wait_for_sysclk_status(PLL);

	/* Set the peripheral clock frequencies used. */
	rcc_ppre1_frequency = clock->apb1_frequency;
	rcc_ppre2_frequency = clock->apb2_frequency;
 8000e40:	601a      	str	r2, [r3, #0]

	/* Disable internal high-speed oscillator. */
	rcc_osc_off(HSI);
 8000e42:	f7ff bf65 	b.w	8000d10 <rcc_osc_off>
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	20000020 	.word	0x20000020
 8000e50:	20000024 	.word	0x20000024

08000e54 <gpio_set>:
	     If multiple pins are to be changed, use logical OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8000e54:	6181      	str	r1, [r0, #24]
 8000e56:	4770      	bx	lr

08000e58 <gpio_clear>:
	     If multiple pins are to be changed, use logical OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8000e58:	0409      	lsls	r1, r1, #16
 8000e5a:	6181      	str	r1, [r0, #24]
 8000e5c:	4770      	bx	lr

08000e5e <gpio_toggle>:
	     If multiple pins are to be changed, use logical OR '|' to separate
	     them.
*/
void gpio_toggle(uint32_t gpioport, uint16_t gpios)
{
	GPIO_ODR(gpioport) ^= gpios;
 8000e5e:	6943      	ldr	r3, [r0, #20]
 8000e60:	4059      	eors	r1, r3
 8000e62:	6141      	str	r1, [r0, #20]
 8000e64:	4770      	bx	lr

08000e66 <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 8000e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/*
	 * We want to set the config only for the pins mentioned in gpios,
	 * but keeping the others, so read out the actual config first.
	 */
	moder = GPIO_MODER(gpioport);
 8000e6a:	6806      	ldr	r6, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 8000e6c:	68c5      	ldr	r5, [r0, #12]
 8000e6e:	2400      	movs	r4, #0

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8000e70:	fa43 f704 	asr.w	r7, r3, r4
 8000e74:	07ff      	lsls	r7, r7, #31
 8000e76:	d511      	bpl.n	8000e9c <gpio_mode_setup+0x36>
 8000e78:	0067      	lsls	r7, r4, #1
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8000e7a:	f04f 0c03 	mov.w	ip, #3
 8000e7e:	fa0c fc07 	lsl.w	ip, ip, r7
 8000e82:	ea6f 0c0c 	mvn.w	ip, ip
		moder |= GPIO_MODE(i, mode);
 8000e86:	fa01 f807 	lsl.w	r8, r1, r7
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8000e8a:	ea0c 0606 	and.w	r6, ip, r6
		moder |= GPIO_MODE(i, mode);
		pupd &= ~GPIO_PUPD_MASK(i);
 8000e8e:	ea0c 0505 	and.w	r5, ip, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000e92:	fa02 f707 	lsl.w	r7, r2, r7
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
		moder |= GPIO_MODE(i, mode);
 8000e96:	ea46 0608 	orr.w	r6, r6, r8
		pupd &= ~GPIO_PUPD_MASK(i);
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000e9a:	433d      	orrs	r5, r7
 8000e9c:	3401      	adds	r4, #1
	 * but keeping the others, so read out the actual config first.
	 */
	moder = GPIO_MODER(gpioport);
	pupd = GPIO_PUPDR(gpioport);

	for (i = 0; i < 16; i++) {
 8000e9e:	2c10      	cmp	r4, #16
 8000ea0:	d1e6      	bne.n	8000e70 <gpio_mode_setup+0xa>
		pupd &= ~GPIO_PUPD_MASK(i);
		pupd |= GPIO_PUPD(i, pull_up_down);
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 8000ea2:	6006      	str	r6, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 8000ea4:	60c5      	str	r5, [r0, #12]
 8000ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000eaa <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 8000eaa:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
 8000eac:	6a05      	ldr	r5, [r0, #32]
	afrh = GPIO_AFRH(gpioport);
 8000eae:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8000eb0:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
 8000eb2:	fa42 f603 	asr.w	r6, r2, r3
 8000eb6:	07f7      	lsls	r7, r6, #31
 8000eb8:	d507      	bpl.n	8000eca <gpio_set_af+0x20>
 8000eba:	009e      	lsls	r6, r3, #2
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 8000ebc:	270f      	movs	r7, #15
 8000ebe:	40b7      	lsls	r7, r6
 8000ec0:	ea25 0507 	bic.w	r5, r5, r7
		afrl |= GPIO_AFR(i, alt_func_num);
 8000ec4:	fa01 f606 	lsl.w	r6, r1, r6
 8000ec8:	4335      	orrs	r5, r6
 8000eca:	3301      	adds	r3, #1
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);

	for (i = 0; i < 8; i++) {
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	d1f0      	bne.n	8000eb2 <gpio_set_af+0x8>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f103 0608 	add.w	r6, r3, #8
		afrl &= ~GPIO_AFR_MASK(i);
		afrl |= GPIO_AFR(i, alt_func_num);
	}

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8000ed6:	fa42 f606 	asr.w	r6, r2, r6
 8000eda:	07f6      	lsls	r6, r6, #31
 8000edc:	d507      	bpl.n	8000eee <gpio_set_af+0x44>
 8000ede:	009e      	lsls	r6, r3, #2
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8000ee0:	270f      	movs	r7, #15
 8000ee2:	40b7      	lsls	r7, r6
 8000ee4:	ea24 0407 	bic.w	r4, r4, r7
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 8000ee8:	fa01 f606 	lsl.w	r6, r1, r6
 8000eec:	4334      	orrs	r4, r6
 8000eee:	3301      	adds	r3, #1
		}
		afrl &= ~GPIO_AFR_MASK(i);
		afrl |= GPIO_AFR(i, alt_func_num);
	}

	for (i = 8; i < 16; i++) {
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	d1ee      	bne.n	8000ed2 <gpio_set_af+0x28>
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
		afrh |= GPIO_AFR(i - 8, alt_func_num);
	}

	GPIO_AFRL(gpioport) = afrl;
 8000ef4:	6205      	str	r5, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 8000ef6:	6244      	str	r4, [r0, #36]	; 0x24
 8000ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000efc <timer_reset>:
@param[in] timer_peripheral Unsigned int32. Timer register address base @ref
			    tim_reg_base (TIM9 .. TIM14 not yet supported here).
*/

void timer_reset(uint32_t timer_peripheral)
{
 8000efc:	b508      	push	{r3, lr}
	switch (timer_peripheral) {
 8000efe:	4b2d      	ldr	r3, [pc, #180]	; (8000fb4 <timer_reset+0xb8>)
 8000f00:	4298      	cmp	r0, r3
 8000f02:	d036      	beq.n	8000f72 <timer_reset+0x76>
 8000f04:	d810      	bhi.n	8000f28 <timer_reset+0x2c>
 8000f06:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d024      	beq.n	8000f58 <timer_reset+0x5c>
 8000f0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f12:	4298      	cmp	r0, r3
 8000f14:	d026      	beq.n	8000f64 <timer_reset+0x68>
 8000f16:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f1a:	d149      	bne.n	8000fb0 <timer_reset+0xb4>
		rcc_peripheral_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM1RST);
		rcc_peripheral_clear_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM1RST);
		break;
#endif
	case TIM2:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM2RST);
 8000f1c:	4826      	ldr	r0, [pc, #152]	; (8000fb8 <timer_reset+0xbc>)
 8000f1e:	2101      	movs	r1, #1
 8000f20:	f000 faa8 	bl	8001474 <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM2RST);
 8000f24:	4824      	ldr	r0, [pc, #144]	; (8000fb8 <timer_reset+0xbc>)
 8000f26:	e015      	b.n	8000f54 <timer_reset+0x58>
			    tim_reg_base (TIM9 .. TIM14 not yet supported here).
*/

void timer_reset(uint32_t timer_peripheral)
{
	switch (timer_peripheral) {
 8000f28:	4b24      	ldr	r3, [pc, #144]	; (8000fbc <timer_reset+0xc0>)
 8000f2a:	4298      	cmp	r0, r3
 8000f2c:	d02f      	beq.n	8000f8e <timer_reset+0x92>
 8000f2e:	d804      	bhi.n	8000f3a <timer_reset+0x3e>
 8000f30:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000f34:	4298      	cmp	r0, r3
 8000f36:	d023      	beq.n	8000f80 <timer_reset+0x84>
 8000f38:	bd08      	pop	{r3, pc}
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <timer_reset+0xc4>)
 8000f3c:	4298      	cmp	r0, r3
 8000f3e:	d004      	beq.n	8000f4a <timer_reset+0x4e>
 8000f40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f44:	4298      	cmp	r0, r3
 8000f46:	d029      	beq.n	8000f9c <timer_reset+0xa0>
 8000f48:	bd08      	pop	{r3, pc}
#if defined(TIM1_BASE)
	case TIM1:
		rcc_peripheral_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM1RST);
 8000f4a:	481e      	ldr	r0, [pc, #120]	; (8000fc4 <timer_reset+0xc8>)
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	f000 fa91 	bl	8001474 <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM1RST);
 8000f52:	481c      	ldr	r0, [pc, #112]	; (8000fc4 <timer_reset+0xc8>)
		break;
#endif
	case TIM2:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM2RST);
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM2RST);
 8000f54:	2101      	movs	r1, #1
 8000f56:	e027      	b.n	8000fa8 <timer_reset+0xac>
		break;
	case TIM3:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM3RST);
 8000f58:	4817      	ldr	r0, [pc, #92]	; (8000fb8 <timer_reset+0xbc>)
 8000f5a:	2102      	movs	r1, #2
 8000f5c:	f000 fa8a 	bl	8001474 <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM3RST);
 8000f60:	4815      	ldr	r0, [pc, #84]	; (8000fb8 <timer_reset+0xbc>)
 8000f62:	e020      	b.n	8000fa6 <timer_reset+0xaa>
		break;
	case TIM4:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM4RST);
 8000f64:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <timer_reset+0xbc>)
 8000f66:	2104      	movs	r1, #4
 8000f68:	f000 fa84 	bl	8001474 <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM4RST);
 8000f6c:	4812      	ldr	r0, [pc, #72]	; (8000fb8 <timer_reset+0xbc>)
 8000f6e:	2104      	movs	r1, #4
 8000f70:	e01a      	b.n	8000fa8 <timer_reset+0xac>
		break;
#if defined(TIM5_BASE)
	case TIM5:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM5RST);
 8000f72:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <timer_reset+0xbc>)
 8000f74:	2108      	movs	r1, #8
 8000f76:	f000 fa7d 	bl	8001474 <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM5RST);
 8000f7a:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <timer_reset+0xbc>)
 8000f7c:	2108      	movs	r1, #8
 8000f7e:	e013      	b.n	8000fa8 <timer_reset+0xac>
		break;
#endif
	case TIM6:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM6RST);
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <timer_reset+0xbc>)
 8000f82:	2110      	movs	r1, #16
 8000f84:	f000 fa76 	bl	8001474 <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM6RST);
 8000f88:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <timer_reset+0xbc>)
 8000f8a:	2110      	movs	r1, #16
 8000f8c:	e00c      	b.n	8000fa8 <timer_reset+0xac>
		break;
	case TIM7:
		rcc_peripheral_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM7RST);
 8000f8e:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <timer_reset+0xbc>)
 8000f90:	2120      	movs	r1, #32
 8000f92:	f000 fa6f 	bl	8001474 <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM7RST);
 8000f96:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <timer_reset+0xbc>)
 8000f98:	2120      	movs	r1, #32
 8000f9a:	e005      	b.n	8000fa8 <timer_reset+0xac>
		break;
#if defined(TIM8_BASE)
	case TIM8:
		rcc_peripheral_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM8RST);
 8000f9c:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <timer_reset+0xc8>)
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	f000 fa68 	bl	8001474 <rcc_peripheral_reset>
		rcc_peripheral_clear_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM8RST);
 8000fa4:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <timer_reset+0xc8>)
 8000fa6:	2102      	movs	r1, #2
		rcc_peripheral_clear_reset(&RCC_APB1RSTR,
					   RCC_APB1RSTR_TIM14RST);
		break;
*/
	}
}
 8000fa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rcc_peripheral_clear_reset(&RCC_APB1RSTR, RCC_APB1RSTR_TIM7RST);
		break;
#if defined(TIM8_BASE)
	case TIM8:
		rcc_peripheral_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM8RST);
		rcc_peripheral_clear_reset(&RCC_APB2RSTR, RCC_APB2RSTR_TIM8RST);
 8000fac:	f000 ba66 	b.w	800147c <rcc_peripheral_clear_reset>
 8000fb0:	bd08      	pop	{r3, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40000c00 	.word	0x40000c00
 8000fb8:	40023820 	.word	0x40023820
 8000fbc:	40001400 	.word	0x40001400
 8000fc0:	40010000 	.word	0x40010000
 8000fc4:	40023824 	.word	0x40023824

08000fc8 <timer_enable_irq>:
enable bits to be set
*/

void timer_enable_irq(uint32_t timer_peripheral, uint32_t irq)
{
	TIM_DIER(timer_peripheral) |= irq;
 8000fc8:	68c3      	ldr	r3, [r0, #12]
 8000fca:	4319      	orrs	r1, r3
 8000fcc:	60c1      	str	r1, [r0, #12]
 8000fce:	4770      	bx	lr

08000fd0 <timer_clear_flag>:
@param[in] flag Unsigned int32. @ref tim_sr_values. Status register flag.
*/

void timer_clear_flag(uint32_t timer_peripheral, uint32_t flag)
{
	TIM_SR(timer_peripheral) &= ~flag;
 8000fd0:	6903      	ldr	r3, [r0, #16]
 8000fd2:	ea23 0101 	bic.w	r1, r3, r1
 8000fd6:	6101      	str	r1, [r0, #16]
 8000fd8:	4770      	bx	lr

08000fda <timer_set_mode>:
tim_x_cr1_dir
*/

void timer_set_mode(uint32_t timer_peripheral, uint32_t clock_div,
		    uint32_t alignment, uint32_t direction)
{
 8000fda:	b510      	push	{r4, lr}
	uint32_t cr1;

	cr1 = TIM_CR1(timer_peripheral);
 8000fdc:	6804      	ldr	r4, [r0, #0]

	cr1 &= ~(TIM_CR1_CKD_CK_INT_MASK | TIM_CR1_CMS_MASK | TIM_CR1_DIR_DOWN);

	cr1 |= clock_div | alignment | direction;
 8000fde:	4313      	orrs	r3, r2
{
	uint32_t cr1;

	cr1 = TIM_CR1(timer_peripheral);

	cr1 &= ~(TIM_CR1_CKD_CK_INT_MASK | TIM_CR1_CMS_MASK | TIM_CR1_DIR_DOWN);
 8000fe0:	f424 745c 	bic.w	r4, r4, #880	; 0x370

	cr1 |= clock_div | alignment | direction;
 8000fe4:	4319      	orrs	r1, r3
 8000fe6:	430c      	orrs	r4, r1

	TIM_CR1(timer_peripheral) = cr1;
 8000fe8:	6004      	str	r4, [r0, #0]
 8000fea:	bd10      	pop	{r4, pc}

08000fec <timer_enable_preload>:
tim_reg_base
*/

void timer_enable_preload(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_ARPE;
 8000fec:	6803      	ldr	r3, [r0, #0]
 8000fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff2:	6003      	str	r3, [r0, #0]
 8000ff4:	4770      	bx	lr

08000ff6 <timer_continuous_mode>:
tim_reg_base
*/

void timer_continuous_mode(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_OPM;
 8000ff6:	6803      	ldr	r3, [r0, #0]
 8000ff8:	f023 0308 	bic.w	r3, r3, #8
 8000ffc:	6003      	str	r3, [r0, #0]
 8000ffe:	4770      	bx	lr

08001000 <timer_enable_update_event>:
tim_reg_base
*/

void timer_enable_update_event(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_UDIS;
 8001000:	6803      	ldr	r3, [r0, #0]
 8001002:	f023 0302 	bic.w	r3, r3, #2
 8001006:	6003      	str	r3, [r0, #0]
 8001008:	4770      	bx	lr

0800100a <timer_enable_counter>:
tim_reg_base
*/

void timer_enable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_CEN;
 800100a:	6803      	ldr	r3, [r0, #0]
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6003      	str	r3, [r0, #0]
 8001012:	4770      	bx	lr

08001014 <timer_disable_preload_complementry_enable_bits>:
*/

void timer_disable_preload_complementry_enable_bits(uint32_t timer_peripheral)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <timer_disable_preload_complementry_enable_bits+0x14>)
 8001016:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 800101a:	429a      	cmp	r2, r3
 800101c:	d103      	bne.n	8001026 <timer_disable_preload_complementry_enable_bits+0x12>
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_CCPC;
 800101e:	6843      	ldr	r3, [r0, #4]
 8001020:	f023 0301 	bic.w	r3, r3, #1
 8001024:	6043      	str	r3, [r0, #4]
 8001026:	4770      	bx	lr
 8001028:	40010000 	.word	0x40010000

0800102c <timer_set_prescaler>:
@param[in] value Unsigned int32. Prescaler values 0...0xFFFF.
*/

void timer_set_prescaler(uint32_t timer_peripheral, uint32_t value)
{
	TIM_PSC(timer_peripheral) = value;
 800102c:	6281      	str	r1, [r0, #40]	; 0x28
 800102e:	4770      	bx	lr

08001030 <timer_set_repetition_counter>:
*/

void timer_set_repetition_counter(uint32_t timer_peripheral, uint32_t value)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <timer_set_repetition_counter+0x10>)
 8001032:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 8001036:	429a      	cmp	r2, r3
		TIM_RCR(timer_peripheral) = value;
 8001038:	bf08      	it	eq
 800103a:	6301      	streq	r1, [r0, #48]	; 0x30
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40010000 	.word	0x40010000

08001044 <timer_set_period>:
@param[in] period Unsigned int32. Period in counter clock ticks.
*/

void timer_set_period(uint32_t timer_peripheral, uint32_t period)
{
	TIM_ARR(timer_peripheral) = period;
 8001044:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001046:	4770      	bx	lr

08001048 <timer_set_oc_mode>:
*/

void timer_set_oc_mode(uint32_t timer_peripheral, enum tim_oc_id oc_id,
		       enum tim_oc_mode oc_mode)
{
	switch (oc_id) {
 8001048:	2906      	cmp	r1, #6
 800104a:	f200 80bf 	bhi.w	80011cc <timer_set_oc_mode+0x184>
 800104e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001052:	0007      	.short	0x0007
 8001054:	003200bd 	.word	0x003200bd
 8001058:	005e00bd 	.word	0x005e00bd
 800105c:	008c00bd 	.word	0x008c00bd
	case TIM_OC1:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_CC1S_MASK;
 8001060:	6983      	ldr	r3, [r0, #24]
 8001062:	f023 0303 	bic.w	r3, r3, #3
 8001066:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_CC1S_OUT;
 8001068:	6983      	ldr	r3, [r0, #24]
 800106a:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_OC1M_MASK;
 800106c:	6983      	ldr	r3, [r0, #24]
 800106e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001072:	6183      	str	r3, [r0, #24]
		switch (oc_mode) {
 8001074:	2a07      	cmp	r2, #7
 8001076:	f200 80a9 	bhi.w	80011cc <timer_set_oc_mode+0x184>
 800107a:	e8df f002 	tbb	[pc, r2]
 800107e:	5a2e      	.short	0x5a2e
 8001080:	100c0804 	.word	0x100c0804
 8001084:	1814      	.short	0x1814
			break;
		case TIM_OCM_ACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_ACTIVE;
			break;
		case TIM_OCM_INACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_INACTIVE;
 8001086:	6983      	ldr	r3, [r0, #24]
 8001088:	f043 0320 	orr.w	r3, r3, #32
 800108c:	e084      	b.n	8001198 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_TOGGLE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_TOGGLE;
 800108e:	6983      	ldr	r3, [r0, #24]
 8001090:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001094:	e080      	b.n	8001198 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_FORCE_LOW:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_FORCE_LOW;
 8001096:	6983      	ldr	r3, [r0, #24]
 8001098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800109c:	e07c      	b.n	8001198 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_FORCE_HIGH:
			TIM_CCMR1(timer_peripheral) |=
 800109e:	6983      	ldr	r3, [r0, #24]
 80010a0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80010a4:	e078      	b.n	8001198 <timer_set_oc_mode+0x150>
			    TIM_CCMR1_OC1M_FORCE_HIGH;
			break;
		case TIM_OCM_PWM1:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_PWM1;
 80010a6:	6983      	ldr	r3, [r0, #24]
 80010a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80010ac:	e074      	b.n	8001198 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_PWM2:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1M_PWM2;
 80010ae:	6983      	ldr	r3, [r0, #24]
 80010b0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80010b4:	e070      	b.n	8001198 <timer_set_oc_mode+0x150>
			break;
		}
		break;
	case TIM_OC2:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_CC2S_MASK;
 80010b6:	6983      	ldr	r3, [r0, #24]
 80010b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010bc:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_CC2S_OUT;
 80010be:	6983      	ldr	r3, [r0, #24]
 80010c0:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR1_OC2M_MASK;
 80010c2:	6983      	ldr	r3, [r0, #24]
 80010c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80010c8:	6183      	str	r3, [r0, #24]
		switch (oc_mode) {
 80010ca:	2a07      	cmp	r2, #7
 80010cc:	d87e      	bhi.n	80011cc <timer_set_oc_mode+0x184>
 80010ce:	e8df f002 	tbb	[pc, r2]
 80010d2:	6004      	.short	0x6004
 80010d4:	120e0a06 	.word	0x120e0a06
 80010d8:	1a16      	.short	0x1a16
		case TIM_OCM_FROZEN:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_FROZEN;
 80010da:	6983      	ldr	r3, [r0, #24]
 80010dc:	e05c      	b.n	8001198 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_ACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_ACTIVE;
			break;
		case TIM_OCM_INACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_INACTIVE;
 80010de:	6983      	ldr	r3, [r0, #24]
 80010e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010e4:	e058      	b.n	8001198 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_TOGGLE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_TOGGLE;
 80010e6:	6983      	ldr	r3, [r0, #24]
 80010e8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80010ec:	e054      	b.n	8001198 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_FORCE_LOW:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_FORCE_LOW;
 80010ee:	6983      	ldr	r3, [r0, #24]
 80010f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f4:	e050      	b.n	8001198 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_FORCE_HIGH:
			TIM_CCMR1(timer_peripheral) |=
 80010f6:	6983      	ldr	r3, [r0, #24]
 80010f8:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80010fc:	e04c      	b.n	8001198 <timer_set_oc_mode+0x150>
			    TIM_CCMR1_OC2M_FORCE_HIGH;
			break;
		case TIM_OCM_PWM1:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_PWM1;
 80010fe:	6983      	ldr	r3, [r0, #24]
 8001100:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001104:	e048      	b.n	8001198 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_PWM2:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2M_PWM2;
 8001106:	6983      	ldr	r3, [r0, #24]
 8001108:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800110c:	e044      	b.n	8001198 <timer_set_oc_mode+0x150>
			break;
		}
		break;
	case TIM_OC3:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR2_CC3S_MASK;
 800110e:	6983      	ldr	r3, [r0, #24]
 8001110:	f023 0303 	bic.w	r3, r3, #3
 8001114:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR2_CC3S_OUT;
 8001116:	6983      	ldr	r3, [r0, #24]
 8001118:	6183      	str	r3, [r0, #24]
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_OC3M_MASK;
 800111a:	69c3      	ldr	r3, [r0, #28]
 800111c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001120:	61c3      	str	r3, [r0, #28]
		switch (oc_mode) {
 8001122:	2a07      	cmp	r2, #7
 8001124:	d852      	bhi.n	80011cc <timer_set_oc_mode+0x184>
 8001126:	e8df f002 	tbb	[pc, r2]
 800112a:	0432      	.short	0x0432
 800112c:	14100c08 	.word	0x14100c08
 8001130:	1c18      	.short	0x1c18
		case TIM_OCM_FROZEN:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_FROZEN;
			break;
		case TIM_OCM_ACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR2_OC3M_ACTIVE;
 8001132:	6983      	ldr	r3, [r0, #24]
 8001134:	f043 0310 	orr.w	r3, r3, #16
 8001138:	e02e      	b.n	8001198 <timer_set_oc_mode+0x150>
			break;
		case TIM_OCM_INACTIVE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_INACTIVE;
 800113a:	69c3      	ldr	r3, [r0, #28]
 800113c:	f043 0320 	orr.w	r3, r3, #32
 8001140:	e043      	b.n	80011ca <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_TOGGLE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_TOGGLE;
 8001142:	69c3      	ldr	r3, [r0, #28]
 8001144:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001148:	e03f      	b.n	80011ca <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_FORCE_LOW:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_FORCE_LOW;
 800114a:	69c3      	ldr	r3, [r0, #28]
 800114c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001150:	e03b      	b.n	80011ca <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_FORCE_HIGH:
			TIM_CCMR2(timer_peripheral) |=
 8001152:	69c3      	ldr	r3, [r0, #28]
 8001154:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001158:	e037      	b.n	80011ca <timer_set_oc_mode+0x182>
			    TIM_CCMR2_OC3M_FORCE_HIGH;
			break;
		case TIM_OCM_PWM1:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_PWM1;
 800115a:	69c3      	ldr	r3, [r0, #28]
 800115c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001160:	e033      	b.n	80011ca <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_PWM2:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3M_PWM2;
 8001162:	69c3      	ldr	r3, [r0, #28]
 8001164:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001168:	e02f      	b.n	80011ca <timer_set_oc_mode+0x182>
			break;
		}
		break;
	case TIM_OC4:
		TIM_CCMR1(timer_peripheral) &= ~TIM_CCMR2_CC4S_MASK;
 800116a:	6983      	ldr	r3, [r0, #24]
 800116c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001170:	6183      	str	r3, [r0, #24]
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR2_CC4S_OUT;
 8001172:	6983      	ldr	r3, [r0, #24]
 8001174:	6183      	str	r3, [r0, #24]
		TIM_CCMR2(timer_peripheral) &= ~TIM_CCMR2_OC4M_MASK;
 8001176:	69c3      	ldr	r3, [r0, #28]
 8001178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800117c:	61c3      	str	r3, [r0, #28]
		switch (oc_mode) {
 800117e:	2a07      	cmp	r2, #7
 8001180:	d824      	bhi.n	80011cc <timer_set_oc_mode+0x184>
 8001182:	e8df f002 	tbb	[pc, r2]
 8001186:	0604      	.short	0x0604
 8001188:	17130f0b 	.word	0x17130f0b
 800118c:	1f1b      	.short	0x1f1b
		case TIM_OCM_FROZEN:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_FROZEN;
 800118e:	69c3      	ldr	r3, [r0, #28]
 8001190:	e01b      	b.n	80011ca <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_ACTIVE:
			TIM_CCMR1(timer_peripheral) |= TIM_CCMR2_OC4M_ACTIVE;
 8001192:	6983      	ldr	r3, [r0, #24]
 8001194:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001198:	6183      	str	r3, [r0, #24]
			break;
 800119a:	4770      	bx	lr
		case TIM_OCM_INACTIVE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_INACTIVE;
 800119c:	69c3      	ldr	r3, [r0, #28]
 800119e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011a2:	e012      	b.n	80011ca <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_TOGGLE:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_TOGGLE;
 80011a4:	69c3      	ldr	r3, [r0, #28]
 80011a6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80011aa:	e00e      	b.n	80011ca <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_FORCE_LOW:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_FORCE_LOW;
 80011ac:	69c3      	ldr	r3, [r0, #28]
 80011ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b2:	e00a      	b.n	80011ca <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_FORCE_HIGH:
			TIM_CCMR2(timer_peripheral) |=
 80011b4:	69c3      	ldr	r3, [r0, #28]
 80011b6:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80011ba:	e006      	b.n	80011ca <timer_set_oc_mode+0x182>
			    TIM_CCMR2_OC4M_FORCE_HIGH;
			break;
		case TIM_OCM_PWM1:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_PWM1;
 80011bc:	69c3      	ldr	r3, [r0, #28]
 80011be:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80011c2:	e002      	b.n	80011ca <timer_set_oc_mode+0x182>
			break;
		case TIM_OCM_PWM2:
			TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4M_PWM2;
 80011c4:	69c3      	ldr	r3, [r0, #28]
 80011c6:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80011ca:	61c3      	str	r3, [r0, #28]
 80011cc:	4770      	bx	lr

080011ce <timer_enable_oc_preload>:
		TIM_OCx where x=1..4, TIM_OCxN where x=1..3 (no action taken)
*/

void timer_enable_oc_preload(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 80011ce:	2906      	cmp	r1, #6
 80011d0:	d816      	bhi.n	8001200 <timer_enable_oc_preload+0x32>
 80011d2:	e8df f001 	tbb	[pc, r1]
 80011d6:	1504      	.short	0x1504
 80011d8:	150d1508 	.word	0x150d1508
 80011dc:	11          	.byte	0x11
 80011dd:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC1PE;
 80011de:	6983      	ldr	r3, [r0, #24]
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	e002      	b.n	80011ec <timer_enable_oc_preload+0x1e>
		break;
	case TIM_OC2:
		TIM_CCMR1(timer_peripheral) |= TIM_CCMR1_OC2PE;
 80011e6:	6983      	ldr	r3, [r0, #24]
 80011e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011ec:	6183      	str	r3, [r0, #24]
		break;
 80011ee:	4770      	bx	lr
	case TIM_OC3:
		TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC3PE;
 80011f0:	69c3      	ldr	r3, [r0, #28]
 80011f2:	f043 0308 	orr.w	r3, r3, #8
 80011f6:	e002      	b.n	80011fe <timer_enable_oc_preload+0x30>
		break;
	case TIM_OC4:
		TIM_CCMR2(timer_peripheral) |= TIM_CCMR2_OC4PE;
 80011f8:	69c3      	ldr	r3, [r0, #28]
 80011fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011fe:	61c3      	str	r3, [r0, #28]
 8001200:	4770      	bx	lr
	...

08001204 <timer_set_oc_polarity_high>:
		timers 1 and 8)
*/

void timer_set_oc_polarity_high(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 8001204:	2906      	cmp	r1, #6
 8001206:	d815      	bhi.n	8001234 <timer_set_oc_polarity_high+0x30>
 8001208:	e8df f001 	tbb	[pc, r1]
 800120c:	14081404 	.word	0x14081404
 8001210:	140c      	.short	0x140c
 8001212:	10          	.byte	0x10
 8001213:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC1P;
 8001214:	6a03      	ldr	r3, [r0, #32]
 8001216:	f023 0302 	bic.w	r3, r3, #2
 800121a:	e00a      	b.n	8001232 <timer_set_oc_polarity_high+0x2e>
		break;
	case TIM_OC2:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC2P;
 800121c:	6a03      	ldr	r3, [r0, #32]
 800121e:	f023 0320 	bic.w	r3, r3, #32
 8001222:	e006      	b.n	8001232 <timer_set_oc_polarity_high+0x2e>
		break;
	case TIM_OC3:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC3P;
 8001224:	6a03      	ldr	r3, [r0, #32]
 8001226:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800122a:	e002      	b.n	8001232 <timer_set_oc_polarity_high+0x2e>
		break;
	case TIM_OC4:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC4P;
 800122c:	6a03      	ldr	r3, [r0, #32]
 800122e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001232:	6203      	str	r3, [r0, #32]
		break;
	}

	/* Acting for TIM1 and TIM8 only from here onwards. */
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral != TIM1) && (timer_peripheral != TIM8)) {
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <timer_set_oc_polarity_high+0x60>)
 8001236:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 800123a:	429a      	cmp	r2, r3
 800123c:	d111      	bne.n	8001262 <timer_set_oc_polarity_high+0x5e>
	}
#else
	return;
#endif

	switch (oc_id) {
 800123e:	2903      	cmp	r1, #3
 8001240:	d007      	beq.n	8001252 <timer_set_oc_polarity_high+0x4e>
 8001242:	2905      	cmp	r1, #5
 8001244:	d009      	beq.n	800125a <timer_set_oc_polarity_high+0x56>
 8001246:	2901      	cmp	r1, #1
 8001248:	d10b      	bne.n	8001262 <timer_set_oc_polarity_high+0x5e>
	case TIM_OC1N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC1NP;
 800124a:	6a03      	ldr	r3, [r0, #32]
 800124c:	f023 0308 	bic.w	r3, r3, #8
 8001250:	e006      	b.n	8001260 <timer_set_oc_polarity_high+0x5c>
		break;
	case TIM_OC2N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC2NP;
 8001252:	6a03      	ldr	r3, [r0, #32]
 8001254:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001258:	e002      	b.n	8001260 <timer_set_oc_polarity_high+0x5c>
		break;
	case TIM_OC3N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC3NP;
 800125a:	6a03      	ldr	r3, [r0, #32]
 800125c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001260:	6203      	str	r3, [r0, #32]
 8001262:	4770      	bx	lr
 8001264:	40010000 	.word	0x40010000

08001268 <timer_enable_oc_output>:
		timers 1 and 8)
*/

void timer_enable_oc_output(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 8001268:	2906      	cmp	r1, #6
 800126a:	d815      	bhi.n	8001298 <timer_enable_oc_output+0x30>
 800126c:	e8df f001 	tbb	[pc, r1]
 8001270:	14081404 	.word	0x14081404
 8001274:	140c      	.short	0x140c
 8001276:	10          	.byte	0x10
 8001277:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC1E;
 8001278:	6a03      	ldr	r3, [r0, #32]
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	e00a      	b.n	8001296 <timer_enable_oc_output+0x2e>
		break;
	case TIM_OC2:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC2E;
 8001280:	6a03      	ldr	r3, [r0, #32]
 8001282:	f043 0310 	orr.w	r3, r3, #16
 8001286:	e006      	b.n	8001296 <timer_enable_oc_output+0x2e>
		break;
	case TIM_OC3:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC3E;
 8001288:	6a03      	ldr	r3, [r0, #32]
 800128a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128e:	e002      	b.n	8001296 <timer_enable_oc_output+0x2e>
		break;
	case TIM_OC4:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC4E;
 8001290:	6a03      	ldr	r3, [r0, #32]
 8001292:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001296:	6203      	str	r3, [r0, #32]
		break;
	}

	/* Acting for TIM1 and TIM8 only from here onwards. */
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral != TIM1) && (timer_peripheral != TIM8)) {
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <timer_enable_oc_output+0x60>)
 800129a:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 800129e:	429a      	cmp	r2, r3
 80012a0:	d111      	bne.n	80012c6 <timer_enable_oc_output+0x5e>
	}
#else
	return;
#endif

	switch (oc_id) {
 80012a2:	2903      	cmp	r1, #3
 80012a4:	d007      	beq.n	80012b6 <timer_enable_oc_output+0x4e>
 80012a6:	2905      	cmp	r1, #5
 80012a8:	d009      	beq.n	80012be <timer_enable_oc_output+0x56>
 80012aa:	2901      	cmp	r1, #1
 80012ac:	d10b      	bne.n	80012c6 <timer_enable_oc_output+0x5e>
	case TIM_OC1N:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC1NE;
 80012ae:	6a03      	ldr	r3, [r0, #32]
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	e006      	b.n	80012c4 <timer_enable_oc_output+0x5c>
		break;
	case TIM_OC2N:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC2NE;
 80012b6:	6a03      	ldr	r3, [r0, #32]
 80012b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012bc:	e002      	b.n	80012c4 <timer_enable_oc_output+0x5c>
		break;
	case TIM_OC3N:
		TIM_CCER(timer_peripheral) |= TIM_CCER_CC3NE;
 80012be:	6a03      	ldr	r3, [r0, #32]
 80012c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c4:	6203      	str	r3, [r0, #32]
 80012c6:	4770      	bx	lr
 80012c8:	40010000 	.word	0x40010000

080012cc <timer_disable_oc_output>:
		timers 1 and 8)
*/

void timer_disable_oc_output(uint32_t timer_peripheral, enum tim_oc_id oc_id)
{
	switch (oc_id) {
 80012cc:	2906      	cmp	r1, #6
 80012ce:	d815      	bhi.n	80012fc <timer_disable_oc_output+0x30>
 80012d0:	e8df f001 	tbb	[pc, r1]
 80012d4:	14081404 	.word	0x14081404
 80012d8:	140c      	.short	0x140c
 80012da:	10          	.byte	0x10
 80012db:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC1E;
 80012dc:	6a03      	ldr	r3, [r0, #32]
 80012de:	f023 0301 	bic.w	r3, r3, #1
 80012e2:	e00a      	b.n	80012fa <timer_disable_oc_output+0x2e>
		break;
	case TIM_OC2:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC2E;
 80012e4:	6a03      	ldr	r3, [r0, #32]
 80012e6:	f023 0310 	bic.w	r3, r3, #16
 80012ea:	e006      	b.n	80012fa <timer_disable_oc_output+0x2e>
		break;
	case TIM_OC3:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC3E;
 80012ec:	6a03      	ldr	r3, [r0, #32]
 80012ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012f2:	e002      	b.n	80012fa <timer_disable_oc_output+0x2e>
		break;
	case TIM_OC4:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC4E;
 80012f4:	6a03      	ldr	r3, [r0, #32]
 80012f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012fa:	6203      	str	r3, [r0, #32]
		break;
	}

	/* Acting for TIM1 and TIM8 only from here onwards. */
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral != TIM1) && (timer_peripheral != TIM8)) {
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <timer_disable_oc_output+0x60>)
 80012fe:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 8001302:	429a      	cmp	r2, r3
 8001304:	d111      	bne.n	800132a <timer_disable_oc_output+0x5e>
	}
#else
	return;
#endif

	switch (oc_id) {
 8001306:	2903      	cmp	r1, #3
 8001308:	d007      	beq.n	800131a <timer_disable_oc_output+0x4e>
 800130a:	2905      	cmp	r1, #5
 800130c:	d009      	beq.n	8001322 <timer_disable_oc_output+0x56>
 800130e:	2901      	cmp	r1, #1
 8001310:	d10b      	bne.n	800132a <timer_disable_oc_output+0x5e>
	case TIM_OC1N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC1NE;
 8001312:	6a03      	ldr	r3, [r0, #32]
 8001314:	f023 0304 	bic.w	r3, r3, #4
 8001318:	e006      	b.n	8001328 <timer_disable_oc_output+0x5c>
		break;
	case TIM_OC2N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC2NE;
 800131a:	6a03      	ldr	r3, [r0, #32]
 800131c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001320:	e002      	b.n	8001328 <timer_disable_oc_output+0x5c>
		break;
	case TIM_OC3N:
		TIM_CCER(timer_peripheral) &= ~TIM_CCER_CC3NE;
 8001322:	6a03      	ldr	r3, [r0, #32]
 8001324:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001328:	6203      	str	r3, [r0, #32]
 800132a:	4770      	bx	lr
 800132c:	40010000 	.word	0x40010000

08001330 <timer_set_oc_idle_state_unset>:
void timer_set_oc_idle_state_unset(uint32_t timer_peripheral,
				   enum tim_oc_id oc_id)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	/* Acting for TIM1 and TIM8 only. */
	if ((timer_peripheral != TIM1) && (timer_peripheral != TIM8)) {
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <timer_set_oc_idle_state_unset+0x54>)
 8001332:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 8001336:	429a      	cmp	r2, r3
 8001338:	d123      	bne.n	8001382 <timer_set_oc_idle_state_unset+0x52>
		return;
	}

	switch (oc_id) {
 800133a:	2906      	cmp	r1, #6
 800133c:	d821      	bhi.n	8001382 <timer_set_oc_idle_state_unset+0x52>
 800133e:	e8df f001 	tbb	[pc, r1]
 8001342:	0804      	.short	0x0804
 8001344:	1814100c 	.word	0x1814100c
 8001348:	1c          	.byte	0x1c
 8001349:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS1;
 800134a:	6843      	ldr	r3, [r0, #4]
 800134c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001350:	e016      	b.n	8001380 <timer_set_oc_idle_state_unset+0x50>
		break;
	case TIM_OC1N:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS1N;
 8001352:	6843      	ldr	r3, [r0, #4]
 8001354:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001358:	e012      	b.n	8001380 <timer_set_oc_idle_state_unset+0x50>
		break;
	case TIM_OC2:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS2;
 800135a:	6843      	ldr	r3, [r0, #4]
 800135c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001360:	e00e      	b.n	8001380 <timer_set_oc_idle_state_unset+0x50>
		break;
	case TIM_OC2N:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS2N;
 8001362:	6843      	ldr	r3, [r0, #4]
 8001364:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001368:	e00a      	b.n	8001380 <timer_set_oc_idle_state_unset+0x50>
		break;
	case TIM_OC3:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS3;
 800136a:	6843      	ldr	r3, [r0, #4]
 800136c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001370:	e006      	b.n	8001380 <timer_set_oc_idle_state_unset+0x50>
		break;
	case TIM_OC3N:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS3N;
 8001372:	6843      	ldr	r3, [r0, #4]
 8001374:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001378:	e002      	b.n	8001380 <timer_set_oc_idle_state_unset+0x50>
		break;
	case TIM_OC4:
		TIM_CR2(timer_peripheral) &= ~TIM_CR2_OIS4;
 800137a:	6843      	ldr	r3, [r0, #4]
 800137c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001380:	6043      	str	r3, [r0, #4]
 8001382:	4770      	bx	lr
 8001384:	40010000 	.word	0x40010000

08001388 <timer_set_oc_value>:
*/

void timer_set_oc_value(uint32_t timer_peripheral, enum tim_oc_id oc_id,
			uint32_t value)
{
	switch (oc_id) {
 8001388:	2906      	cmp	r1, #6
 800138a:	d80c      	bhi.n	80013a6 <timer_set_oc_value+0x1e>
 800138c:	e8df f001 	tbb	[pc, r1]
 8001390:	0b060b04 	.word	0x0b060b04
 8001394:	0b08      	.short	0x0b08
 8001396:	0a          	.byte	0x0a
 8001397:	00          	.byte	0x00
	case TIM_OC1:
		TIM_CCR1(timer_peripheral) = value;
 8001398:	6342      	str	r2, [r0, #52]	; 0x34
		break;
 800139a:	4770      	bx	lr
	case TIM_OC2:
		TIM_CCR2(timer_peripheral) = value;
 800139c:	6382      	str	r2, [r0, #56]	; 0x38
		break;
 800139e:	4770      	bx	lr
	case TIM_OC3:
		TIM_CCR3(timer_peripheral) = value;
 80013a0:	63c2      	str	r2, [r0, #60]	; 0x3c
		break;
 80013a2:	4770      	bx	lr
	case TIM_OC4:
		TIM_CCR4(timer_peripheral) = value;
 80013a4:	6402      	str	r2, [r0, #64]	; 0x40
 80013a6:	4770      	bx	lr

080013a8 <timer_enable_break_main_output>:
*/

void timer_enable_break_main_output(uint32_t timer_peripheral)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <timer_enable_break_main_output+0x14>)
 80013aa:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d103      	bne.n	80013ba <timer_enable_break_main_output+0x12>
		TIM_BDTR(timer_peripheral) |= TIM_BDTR_MOE;
 80013b2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80013b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013b8:	6443      	str	r3, [r0, #68]	; 0x44
 80013ba:	4770      	bx	lr
 80013bc:	40010000 	.word	0x40010000

080013c0 <timer_disable_break_automatic_output>:
*/

void timer_disable_break_automatic_output(uint32_t timer_peripheral)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <timer_disable_break_automatic_output+0x14>)
 80013c2:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d103      	bne.n	80013d2 <timer_disable_break_automatic_output+0x12>
		TIM_BDTR(timer_peripheral) &= ~TIM_BDTR_AOE;
 80013ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80013cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013d0:	6443      	str	r3, [r0, #68]	; 0x44
 80013d2:	4770      	bx	lr
 80013d4:	40010000 	.word	0x40010000

080013d8 <timer_set_break_polarity_high>:
*/

void timer_set_break_polarity_high(uint32_t timer_peripheral)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <timer_set_break_polarity_high+0x14>)
 80013da:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 80013de:	429a      	cmp	r2, r3
 80013e0:	d103      	bne.n	80013ea <timer_set_break_polarity_high+0x12>
		TIM_BDTR(timer_peripheral) |= TIM_BDTR_BKP;
 80013e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80013e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013e8:	6443      	str	r3, [r0, #68]	; 0x44
 80013ea:	4770      	bx	lr
 80013ec:	40010000 	.word	0x40010000

080013f0 <timer_disable_break>:
*/

void timer_disable_break(uint32_t timer_peripheral)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <timer_disable_break+0x14>)
 80013f2:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d103      	bne.n	8001402 <timer_disable_break+0x12>
		TIM_BDTR(timer_peripheral) &= ~TIM_BDTR_BKE;
 80013fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80013fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001400:	6443      	str	r3, [r0, #68]	; 0x44
 8001402:	4770      	bx	lr
 8001404:	40010000 	.word	0x40010000

08001408 <timer_set_enabled_off_state_in_run_mode>:
*/

void timer_set_enabled_off_state_in_run_mode(uint32_t timer_peripheral)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <timer_set_enabled_off_state_in_run_mode+0x14>)
 800140a:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 800140e:	429a      	cmp	r2, r3
 8001410:	d103      	bne.n	800141a <timer_set_enabled_off_state_in_run_mode+0x12>
		TIM_BDTR(timer_peripheral) |= TIM_BDTR_OSSR;
 8001412:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001414:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001418:	6443      	str	r3, [r0, #68]	; 0x44
 800141a:	4770      	bx	lr
 800141c:	40010000 	.word	0x40010000

08001420 <timer_set_enabled_off_state_in_idle_mode>:
*/

void timer_set_enabled_off_state_in_idle_mode(uint32_t timer_peripheral)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <timer_set_enabled_off_state_in_idle_mode+0x14>)
 8001422:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 8001426:	429a      	cmp	r2, r3
 8001428:	d103      	bne.n	8001432 <timer_set_enabled_off_state_in_idle_mode+0x12>
		TIM_BDTR(timer_peripheral) |= TIM_BDTR_OSSI;
 800142a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800142c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001430:	6443      	str	r3, [r0, #68]	; 0x44
 8001432:	4770      	bx	lr
 8001434:	40010000 	.word	0x40010000

08001438 <timer_set_break_lock>:
*/

void timer_set_break_lock(uint32_t timer_peripheral, uint32_t lock)
{
#if (defined(TIM1_BASE) || defined(TIM8_BASE))
	if ((timer_peripheral == TIM1) || (timer_peripheral == TIM8)) {
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <timer_set_break_lock+0x14>)
 800143a:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 800143e:	429a      	cmp	r2, r3
 8001440:	d102      	bne.n	8001448 <timer_set_break_lock+0x10>
		TIM_BDTR(timer_peripheral) |= lock;
 8001442:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001444:	4319      	orrs	r1, r3
 8001446:	6441      	str	r1, [r0, #68]	; 0x44
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40010000 	.word	0x40010000

08001450 <timer_generate_event>:
@param[in] event Unsigned int32. Event specification @ref tim_event_gen
*/

void timer_generate_event(uint32_t timer_peripheral, uint32_t event)
{
	TIM_EGR(timer_peripheral) |= event;
 8001450:	6943      	ldr	r3, [r0, #20]
 8001452:	4319      	orrs	r1, r3
 8001454:	6141      	str	r1, [r0, #20]
 8001456:	4770      	bx	lr

08001458 <flash_set_ws>:

void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <flash_set_ws+0x10>)
 800145a:	681a      	ldr	r2, [r3, #0]
	reg32 &= ~((1 << 0) | (1 << 1) | (1 << 2));
 800145c:	f022 0207 	bic.w	r2, r2, #7
	reg32 |= ws;
 8001460:	4310      	orrs	r0, r2
	FLASH_ACR = reg32;
 8001462:	6018      	str	r0, [r3, #0]
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023c00 	.word	0x40023c00

0800146c <rcc_peripheral_enable_clock>:
 * @li If register is RCC_APB2ENR, from @ref rcc_apb2enr_en
 */

void rcc_peripheral_enable_clock(volatile uint32_t *reg, uint32_t en)
{
	*reg |= en;
 800146c:	6803      	ldr	r3, [r0, #0]
 800146e:	4319      	orrs	r1, r3
 8001470:	6001      	str	r1, [r0, #0]
 8001472:	4770      	bx	lr

08001474 <rcc_peripheral_reset>:
 * @li If register is RCC_APB1RSTR, from @ref rcc_apb1rstr_rst
 * @li If register is RCC_APB2RSTR, from @ref rcc_apb2rstr_rst
 */
void rcc_peripheral_reset(volatile uint32_t *reg, uint32_t reset)
{
	*reg |= reset;
 8001474:	6803      	ldr	r3, [r0, #0]
 8001476:	4319      	orrs	r1, r3
 8001478:	6001      	str	r1, [r0, #0]
 800147a:	4770      	bx	lr

0800147c <rcc_peripheral_clear_reset>:
 * @li If register is RCC_APB1RSTR, from @ref rcc_apb1rstr_rst
 * @li If register is RCC_APB2RSTR, from @ref rcc_apb2rstr_rst
 */
void rcc_peripheral_clear_reset(volatile uint32_t *reg, uint32_t clear_reset)
{
	*reg &= ~clear_reset;
 800147c:	6803      	ldr	r3, [r0, #0]
 800147e:	ea23 0101 	bic.w	r1, r3, r1
 8001482:	6001      	str	r1, [r0, #0]
 8001484:	4770      	bx	lr
	...

08001488 <usbd_init>:
usbd_device *usbd_init(const usbd_driver *driver,
		       const struct usb_device_descriptor *dev,
		       const struct usb_config_descriptor *conf,
		       const char **strings, int num_strings,
		       uint8_t *control_buffer, uint16_t control_buffer_size)
{
 8001488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800148c:	4605      	mov	r5, r0
	usbd_device *usbd_dev;

	usbd_dev = driver->init();
 800148e:	6800      	ldr	r0, [r0, #0]
usbd_device *usbd_init(const usbd_driver *driver,
		       const struct usb_device_descriptor *dev,
		       const struct usb_config_descriptor *conf,
		       const char **strings, int num_strings,
		       uint8_t *control_buffer, uint16_t control_buffer_size)
{
 8001490:	4698      	mov	r8, r3
 8001492:	460e      	mov	r6, r1
 8001494:	4617      	mov	r7, r2
	usbd_device *usbd_dev;

	usbd_dev = driver->init();
 8001496:	4780      	blx	r0

	usbd_dev->driver = driver;
	usbd_dev->desc = dev;
	usbd_dev->config = conf;
	usbd_dev->strings = strings;
	usbd_dev->num_strings = num_strings;
 8001498:	9b06      	ldr	r3, [sp, #24]
{
	usbd_device *usbd_dev;

	usbd_dev = driver->init();

	usbd_dev->driver = driver;
 800149a:	f8c0 50c8 	str.w	r5, [r0, #200]	; 0xc8
	usbd_dev->desc = dev;
	usbd_dev->config = conf;
	usbd_dev->strings = strings;
	usbd_dev->num_strings = num_strings;
 800149e:	60c3      	str	r3, [r0, #12]
	usbd_dev->ctrl_buf = control_buffer;
 80014a0:	9b07      	ldr	r3, [sp, #28]
 80014a2:	6103      	str	r3, [r0, #16]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 80014a4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80014a8:	8283      	strh	r3, [r0, #20]

	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <usbd_init+0x38>)
 80014ac:	66c3      	str	r3, [r0, #108]	; 0x6c
	    _usbd_control_setup;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <usbd_init+0x3c>)
 80014b0:	6683      	str	r3, [r0, #104]	; 0x68
	    _usbd_control_out;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <usbd_init+0x40>)
	usbd_dev = driver->init();

	usbd_dev->driver = driver;
	usbd_dev->desc = dev;
	usbd_dev->config = conf;
	usbd_dev->strings = strings;
 80014b4:	e880 01c0 	stmia.w	r0, {r6, r7, r8}

	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
	    _usbd_control_setup;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
	    _usbd_control_out;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 80014b8:	6643      	str	r3, [r0, #100]	; 0x64
	    _usbd_control_in;

	return usbd_dev;
}
 80014ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014be:	bf00      	nop
 80014c0:	08001a8d 	.word	0x08001a8d
 80014c4:	08001ae7 	.word	0x08001ae7
 80014c8:	08001b6d 	.word	0x08001b6d

080014cc <usbd_register_reset_callback>:

void usbd_register_reset_callback(usbd_device *usbd_dev, void (*callback)(void))
{
	usbd_dev->user_callback_reset = callback;
 80014cc:	61c1      	str	r1, [r0, #28]
 80014ce:	4770      	bx	lr

080014d0 <usbd_poll>:
	}
}

/* Functions to wrap the low-level driver */
void usbd_poll(usbd_device *usbd_dev)
{
 80014d0:	b508      	push	{r3, lr}
	usbd_dev->driver->poll(usbd_dev);
 80014d2:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	4798      	blx	r3
 80014da:	bd08      	pop	{r3, pc}

080014dc <usbd_ep_setup>:
}

void usbd_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
		   uint16_t max_size,
		   void (*callback)(usbd_device *usbd_dev, uint8_t ep))
{
 80014dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 80014de:	9c06      	ldr	r4, [sp, #24]
 80014e0:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
 80014e4:	9400      	str	r4, [sp, #0]
 80014e6:	68ac      	ldr	r4, [r5, #8]
 80014e8:	47a0      	blx	r4
}
 80014ea:	b003      	add	sp, #12
 80014ec:	bd30      	pop	{r4, r5, pc}

080014ee <_usbd_reset>:
{
	usbd_dev->user_callback_sof = callback;
}

void _usbd_reset(usbd_device *usbd_dev)
{
 80014ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
	usbd_dev->current_address = 0;
 80014f0:	2400      	movs	r4, #0
{
	usbd_dev->user_callback_sof = callback;
}

void _usbd_reset(usbd_device *usbd_dev)
{
 80014f2:	4605      	mov	r5, r0
	usbd_dev->current_address = 0;
 80014f4:	7584      	strb	r4, [r0, #22]
	usbd_dev->current_config = 0;
 80014f6:	75c4      	strb	r4, [r0, #23]
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, 64, NULL);
 80014f8:	4621      	mov	r1, r4
 80014fa:	4622      	mov	r2, r4
 80014fc:	2340      	movs	r3, #64	; 0x40
 80014fe:	9400      	str	r4, [sp, #0]
 8001500:	f7ff ffec 	bl	80014dc <usbd_ep_setup>
	usbd_dev->driver->set_address(usbd_dev, 0);
 8001504:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
 8001508:	4628      	mov	r0, r5
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	4621      	mov	r1, r4
 800150e:	4798      	blx	r3

	if (usbd_dev->user_callback_reset) {
 8001510:	69eb      	ldr	r3, [r5, #28]
 8001512:	b103      	cbz	r3, 8001516 <_usbd_reset+0x28>
		usbd_dev->user_callback_reset();
 8001514:	4798      	blx	r3
	}
}
 8001516:	b003      	add	sp, #12
 8001518:	bd30      	pop	{r4, r5, pc}

0800151a <usbd_ep_write_packet>:
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
}

uint16_t usbd_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			 const void *buf, uint16_t len)
{
 800151a:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 800151c:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
 8001520:	69e4      	ldr	r4, [r4, #28]
 8001522:	47a0      	blx	r4
}
 8001524:	bd10      	pop	{r4, pc}

08001526 <usbd_ep_read_packet>:

uint16_t usbd_ep_read_packet(usbd_device *usbd_dev, uint8_t addr, void *buf,
			     uint16_t len)
{
 8001526:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 8001528:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
 800152c:	6a24      	ldr	r4, [r4, #32]
 800152e:	47a0      	blx	r4
}
 8001530:	bd10      	pop	{r4, pc}

08001532 <usbd_ep_stall_set>:

void usbd_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
 8001532:	b508      	push	{r3, lr}
	usbd_dev->driver->ep_stall_set(usbd_dev, addr, stall);
 8001534:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	4798      	blx	r3
 800153c:	bd08      	pop	{r3, pc}

0800153e <usbd_ep_stall_get>:
}

uint8_t usbd_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
 800153e:	b508      	push	{r3, lr}
	return usbd_dev->driver->ep_stall_get(usbd_dev, addr);
 8001540:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	4798      	blx	r3
}
 8001548:	bd08      	pop	{r3, pc}

0800154a <usb_standard_set_configuration>:
}

static int usb_standard_set_configuration(usbd_device *usbd_dev,
					  struct usb_setup_data *req,
					  uint8_t **buf, uint16_t *len)
{
 800154a:	b538      	push	{r3, r4, r5, lr}
	(void)req;
	(void)buf;
	(void)len;

	/* Is this correct, or should we reset alternate settings. */
	if (req->wValue == usbd_dev->current_config) {
 800154c:	884b      	ldrh	r3, [r1, #2]
 800154e:	7dc2      	ldrb	r2, [r0, #23]
 8001550:	429a      	cmp	r2, r3
}

static int usb_standard_set_configuration(usbd_device *usbd_dev,
					  struct usb_setup_data *req,
					  uint8_t **buf, uint16_t *len)
{
 8001552:	4604      	mov	r4, r0
 8001554:	460d      	mov	r5, r1
	(void)req;
	(void)buf;
	(void)len;

	/* Is this correct, or should we reset alternate settings. */
	if (req->wValue == usbd_dev->current_config) {
 8001556:	d00f      	beq.n	8001578 <usb_standard_set_configuration+0x2e>
		return 1;
	}

	usbd_dev->current_config = req->wValue;
 8001558:	75c3      	strb	r3, [r0, #23]

	/* Reset all endpoints. */
	usbd_dev->driver->ep_reset(usbd_dev);
 800155a:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	4798      	blx	r3

	if (usbd_dev->user_callback_set_config) {
 8001562:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8001566:	b13a      	cbz	r2, 8001578 <usb_standard_set_configuration+0x2e>
		/*
		 * Flush control callbacks. These will be reregistered
		 * by the user handler.
		 */
		for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
			usbd_dev->user_control_callback[i].cb = NULL;
 8001568:	2300      	movs	r3, #0
 800156a:	6463      	str	r3, [r4, #68]	; 0x44
 800156c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800156e:	6563      	str	r3, [r4, #84]	; 0x54
 8001570:	65e3      	str	r3, [r4, #92]	; 0x5c
		}

		usbd_dev->user_callback_set_config(usbd_dev, req->wValue);
 8001572:	4620      	mov	r0, r4
 8001574:	8869      	ldrh	r1, [r5, #2]
 8001576:	4790      	blx	r2
	}

	return 1;
}
 8001578:	2001      	movs	r0, #1
 800157a:	bd38      	pop	{r3, r4, r5, pc}

0800157c <usb_standard_get_configuration>:
					  struct usb_setup_data *req,
					  uint8_t **buf, uint16_t *len)
{
	(void)req;

	if (*len > 1) {
 800157c:	8819      	ldrh	r1, [r3, #0]
 800157e:	2901      	cmp	r1, #1
		*len = 1;
 8001580:	bf84      	itt	hi
 8001582:	2101      	movhi	r1, #1
 8001584:	8019      	strhhi	r1, [r3, #0]
	}
	(*buf)[0] = usbd_dev->current_config;
 8001586:	6813      	ldr	r3, [r2, #0]
 8001588:	7dc2      	ldrb	r2, [r0, #23]

	return 1;
}
 800158a:	2001      	movs	r0, #1
	(void)req;

	if (*len > 1) {
		*len = 1;
	}
	(*buf)[0] = usbd_dev->current_config;
 800158c:	701a      	strb	r2, [r3, #0]

	return 1;
}
 800158e:	4770      	bx	lr

08001590 <usb_standard_set_interface>:
	(void)usbd_dev;
	(void)req;
	(void)buf;

	/* FIXME: Adapt if we have more than one interface. */
	if (req->wValue != 0) {
 8001590:	884a      	ldrh	r2, [r1, #2]
 8001592:	b912      	cbnz	r2, 800159a <usb_standard_set_interface+0xa>
		return 0;
	}
	*len = 0;
 8001594:	801a      	strh	r2, [r3, #0]

	return 1;
 8001596:	2001      	movs	r0, #1
 8001598:	4770      	bx	lr
	(void)req;
	(void)buf;

	/* FIXME: Adapt if we have more than one interface. */
	if (req->wValue != 0) {
		return 0;
 800159a:	2000      	movs	r0, #0
	}
	*len = 0;

	return 1;
}
 800159c:	4770      	bx	lr

0800159e <usb_standard_get_interface>:
	(void)usbd_dev;
	(void)req;
	(void)buf;

	/* FIXME: Adapt if we have more than one interface. */
	*len = 1;
 800159e:	2001      	movs	r0, #1
 80015a0:	8018      	strh	r0, [r3, #0]
	(*buf)[0] = 0;
 80015a2:	6813      	ldr	r3, [r2, #0]
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]

	return 1;
}
 80015a8:	4770      	bx	lr

080015aa <usb_standard_device_get_status>:
	(void)usbd_dev;
	(void)req;

	/* bit 0: self powered */
	/* bit 1: remote wakeup */
	if (*len > 2) {
 80015aa:	8819      	ldrh	r1, [r3, #0]
 80015ac:	2902      	cmp	r1, #2
		*len = 2;
 80015ae:	bf84      	itt	hi
 80015b0:	2102      	movhi	r1, #2
 80015b2:	8019      	strhhi	r1, [r3, #0]
	}
	(*buf)[0] = 0;
 80015b4:	6811      	ldr	r1, [r2, #0]
 80015b6:	2300      	movs	r3, #0
 80015b8:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 80015ba:	6812      	ldr	r2, [r2, #0]

	return 1;
}
 80015bc:	2001      	movs	r0, #1
	/* bit 1: remote wakeup */
	if (*len > 2) {
		*len = 2;
	}
	(*buf)[0] = 0;
	(*buf)[1] = 0;
 80015be:	7053      	strb	r3, [r2, #1]

	return 1;
}
 80015c0:	4770      	bx	lr

080015c2 <usb_standard_interface_get_status>:
{
	(void)usbd_dev;
	(void)req;
	/* not defined */

	if (*len > 2) {
 80015c2:	8819      	ldrh	r1, [r3, #0]
 80015c4:	2902      	cmp	r1, #2
		*len = 2;
 80015c6:	bf84      	itt	hi
 80015c8:	2102      	movhi	r1, #2
 80015ca:	8019      	strhhi	r1, [r3, #0]
	}
	(*buf)[0] = 0;
 80015cc:	6811      	ldr	r1, [r2, #0]
 80015ce:	2300      	movs	r3, #0
 80015d0:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 80015d2:	6812      	ldr	r2, [r2, #0]

	return 1;
}
 80015d4:	2001      	movs	r0, #1

	if (*len > 2) {
		*len = 2;
	}
	(*buf)[0] = 0;
	(*buf)[1] = 0;
 80015d6:	7053      	strb	r3, [r2, #1]

	return 1;
}
 80015d8:	4770      	bx	lr

080015da <usb_standard_endpoint_get_status>:

static int usb_standard_endpoint_get_status(usbd_device *usbd_dev,
					    struct usb_setup_data *req,
					    uint8_t **buf, uint16_t *len)
{
 80015da:	b538      	push	{r3, r4, r5, lr}
 80015dc:	4614      	mov	r4, r2
	(void)req;

	if (*len > 2) {
 80015de:	881a      	ldrh	r2, [r3, #0]
		*len = 2;
	}
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 80015e0:	6825      	ldr	r5, [r4, #0]
					    struct usb_setup_data *req,
					    uint8_t **buf, uint16_t *len)
{
	(void)req;

	if (*len > 2) {
 80015e2:	2a02      	cmp	r2, #2
		*len = 2;
 80015e4:	bf84      	itt	hi
 80015e6:	2202      	movhi	r2, #2
 80015e8:	801a      	strhhi	r2, [r3, #0]
	}
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 80015ea:	8889      	ldrh	r1, [r1, #4]
 80015ec:	b2c9      	uxtb	r1, r1
 80015ee:	f7ff ffa6 	bl	800153e <usbd_ep_stall_get>
 80015f2:	3000      	adds	r0, #0
 80015f4:	bf18      	it	ne
 80015f6:	2001      	movne	r0, #1
 80015f8:	7028      	strb	r0, [r5, #0]
	(*buf)[1] = 0;
 80015fa:	6823      	ldr	r3, [r4, #0]
 80015fc:	2200      	movs	r2, #0
 80015fe:	705a      	strb	r2, [r3, #1]

	return 1;
}
 8001600:	2001      	movs	r0, #1
 8001602:	bd38      	pop	{r3, r4, r5, pc}

08001604 <usb_standard_endpoint_stall>:

static int usb_standard_endpoint_stall(usbd_device *usbd_dev,
				       struct usb_setup_data *req,
				       uint8_t **buf, uint16_t *len)
{
 8001604:	b508      	push	{r3, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 1);
 8001606:	8889      	ldrh	r1, [r1, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	b2c9      	uxtb	r1, r1
 800160c:	f7ff ff91 	bl	8001532 <usbd_ep_stall_set>

	return 1;
}
 8001610:	2001      	movs	r0, #1
 8001612:	bd08      	pop	{r3, pc}

08001614 <usb_standard_endpoint_unstall>:

static int usb_standard_endpoint_unstall(usbd_device *usbd_dev,
					 struct usb_setup_data *req,
					 uint8_t **buf, uint16_t *len)
{
 8001614:	b508      	push	{r3, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 0);
 8001616:	8889      	ldrh	r1, [r1, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	b2c9      	uxtb	r1, r1
 800161c:	f7ff ff89 	bl	8001532 <usbd_ep_stall_set>

	return 1;
}
 8001620:	2001      	movs	r0, #1
 8001622:	bd08      	pop	{r3, pc}

08001624 <usb_standard_set_address>:
}

static int usb_standard_set_address(usbd_device *usbd_dev,
				    struct usb_setup_data *req, uint8_t **buf,
				    uint16_t *len)
{
 8001624:	b510      	push	{r4, lr}
	(void)req;
	(void)buf;
	(void)len;

	/* The actual address is only latched at the STATUS IN stage. */
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
 8001626:	780a      	ldrb	r2, [r1, #0]
 8001628:	b972      	cbnz	r2, 8001648 <usb_standard_set_address+0x24>
 800162a:	884c      	ldrh	r4, [r1, #2]
 800162c:	2c7f      	cmp	r4, #127	; 0x7f
 800162e:	d80b      	bhi.n	8001648 <usb_standard_set_address+0x24>

	/*
	 * Special workaround for STM32F10[57] that require the address
	 * to be set here. This is undocumented!
	 */
	if (usbd_dev->driver->set_address_before_status) {
 8001630:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
	/* The actual address is only latched at the STATUS IN stage. */
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
		return 0;
	}

	usbd_dev->current_address = req->wValue;
 8001634:	7584      	strb	r4, [r0, #22]

	/*
	 * Special workaround for STM32F10[57] that require the address
	 * to be set here. This is undocumented!
	 */
	if (usbd_dev->driver->set_address_before_status) {
 8001636:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800163a:	b11a      	cbz	r2, 8001644 <usb_standard_set_address+0x20>
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
 800163c:	8849      	ldrh	r1, [r1, #2]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	b2c9      	uxtb	r1, r1
 8001642:	4798      	blx	r3
	}

	return 1;
 8001644:	2001      	movs	r0, #1
 8001646:	bd10      	pop	{r4, pc}
	(void)buf;
	(void)len;

	/* The actual address is only latched at the STATUS IN stage. */
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
		return 0;
 8001648:	2000      	movs	r0, #0
	if (usbd_dev->driver->set_address_before_status) {
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
	}

	return 1;
}
 800164a:	bd10      	pop	{r4, pc}

0800164c <usb_standard_get_descriptor>:
}

static int usb_standard_get_descriptor(usbd_device *usbd_dev,
				       struct usb_setup_data *req,
				       uint8_t **buf, uint16_t *len)
{
 800164c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001650:	4604      	mov	r4, r0
	int i, array_idx, descr_idx;
	struct usb_string_descriptor *sd;

	descr_idx = usb_descriptor_index(req->wValue);
 8001652:	8848      	ldrh	r0, [r1, #2]
}

static int usb_standard_get_descriptor(usbd_device *usbd_dev,
				       struct usb_setup_data *req,
				       uint8_t **buf, uint16_t *len)
{
 8001654:	461d      	mov	r5, r3
	return wValue >> 8;
}

static int usb_descriptor_index(uint16_t wValue)
{
	return wValue & 0xFF;
 8001656:	b2c3      	uxtb	r3, r0
	int i, array_idx, descr_idx;
	struct usb_string_descriptor *sd;

	descr_idx = usb_descriptor_index(req->wValue);

	switch (usb_descriptor_type(req->wValue)) {
 8001658:	0a00      	lsrs	r0, r0, #8
 800165a:	2802      	cmp	r0, #2
}

static int usb_standard_get_descriptor(usbd_device *usbd_dev,
				       struct usb_setup_data *req,
				       uint8_t **buf, uint16_t *len)
{
 800165c:	b087      	sub	sp, #28
 800165e:	4617      	mov	r7, r2
	int i, array_idx, descr_idx;
	struct usb_string_descriptor *sd;

	descr_idx = usb_descriptor_index(req->wValue);

	switch (usb_descriptor_type(req->wValue)) {
 8001660:	d00f      	beq.n	8001682 <usb_standard_get_descriptor+0x36>
 8001662:	2803      	cmp	r0, #3
 8001664:	f000 80cb 	beq.w	80017fe <usb_standard_get_descriptor+0x1b2>
 8001668:	2801      	cmp	r0, #1
 800166a:	f040 8103 	bne.w	8001874 <usb_standard_get_descriptor+0x228>
	case USB_DT_DEVICE:
		*buf = (uint8_t *) usbd_dev->desc;
 800166e:	6823      	ldr	r3, [r4, #0]
 8001670:	6013      	str	r3, [r2, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 8001672:	6823      	ldr	r3, [r4, #0]
 8001674:	882a      	ldrh	r2, [r5, #0]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	bf38      	it	cc
 800167c:	4613      	movcc	r3, r2
 800167e:	802b      	strh	r3, [r5, #0]
		return USBD_REQ_HANDLED;
 8001680:	e0f9      	b.n	8001876 <usb_standard_get_descriptor+0x22a>
	case USB_DT_CONFIGURATION:
		*buf = usbd_dev->ctrl_buf;
 8001682:	6920      	ldr	r0, [r4, #16]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 8001684:	882e      	ldrh	r6, [r5, #0]
	case USB_DT_DEVICE:
		*buf = (uint8_t *) usbd_dev->desc;
		*len = MIN(*len, usbd_dev->desc->bLength);
		return USBD_REQ_HANDLED;
	case USB_DT_CONFIGURATION:
		*buf = usbd_dev->ctrl_buf;
 8001686:	6010      	str	r0, [r2, #0]

static uint16_t build_config_descriptor(usbd_device *usbd_dev,
				   uint8_t index, uint8_t *buf, uint16_t len)
{
	uint8_t *tmpbuf = buf;
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8001688:	270d      	movs	r7, #13
 800168a:	f8d4 8004 	ldr.w	r8, [r4, #4]
	case USB_DT_DEVICE:
		*buf = (uint8_t *) usbd_dev->desc;
		*len = MIN(*len, usbd_dev->desc->bLength);
		return USBD_REQ_HANDLED;
	case USB_DT_CONFIGURATION:
		*buf = usbd_dev->ctrl_buf;
 800168e:	9001      	str	r0, [sp, #4]

static uint16_t build_config_descriptor(usbd_device *usbd_dev,
				   uint8_t index, uint8_t *buf, uint16_t len)
{
	uint8_t *tmpbuf = buf;
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8001690:	435f      	muls	r7, r3
 8001692:	eb08 0307 	add.w	r3, r8, r7
	uint16_t count, total = 0, totallen = 0;
	uint16_t i, j, k;

	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8001696:	f818 4007 	ldrb.w	r4, [r8, r7]

static uint16_t build_config_descriptor(usbd_device *usbd_dev,
				   uint8_t index, uint8_t *buf, uint16_t len)
{
	uint8_t *tmpbuf = buf;
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 800169a:	9302      	str	r3, [sp, #8]
	uint16_t count, total = 0, totallen = 0;
	uint16_t i, j, k;

	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 800169c:	42a6      	cmp	r6, r4
 800169e:	bf38      	it	cc
 80016a0:	4634      	movcc	r4, r6
 80016a2:	4619      	mov	r1, r3
 80016a4:	4622      	mov	r2, r4
 80016a6:	f001 f8bb 	bl	8002820 <memcpy>
	buf += count;
 80016aa:	9b01      	ldr	r3, [sp, #4]
	len -= count;
	total += count;
	totallen += cfg->bLength;
 80016ac:	f818 7007 	ldrb.w	r7, [r8, r7]
	uint16_t count, total = 0, totallen = 0;
	uint16_t i, j, k;

	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
	buf += count;
	len -= count;
 80016b0:	1b36      	subs	r6, r6, r4
	total += count;
	totallen += cfg->bLength;

	/* For each interface... */
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 80016b2:	2000      	movs	r0, #0
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
	uint16_t count, total = 0, totallen = 0;
	uint16_t i, j, k;

	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
	buf += count;
 80016b4:	4423      	add	r3, r4
	len -= count;
 80016b6:	b2b6      	uxth	r6, r6
	total += count;
	totallen += cfg->bLength;

	/* For each interface... */
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 80016b8:	9003      	str	r0, [sp, #12]
 80016ba:	9802      	ldr	r0, [sp, #8]
 80016bc:	9903      	ldr	r1, [sp, #12]
 80016be:	7902      	ldrb	r2, [r0, #4]
 80016c0:	428a      	cmp	r2, r1
 80016c2:	f240 8098 	bls.w	80017f6 <usb_standard_get_descriptor+0x1aa>
		/* Interface Association Descriptor, if any */
		if (cfg->interface[i].iface_assoc) {
 80016c6:	9903      	ldr	r1, [sp, #12]
 80016c8:	9802      	ldr	r0, [sp, #8]
 80016ca:	220c      	movs	r2, #12
 80016cc:	434a      	muls	r2, r1
 80016ce:	9205      	str	r2, [sp, #20]
 80016d0:	9905      	ldr	r1, [sp, #20]
 80016d2:	f8d0 2009 	ldr.w	r2, [r0, #9]
 80016d6:	440a      	add	r2, r1
 80016d8:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80016dc:	f1b8 0f00 	cmp.w	r8, #0
 80016e0:	d014      	beq.n	800170c <usb_standard_get_descriptor+0xc0>
			const struct usb_iface_assoc_descriptor *assoc =
					cfg->interface[i].iface_assoc;
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 80016e2:	f898 9000 	ldrb.w	r9, [r8]
 80016e6:	454e      	cmp	r6, r9
 80016e8:	bf38      	it	cc
 80016ea:	46b1      	movcc	r9, r6
 80016ec:	4618      	mov	r0, r3
 80016ee:	464a      	mov	r2, r9
 80016f0:	4641      	mov	r1, r8
 80016f2:	f001 f895 	bl	8002820 <memcpy>
			buf += count;
			len -= count;
			total += count;
			totallen += assoc->bLength;
 80016f6:	f898 2000 	ldrb.w	r2, [r8]
	for (i = 0; i < cfg->bNumInterfaces; i++) {
		/* Interface Association Descriptor, if any */
		if (cfg->interface[i].iface_assoc) {
			const struct usb_iface_assoc_descriptor *assoc =
					cfg->interface[i].iface_assoc;
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 80016fa:	4603      	mov	r3, r0
			buf += count;
			len -= count;
 80016fc:	ebc9 0606 	rsb	r6, r9, r6
			total += count;
 8001700:	444c      	add	r4, r9
			totallen += assoc->bLength;
 8001702:	4417      	add	r7, r2
		/* Interface Association Descriptor, if any */
		if (cfg->interface[i].iface_assoc) {
			const struct usb_iface_assoc_descriptor *assoc =
					cfg->interface[i].iface_assoc;
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
			buf += count;
 8001704:	444b      	add	r3, r9
			len -= count;
 8001706:	b2b6      	uxth	r6, r6
			total += count;
 8001708:	b2a4      	uxth	r4, r4
			totallen += assoc->bLength;
 800170a:	b2bf      	uxth	r7, r7
			buf += count;
			len -= count;
			total += count;
			totallen += iface->extralen;
			/* For each endpoint... */
			for (k = 0; k < iface->bNumEndpoints; k++) {
 800170c:	2200      	movs	r2, #0
			len -= count;
			total += count;
			totallen += assoc->bLength;
		}
		/* For each alternate setting... */
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 800170e:	9802      	ldr	r0, [sp, #8]
 8001710:	9204      	str	r2, [sp, #16]
 8001712:	9905      	ldr	r1, [sp, #20]
 8001714:	f8d0 2009 	ldr.w	r2, [r0, #9]
 8001718:	9805      	ldr	r0, [sp, #20]
 800171a:	4411      	add	r1, r2
 800171c:	5812      	ldr	r2, [r2, r0]
 800171e:	9804      	ldr	r0, [sp, #16]
 8001720:	4290      	cmp	r0, r2
 8001722:	da63      	bge.n	80017ec <usb_standard_get_descriptor+0x1a0>
			const struct usb_interface_descriptor *iface =
					&cfg->interface[i].altsetting[j];
 8001724:	9804      	ldr	r0, [sp, #16]
			total += count;
			totallen += assoc->bLength;
		}
		/* For each alternate setting... */
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
			const struct usb_interface_descriptor *iface =
 8001726:	f8d1 b008 	ldr.w	fp, [r1, #8]
					&cfg->interface[i].altsetting[j];
 800172a:	f04f 0a15 	mov.w	sl, #21
 800172e:	fb0a fa00 	mul.w	sl, sl, r0
			total += count;
			totallen += assoc->bLength;
		}
		/* For each alternate setting... */
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
			const struct usb_interface_descriptor *iface =
 8001732:	eb0b 080a 	add.w	r8, fp, sl
					&cfg->interface[i].altsetting[j];
			/* Copy interface descriptor. */
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8001736:	f81b 900a 	ldrb.w	r9, [fp, sl]
 800173a:	454e      	cmp	r6, r9
 800173c:	bf38      	it	cc
 800173e:	46b1      	movcc	r9, r6
 8001740:	464a      	mov	r2, r9
 8001742:	4618      	mov	r0, r3
 8001744:	4641      	mov	r1, r8
 8001746:	f001 f86b 	bl	8002820 <memcpy>
 800174a:	4603      	mov	r3, r0
			buf += count;
 800174c:	444b      	add	r3, r9
			len -= count;
 800174e:	ebc9 0606 	rsb	r6, r9, r6
			total += count;
 8001752:	44a1      	add	r9, r4
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
			       count = MIN(len, iface->extralen));
 8001754:	f8d8 4011 	ldr.w	r4, [r8, #17]
			buf += count;
			len -= count;
			total += count;
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
 8001758:	f8d8 100d 	ldr.w	r1, [r8, #13]
			/* Copy interface descriptor. */
			memcpy(buf, iface, count = MIN(len, iface->bLength));
			buf += count;
			len -= count;
			total += count;
			totallen += iface->bLength;
 800175c:	f81b a00a 	ldrb.w	sl, [fp, sl]
			const struct usb_interface_descriptor *iface =
					&cfg->interface[i].altsetting[j];
			/* Copy interface descriptor. */
			memcpy(buf, iface, count = MIN(len, iface->bLength));
			buf += count;
			len -= count;
 8001760:	b2b6      	uxth	r6, r6
			total += count;
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
			       count = MIN(len, iface->extralen));
 8001762:	42a6      	cmp	r6, r4
 8001764:	bfb8      	it	lt
 8001766:	4634      	movlt	r4, r6
 8001768:	b2a4      	uxth	r4, r4
			buf += count;
			len -= count;
			total += count;
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
 800176a:	4622      	mov	r2, r4
 800176c:	4618      	mov	r0, r3
 800176e:	f001 f857 	bl	8002820 <memcpy>
			       count = MIN(len, iface->extralen));
			buf += count;
			len -= count;
			total += count;
			totallen += iface->extralen;
 8001772:	f8d8 2011 	ldr.w	r2, [r8, #17]
					&cfg->interface[i].altsetting[j];
			/* Copy interface descriptor. */
			memcpy(buf, iface, count = MIN(len, iface->bLength));
			buf += count;
			len -= count;
			total += count;
 8001776:	fa1f f989 	uxth.w	r9, r9
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
 800177a:	4603      	mov	r3, r0
			/* Copy interface descriptor. */
			memcpy(buf, iface, count = MIN(len, iface->bLength));
			buf += count;
			len -= count;
			total += count;
			totallen += iface->bLength;
 800177c:	4492      	add	sl, r2
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
			       count = MIN(len, iface->extralen));
			buf += count;
			len -= count;
 800177e:	1b36      	subs	r6, r6, r4
			total += count;
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
			       count = MIN(len, iface->extralen));
			buf += count;
 8001780:	4423      	add	r3, r4
			len -= count;
			total += count;
			totallen += iface->extralen;
 8001782:	fa17 f78a 	uxtah	r7, r7, sl
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
			       count = MIN(len, iface->extralen));
			buf += count;
			len -= count;
			total += count;
 8001786:	444c      	add	r4, r9
			totallen += iface->bLength;
			/* Copy extra bytes (function descriptors). */
			memcpy(buf, iface->extra,
			       count = MIN(len, iface->extralen));
			buf += count;
			len -= count;
 8001788:	b2b6      	uxth	r6, r6
			total += count;
 800178a:	b2a4      	uxth	r4, r4
			totallen += iface->extralen;
 800178c:	b2bf      	uxth	r7, r7
			/* For each endpoint... */
			for (k = 0; k < iface->bNumEndpoints; k++) {
 800178e:	f04f 0900 	mov.w	r9, #0
 8001792:	f898 2004 	ldrb.w	r2, [r8, #4]
 8001796:	454a      	cmp	r2, r9
 8001798:	d924      	bls.n	80017e4 <usb_standard_get_descriptor+0x198>
				const struct usb_endpoint_descriptor *ep =
				    &iface->endpoint[k];
 800179a:	f04f 0b07 	mov.w	fp, #7
 800179e:	f8d8 c009 	ldr.w	ip, [r8, #9]
 80017a2:	fb0b fb09 	mul.w	fp, fp, r9
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 80017a6:	4618      	mov	r0, r3
 80017a8:	f81c a00b 	ldrb.w	sl, [ip, fp]
 80017ac:	f8cd c000 	str.w	ip, [sp]
 80017b0:	4556      	cmp	r6, sl
 80017b2:	bf38      	it	cc
 80017b4:	46b2      	movcc	sl, r6
 80017b6:	eb0c 010b 	add.w	r1, ip, fp
 80017ba:	4652      	mov	r2, sl
 80017bc:	f001 f830 	bl	8002820 <memcpy>
				buf += count;
				len -= count;
				total += count;
				totallen += ep->bLength;
 80017c0:	f8dd c000 	ldr.w	ip, [sp]
 80017c4:	f81c 200b 	ldrb.w	r2, [ip, fp]
			totallen += iface->extralen;
			/* For each endpoint... */
			for (k = 0; k < iface->bNumEndpoints; k++) {
				const struct usb_endpoint_descriptor *ep =
				    &iface->endpoint[k];
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 80017c8:	4603      	mov	r3, r0
				buf += count;
				len -= count;
 80017ca:	ebca 0606 	rsb	r6, sl, r6
				total += count;
 80017ce:	4454      	add	r4, sl
				totallen += ep->bLength;
 80017d0:	4417      	add	r7, r2
			buf += count;
			len -= count;
			total += count;
			totallen += iface->extralen;
			/* For each endpoint... */
			for (k = 0; k < iface->bNumEndpoints; k++) {
 80017d2:	f109 0901 	add.w	r9, r9, #1
				const struct usb_endpoint_descriptor *ep =
				    &iface->endpoint[k];
				memcpy(buf, ep, count = MIN(len, ep->bLength));
				buf += count;
 80017d6:	4453      	add	r3, sl
				len -= count;
 80017d8:	b2b6      	uxth	r6, r6
				total += count;
 80017da:	b2a4      	uxth	r4, r4
				totallen += ep->bLength;
 80017dc:	b2bf      	uxth	r7, r7
			buf += count;
			len -= count;
			total += count;
			totallen += iface->extralen;
			/* For each endpoint... */
			for (k = 0; k < iface->bNumEndpoints; k++) {
 80017de:	fa1f f989 	uxth.w	r9, r9
 80017e2:	e7d6      	b.n	8001792 <usb_standard_get_descriptor+0x146>
			len -= count;
			total += count;
			totallen += assoc->bLength;
		}
		/* For each alternate setting... */
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 80017e4:	9904      	ldr	r1, [sp, #16]
 80017e6:	1c4a      	adds	r2, r1, #1
 80017e8:	b292      	uxth	r2, r2
 80017ea:	e790      	b.n	800170e <usb_standard_get_descriptor+0xc2>
	len -= count;
	total += count;
	totallen += cfg->bLength;

	/* For each interface... */
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 80017ec:	9903      	ldr	r1, [sp, #12]
 80017ee:	1c4a      	adds	r2, r1, #1
 80017f0:	b292      	uxth	r2, r2
 80017f2:	9203      	str	r2, [sp, #12]
 80017f4:	e761      	b.n	80016ba <usb_standard_get_descriptor+0x6e>
			}
		}
	}

	/* Fill in wTotalLength. */
	*(uint16_t *)(tmpbuf + 2) = totallen;
 80017f6:	9b01      	ldr	r3, [sp, #4]
 80017f8:	805f      	strh	r7, [r3, #2]
		*buf = (uint8_t *) usbd_dev->desc;
		*len = MIN(*len, usbd_dev->desc->bLength);
		return USBD_REQ_HANDLED;
	case USB_DT_CONFIGURATION:
		*buf = usbd_dev->ctrl_buf;
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 80017fa:	802c      	strh	r4, [r5, #0]
 80017fc:	e038      	b.n	8001870 <usb_standard_get_descriptor+0x224>
		return USBD_REQ_HANDLED;
	case USB_DT_STRING:
		sd = (struct usb_string_descriptor *)usbd_dev->ctrl_buf;
 80017fe:	6926      	ldr	r6, [r4, #16]

		if (descr_idx == 0) {
 8001800:	b953      	cbnz	r3, 8001818 <usb_standard_get_descriptor+0x1cc>
			/* Send sane Language ID descriptor... */
			sd->wData[0] = USB_LANGID_ENGLISH_US;
 8001802:	2309      	movs	r3, #9
 8001804:	70b3      	strb	r3, [r6, #2]
 8001806:	2304      	movs	r3, #4
 8001808:	70f3      	strb	r3, [r6, #3]
			sd->bLength = sizeof(sd->bLength) +
 800180a:	7033      	strb	r3, [r6, #0]
				      sizeof(sd->bDescriptorType) +
				      sizeof(sd->wData[0]);

			*len = MIN(*len, sd->bLength);
 800180c:	882b      	ldrh	r3, [r5, #0]
 800180e:	2b04      	cmp	r3, #4
 8001810:	bf28      	it	cs
 8001812:	2304      	movcs	r3, #4
 8001814:	802b      	strh	r3, [r5, #0]
 8001816:	e028      	b.n	800186a <usb_standard_get_descriptor+0x21e>
		} else {
			array_idx = descr_idx - 1;

			if (!usbd_dev->strings) {
 8001818:	68a0      	ldr	r0, [r4, #8]
				      sizeof(sd->bDescriptorType) +
				      sizeof(sd->wData[0]);

			*len = MIN(*len, sd->bLength);
		} else {
			array_idx = descr_idx - 1;
 800181a:	3b01      	subs	r3, #1

			if (!usbd_dev->strings) {
 800181c:	b358      	cbz	r0, 8001876 <usb_standard_get_descriptor+0x22a>
				/* Device doesn't support strings. */
				return USBD_REQ_NOTSUPP;
			}

			/* Check that string index is in range. */
			if (array_idx >= usbd_dev->num_strings) {
 800181e:	68e2      	ldr	r2, [r4, #12]
 8001820:	4293      	cmp	r3, r2
 8001822:	da27      	bge.n	8001874 <usb_standard_get_descriptor+0x228>
				return USBD_REQ_NOTSUPP;
			}

			/* Strings with Language ID differnet from
			 * USB_LANGID_ENGLISH_US are not supported */
			if (req->wIndex != USB_LANGID_ENGLISH_US) {
 8001824:	8889      	ldrh	r1, [r1, #4]
 8001826:	f240 4209 	movw	r2, #1033	; 0x409
 800182a:	4291      	cmp	r1, r2
 800182c:	d122      	bne.n	8001874 <usb_standard_get_descriptor+0x228>
			}

			/* Ths string is returned as UTF16, hence the
			 * multiplication
			 */
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 800182e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8001832:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001836:	f001 fa9d 	bl	8002d74 <strlen>
 800183a:	3001      	adds	r0, #1
 800183c:	0043      	lsls	r3, r0, #1
 800183e:	b2db      	uxtb	r3, r3
 8001840:	7033      	strb	r3, [r6, #0]
				      sizeof(sd->bLength) +
				      sizeof(sd->bDescriptorType);

			*len = MIN(*len, sd->bLength);
 8001842:	882a      	ldrh	r2, [r5, #0]
 8001844:	4293      	cmp	r3, r2
 8001846:	bf28      	it	cs
 8001848:	4613      	movcs	r3, r2
 800184a:	802b      	strh	r3, [r5, #0]

			for (i = 0; i < (*len / 2) - 1; i++) {
 800184c:	2300      	movs	r3, #0
 800184e:	882a      	ldrh	r2, [r5, #0]
 8001850:	0852      	lsrs	r2, r2, #1
 8001852:	3a01      	subs	r2, #1
 8001854:	4293      	cmp	r3, r2
 8001856:	da08      	bge.n	800186a <usb_standard_get_descriptor+0x21e>
				sd->wData[i] =
					usbd_dev->strings[array_idx][i];
 8001858:	68a2      	ldr	r2, [r4, #8]
 800185a:	f852 2008 	ldr.w	r2, [r2, r8]
				      sizeof(sd->bDescriptorType);

			*len = MIN(*len, sd->bLength);

			for (i = 0; i < (*len / 2) - 1; i++) {
				sd->wData[i] =
 800185e:	5cd1      	ldrb	r1, [r2, r3]
 8001860:	eb06 0243 	add.w	r2, r6, r3, lsl #1
				      sizeof(sd->bLength) +
				      sizeof(sd->bDescriptorType);

			*len = MIN(*len, sd->bLength);

			for (i = 0; i < (*len / 2) - 1; i++) {
 8001864:	3301      	adds	r3, #1
				sd->wData[i] =
 8001866:	8051      	strh	r1, [r2, #2]
 8001868:	e7f1      	b.n	800184e <usb_standard_get_descriptor+0x202>
					usbd_dev->strings[array_idx][i];
			}
		}

		sd->bDescriptorType = USB_DT_STRING;
 800186a:	2303      	movs	r3, #3
 800186c:	7073      	strb	r3, [r6, #1]
		*buf = (uint8_t *)sd;
 800186e:	603e      	str	r6, [r7, #0]

		return USBD_REQ_HANDLED;
 8001870:	2001      	movs	r0, #1
 8001872:	e000      	b.n	8001876 <usb_standard_get_descriptor+0x22a>
		} else {
			array_idx = descr_idx - 1;

			if (!usbd_dev->strings) {
				/* Device doesn't support strings. */
				return USBD_REQ_NOTSUPP;
 8001874:	2000      	movs	r0, #0
		*buf = (uint8_t *)sd;

		return USBD_REQ_HANDLED;
	}
	return USBD_REQ_NOTSUPP;
}
 8001876:	b007      	add	sp, #28
 8001878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800187c <usbd_register_set_config_callback>:

void usbd_register_set_config_callback(usbd_device *usbd_dev,
				       void (*callback)(usbd_device *usbd_dev,
				       uint16_t wValue))
{
	usbd_dev->user_callback_set_config = callback;
 800187c:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
 8001880:	4770      	bx	lr
	...

08001884 <_usbd_standard_request_device>:
/**@}*/

int _usbd_standard_request_device(usbd_device *usbd_dev,
				  struct usb_setup_data *req, uint8_t **buf,
				  uint16_t *len)
{
 8001884:	b538      	push	{r3, r4, r5, lr}
	int (*command)(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8001886:	784c      	ldrb	r4, [r1, #1]
 8001888:	2c09      	cmp	r4, #9
 800188a:	d805      	bhi.n	8001898 <_usbd_standard_request_device+0x14>
 800188c:	4d04      	ldr	r5, [pc, #16]	; (80018a0 <_usbd_standard_request_device+0x1c>)
 800188e:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
	case USB_REQ_SET_DESCRIPTOR:
		/* SET_DESCRIPTOR is optional and not implemented. */
		break;
	}

	if (!command) {
 8001892:	b11c      	cbz	r4, 800189c <_usbd_standard_request_device+0x18>
		return 0;
	}

	return command(usbd_dev, req, buf, len);
 8001894:	47a0      	blx	r4
 8001896:	bd38      	pop	{r3, r4, r5, pc}
		/* SET_DESCRIPTOR is optional and not implemented. */
		break;
	}

	if (!command) {
		return 0;
 8001898:	2000      	movs	r0, #0
 800189a:	bd38      	pop	{r3, r4, r5, pc}
 800189c:	4620      	mov	r0, r4
	}

	return command(usbd_dev, req, buf, len);
}
 800189e:	bd38      	pop	{r3, r4, r5, pc}
 80018a0:	08007d0c 	.word	0x08007d0c

080018a4 <_usbd_standard_request_interface>:

int _usbd_standard_request_interface(usbd_device *usbd_dev,
				     struct usb_setup_data *req, uint8_t **buf,
				     uint16_t *len)
{
 80018a4:	b538      	push	{r3, r4, r5, lr}
	int (*command)(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 80018a6:	784c      	ldrb	r4, [r1, #1]
 80018a8:	2c0b      	cmp	r4, #11
 80018aa:	d805      	bhi.n	80018b8 <_usbd_standard_request_interface+0x14>
 80018ac:	4d04      	ldr	r5, [pc, #16]	; (80018c0 <_usbd_standard_request_interface+0x1c>)
 80018ae:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
	case USB_REQ_GET_STATUS:
		command = usb_standard_interface_get_status;
		break;
	}

	if (!command) {
 80018b2:	b11c      	cbz	r4, 80018bc <_usbd_standard_request_interface+0x18>
		return 0;
	}

	return command(usbd_dev, req, buf, len);
 80018b4:	47a0      	blx	r4
 80018b6:	bd38      	pop	{r3, r4, r5, pc}
		command = usb_standard_interface_get_status;
		break;
	}

	if (!command) {
		return 0;
 80018b8:	2000      	movs	r0, #0
 80018ba:	bd38      	pop	{r3, r4, r5, pc}
 80018bc:	4620      	mov	r0, r4
	}

	return command(usbd_dev, req, buf, len);
}
 80018be:	bd38      	pop	{r3, r4, r5, pc}
 80018c0:	08007d34 	.word	0x08007d34

080018c4 <_usbd_standard_request_endpoint>:

int _usbd_standard_request_endpoint(usbd_device *usbd_dev,
				    struct usb_setup_data *req, uint8_t **buf,
				    uint16_t *len)
{
 80018c4:	b510      	push	{r4, lr}
	int (*command) (usbd_device *usbd_dev, struct usb_setup_data *req,
			uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 80018c6:	784c      	ldrb	r4, [r1, #1]
 80018c8:	2c01      	cmp	r4, #1
 80018ca:	d003      	beq.n	80018d4 <_usbd_standard_request_endpoint+0x10>
 80018cc:	d309      	bcc.n	80018e2 <_usbd_standard_request_endpoint+0x1e>
 80018ce:	2c03      	cmp	r4, #3
 80018d0:	d003      	beq.n	80018da <_usbd_standard_request_endpoint+0x16>
 80018d2:	e004      	b.n	80018de <_usbd_standard_request_endpoint+0x1a>
	case USB_REQ_CLEAR_FEATURE:
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 80018d4:	884c      	ldrh	r4, [r1, #2]
 80018d6:	b134      	cbz	r4, 80018e6 <_usbd_standard_request_endpoint+0x22>
 80018d8:	e001      	b.n	80018de <_usbd_standard_request_endpoint+0x1a>
			command = usb_standard_endpoint_unstall;
		}
		break;
	case USB_REQ_SET_FEATURE:
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 80018da:	884c      	ldrh	r4, [r1, #2]
 80018dc:	b12c      	cbz	r4, 80018ea <_usbd_standard_request_endpoint+0x26>
		 */
		break;
	}

	if (!command) {
		return 0;
 80018de:	2000      	movs	r0, #0
 80018e0:	bd10      	pop	{r4, pc}
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
			command = usb_standard_endpoint_stall;
		}
		break;
	case USB_REQ_GET_STATUS:
		command = usb_standard_endpoint_get_status;
 80018e2:	4c03      	ldr	r4, [pc, #12]	; (80018f0 <_usbd_standard_request_endpoint+0x2c>)
 80018e4:	e002      	b.n	80018ec <_usbd_standard_request_endpoint+0x28>
			uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
	case USB_REQ_CLEAR_FEATURE:
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
			command = usb_standard_endpoint_unstall;
 80018e6:	4c03      	ldr	r4, [pc, #12]	; (80018f4 <_usbd_standard_request_endpoint+0x30>)
 80018e8:	e000      	b.n	80018ec <_usbd_standard_request_endpoint+0x28>
		}
		break;
	case USB_REQ_SET_FEATURE:
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
			command = usb_standard_endpoint_stall;
 80018ea:	4c03      	ldr	r4, [pc, #12]	; (80018f8 <_usbd_standard_request_endpoint+0x34>)

	if (!command) {
		return 0;
	}

	return command(usbd_dev, req, buf, len);
 80018ec:	47a0      	blx	r4
}
 80018ee:	bd10      	pop	{r4, pc}
 80018f0:	080015db 	.word	0x080015db
 80018f4:	08001615 	.word	0x08001615
 80018f8:	08001605 	.word	0x08001605

080018fc <_usbd_standard_request>:

int _usbd_standard_request(usbd_device *usbd_dev, struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
 80018fc:	b510      	push	{r4, lr}
	/* FIXME: Have class/vendor requests as well. */
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) {
 80018fe:	780c      	ldrb	r4, [r1, #0]
 8001900:	f014 0f60 	tst.w	r4, #96	; 0x60
 8001904:	d112      	bne.n	800192c <_usbd_standard_request+0x30>
		return 0;
	}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
 8001906:	f004 041f 	and.w	r4, r4, #31
 800190a:	2c01      	cmp	r4, #1
 800190c:	d00a      	beq.n	8001924 <_usbd_standard_request+0x28>
 800190e:	d305      	bcc.n	800191c <_usbd_standard_request+0x20>
 8001910:	2c02      	cmp	r4, #2
 8001912:	d10b      	bne.n	800192c <_usbd_standard_request+0x30>
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
	default:
		return 0;
	}
}
 8001914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
	case USB_REQ_TYPE_INTERFACE:
		return _usbd_standard_request_interface(usbd_dev, req,
							buf, len);
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
 8001918:	f7ff bfd4 	b.w	80018c4 <_usbd_standard_request_endpoint>
	default:
		return 0;
	}
}
 800191c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return 0;
	}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
	case USB_REQ_TYPE_DEVICE:
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
 8001920:	f7ff bfb0 	b.w	8001884 <_usbd_standard_request_device>
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
	default:
		return 0;
	}
}
 8001924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
	case USB_REQ_TYPE_DEVICE:
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
	case USB_REQ_TYPE_INTERFACE:
		return _usbd_standard_request_interface(usbd_dev, req,
 8001928:	f7ff bfbc 	b.w	80018a4 <_usbd_standard_request_interface>
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
	default:
		return 0;
	}
}
 800192c:	2000      	movs	r0, #0
 800192e:	bd10      	pop	{r4, pc}

08001930 <stall_transaction>:
 * According to the USB 2.0 specification, section 8.5.3, when a control
 * transfer is stalled, the pipe becomes idle. We provide one utility to stall
 * a transaction to reduce boilerplate code.
 */
static void stall_transaction(usbd_device *usbd_dev)
{
 8001930:	b510      	push	{r4, lr}
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8001932:	2100      	movs	r1, #0
 * According to the USB 2.0 specification, section 8.5.3, when a control
 * transfer is stalled, the pipe becomes idle. We provide one utility to stall
 * a transaction to reduce boilerplate code.
 */
static void stall_transaction(usbd_device *usbd_dev)
{
 8001934:	4604      	mov	r4, r0
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8001936:	2201      	movs	r2, #1
 8001938:	f7ff fdfb 	bl	8001532 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 800193c:	2300      	movs	r3, #0
 800193e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001942:	bd10      	pop	{r4, pc}

08001944 <usb_control_recv_chunk>:
		usbd_dev->control_state.ctrl_buf = NULL;
	}
}

static int usb_control_recv_chunk(usbd_device *usbd_dev)
{
 8001944:	b538      	push	{r3, r4, r5, lr}
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8001946:	6802      	ldr	r2, [r0, #0]
 8001948:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800194a:	8ec5      	ldrh	r5, [r0, #54]	; 0x36
 800194c:	79d2      	ldrb	r2, [r2, #7]
 800194e:	1aed      	subs	r5, r5, r3
 8001950:	4295      	cmp	r5, r2
 8001952:	bfa8      	it	ge
 8001954:	4615      	movge	r5, r2
			usbd_dev->control_state.req.wLength -
			usbd_dev->control_state.ctrl_len);
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 8001956:	6b82      	ldr	r2, [r0, #56]	; 0x38
	}
}

static int usb_control_recv_chunk(usbd_device *usbd_dev)
{
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8001958:	b2ad      	uxth	r5, r5
			usbd_dev->control_state.req.wLength -
			usbd_dev->control_state.ctrl_len);
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 800195a:	441a      	add	r2, r3
 800195c:	2100      	movs	r1, #0
 800195e:	462b      	mov	r3, r5
		usbd_dev->control_state.ctrl_buf = NULL;
	}
}

static int usb_control_recv_chunk(usbd_device *usbd_dev)
{
 8001960:	4604      	mov	r4, r0
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
			usbd_dev->control_state.req.wLength -
			usbd_dev->control_state.ctrl_len);
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 8001962:	f7ff fde0 	bl	8001526 <usbd_ep_read_packet>
				       usbd_dev->control_state.ctrl_buf +
				       usbd_dev->control_state.ctrl_len,
				       packetsize);

	if (size != packetsize) {
 8001966:	42a8      	cmp	r0, r5
 8001968:	d005      	beq.n	8001976 <usb_control_recv_chunk+0x32>
		stall_transaction(usbd_dev);
 800196a:	4620      	mov	r0, r4
 800196c:	f7ff ffe0 	bl	8001930 <stall_transaction>
		return -1;
 8001970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001974:	bd38      	pop	{r3, r4, r5, pc}
	}

	usbd_dev->control_state.ctrl_len += size;
 8001976:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8001978:	4403      	add	r3, r0
 800197a:	87a3      	strh	r3, [r4, #60]	; 0x3c

	return packetsize;
}
 800197c:	bd38      	pop	{r3, r4, r5, pc}

0800197e <usb_control_send_chunk>:

	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
 800197e:	b538      	push	{r3, r4, r5, lr}
	if (usbd_dev->desc->bMaxPacketSize0 <
 8001980:	6803      	ldr	r3, [r0, #0]
			usbd_dev->control_state.ctrl_len) {
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
 8001982:	6b82      	ldr	r2, [r0, #56]	; 0x38
	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
	if (usbd_dev->desc->bMaxPacketSize0 <
 8001984:	79dd      	ldrb	r5, [r3, #7]
			usbd_dev->control_state.ctrl_len) {
 8001986:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
	if (usbd_dev->desc->bMaxPacketSize0 <
 8001988:	429d      	cmp	r5, r3

	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
 800198a:	4604      	mov	r4, r0
	if (usbd_dev->desc->bMaxPacketSize0 <
			usbd_dev->control_state.ctrl_len) {
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
 800198c:	f04f 0100 	mov.w	r1, #0
	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
	if (usbd_dev->desc->bMaxPacketSize0 <
 8001990:	d20f      	bcs.n	80019b2 <usb_control_send_chunk+0x34>
			usbd_dev->control_state.ctrl_len) {
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
 8001992:	462b      	mov	r3, r5
 8001994:	f7ff fdc1 	bl	800151a <usbd_ep_write_packet>
				     usbd_dev->control_state.ctrl_buf,
				     usbd_dev->desc->bMaxPacketSize0);
		usbd_dev->control_state.state = DATA_IN;
 8001998:	2302      	movs	r3, #2
 800199a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.ctrl_buf +=
			usbd_dev->desc->bMaxPacketSize0;
 800199e:	6823      	ldr	r3, [r4, #0]
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
				     usbd_dev->control_state.ctrl_buf,
				     usbd_dev->desc->bMaxPacketSize0);
		usbd_dev->control_state.state = DATA_IN;
		usbd_dev->control_state.ctrl_buf +=
 80019a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80019a2:	79d9      	ldrb	r1, [r3, #7]
 80019a4:	440a      	add	r2, r1
 80019a6:	63a2      	str	r2, [r4, #56]	; 0x38
			usbd_dev->desc->bMaxPacketSize0;
		usbd_dev->control_state.ctrl_len -=
 80019a8:	79db      	ldrb	r3, [r3, #7]
 80019aa:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	87a3      	strh	r3, [r4, #60]	; 0x3c
 80019b0:	bd38      	pop	{r3, r4, r5, pc}
			usbd_dev->desc->bMaxPacketSize0;
	} else {
		/* Data stage, end of transmission */
		usbd_ep_write_packet(usbd_dev, 0,
 80019b2:	f7ff fdb2 	bl	800151a <usbd_ep_write_packet>
				     usbd_dev->control_state.ctrl_buf,
				     usbd_dev->control_state.ctrl_len);
		usbd_dev->control_state.state = LAST_DATA_IN;
 80019b6:	2303      	movs	r3, #3
 80019b8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.ctrl_len = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	87a3      	strh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf = NULL;
 80019c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80019c2:	bd38      	pop	{r3, r4, r5, pc}

080019c4 <usb_control_request_dispatch>:
	return packetsize;
}

static int usb_control_request_dispatch(usbd_device *usbd_dev,
					struct usb_setup_data *req)
{
 80019c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80019c8:	4604      	mov	r4, r0
 80019ca:	460e      	mov	r6, r1
	int i, result = 0;
	struct user_control_callback *cb = usbd_dev->user_control_callback;
 80019cc:	f100 0844 	add.w	r8, r0, #68	; 0x44
 80019d0:	2500      	movs	r5, #0

	/* Call user command hook function. */
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
		if (cb[i].cb == NULL) {
 80019d2:	f858 7005 	ldr.w	r7, [r8, r5]
 80019d6:	b957      	cbnz	r7, 80019ee <usb_control_request_dispatch+0x2a>
			}
		}
	}

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
 80019d8:	4620      	mov	r0, r4
 80019da:	4631      	mov	r1, r6
 80019dc:	f104 0238 	add.w	r2, r4, #56	; 0x38
 80019e0:	f104 033c 	add.w	r3, r4, #60	; 0x3c
				      &(usbd_dev->control_state.ctrl_buf),
				      &(usbd_dev->control_state.ctrl_len));
}
 80019e4:	b002      	add	sp, #8
 80019e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			}
		}
	}

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
 80019ea:	f7ff bf87 	b.w	80018fc <_usbd_standard_request>
 80019ee:	eb08 0305 	add.w	r3, r8, r5
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
		if (cb[i].cb == NULL) {
			break;
		}

		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
 80019f2:	7831      	ldrb	r1, [r6, #0]
 80019f4:	7958      	ldrb	r0, [r3, #5]
 80019f6:	791a      	ldrb	r2, [r3, #4]
 80019f8:	ea00 0301 	and.w	r3, r0, r1
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d003      	beq.n	8001a08 <usb_control_request_dispatch+0x44>
 8001a00:	3508      	adds	r5, #8
{
	int i, result = 0;
	struct user_control_callback *cb = usbd_dev->user_control_callback;

	/* Call user command hook function. */
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001a02:	2d20      	cmp	r5, #32
 8001a04:	d1e5      	bne.n	80019d2 <usb_control_request_dispatch+0xe>
 8001a06:	e7e7      	b.n	80019d8 <usb_control_request_dispatch+0x14>
		if (cb[i].cb == NULL) {
			break;
		}

		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
			result = cb[i].cb(usbd_dev, req,
 8001a08:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	4620      	mov	r0, r4
 8001a10:	4631      	mov	r1, r6
 8001a12:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8001a16:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8001a1a:	47b8      	blx	r7
					  &(usbd_dev->control_state.ctrl_buf),
					  &(usbd_dev->control_state.ctrl_len),
					  &(usbd_dev->control_state.complete));
			if (result == USBD_REQ_HANDLED ||
 8001a1c:	2801      	cmp	r0, #1
 8001a1e:	d8ef      	bhi.n	8001a00 <usb_control_request_dispatch+0x3c>

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
				      &(usbd_dev->control_state.ctrl_buf),
				      &(usbd_dev->control_state.ctrl_len));
}
 8001a20:	b002      	add	sp, #8
 8001a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001a26 <usb_control_setup_read>:

/* Handle commands and read requests. */
static void usb_control_setup_read(usbd_device *usbd_dev,
		struct usb_setup_data *req)
{
 8001a26:	b510      	push	{r4, lr}
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8001a28:	6902      	ldr	r2, [r0, #16]
 8001a2a:	6382      	str	r2, [r0, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = req->wLength;
 8001a2c:	798a      	ldrb	r2, [r1, #6]
 8001a2e:	79cb      	ldrb	r3, [r1, #7]
 8001a30:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001a34:	8783      	strh	r3, [r0, #60]	; 0x3c
}

/* Handle commands and read requests. */
static void usb_control_setup_read(usbd_device *usbd_dev,
		struct usb_setup_data *req)
{
 8001a36:	4604      	mov	r4, r0
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
	usbd_dev->control_state.ctrl_len = req->wLength;

	if (usb_control_request_dispatch(usbd_dev, req)) {
 8001a38:	f7ff ffc4 	bl	80019c4 <usb_control_request_dispatch>
 8001a3c:	b170      	cbz	r0, 8001a5c <usb_control_setup_read+0x36>
		if (usbd_dev->control_state.ctrl_len) {
 8001a3e:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
			/* Go to data out stage if handled. */
			usb_control_send_chunk(usbd_dev);
 8001a40:	4620      	mov	r0, r4
{
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
	usbd_dev->control_state.ctrl_len = req->wLength;

	if (usb_control_request_dispatch(usbd_dev, req)) {
		if (usbd_dev->control_state.ctrl_len) {
 8001a42:	b119      	cbz	r1, 8001a4c <usb_control_setup_read+0x26>
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
	}
}
 8001a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usbd_dev->control_state.ctrl_len = req->wLength;

	if (usb_control_request_dispatch(usbd_dev, req)) {
		if (usbd_dev->control_state.ctrl_len) {
			/* Go to data out stage if handled. */
			usb_control_send_chunk(usbd_dev);
 8001a48:	f7ff bf99 	b.w	800197e <usb_control_send_chunk>
		} else {
			/* Go to status stage if handled. */
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	460a      	mov	r2, r1
 8001a50:	f7ff fd63 	bl	800151a <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8001a54:	2304      	movs	r3, #4
 8001a56:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001a5a:	bd10      	pop	{r4, pc}
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
 8001a5c:	4620      	mov	r0, r4
	}
}
 8001a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
			usbd_dev->control_state.state = STATUS_IN;
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
 8001a62:	f7ff bf65 	b.w	8001930 <stall_transaction>

08001a66 <usbd_register_control_callback>:

/* Register application callback function for handling USB control requests. */
int usbd_register_control_callback(usbd_device *usbd_dev, uint8_t type,
				   uint8_t type_mask,
				   usbd_control_callback callback)
{
 8001a66:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001a68:	2500      	movs	r5, #0
 8001a6a:	eb00 04c5 	add.w	r4, r0, r5, lsl #3
		if (usbd_dev->user_control_callback[i].cb) {
 8001a6e:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8001a70:	b12e      	cbz	r6, 8001a7e <usbd_register_control_callback+0x18>
				   uint8_t type_mask,
				   usbd_control_callback callback)
{
	int i;

	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001a72:	3501      	adds	r5, #1
 8001a74:	2d04      	cmp	r5, #4
 8001a76:	d1f8      	bne.n	8001a6a <usbd_register_control_callback+0x4>
		usbd_dev->user_control_callback[i].type_mask = type_mask;
		usbd_dev->user_control_callback[i].cb = callback;
		return 0;
	}

	return -1;
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001a7c:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
		if (usbd_dev->user_control_callback[i].cb) {
			continue;
		}

		usbd_dev->user_control_callback[i].type = type;
 8001a7e:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
		usbd_dev->user_control_callback[i].type_mask = type_mask;
 8001a82:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
		usbd_dev->user_control_callback[i].cb = callback;
 8001a86:	6463      	str	r3, [r4, #68]	; 0x44
		return 0;
 8001a88:	4630      	mov	r0, r6
 8001a8a:	bd70      	pop	{r4, r5, r6, pc}

08001a8c <_usbd_control_setup>:

/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
 8001a8c:	b570      	push	{r4, r5, r6, lr}
	struct usb_setup_data *req = &usbd_dev->control_state.req;
 8001a8e:	f100 0630 	add.w	r6, r0, #48	; 0x30
	(void)ea;

	usbd_dev->control_state.complete = NULL;
 8001a92:	2500      	movs	r5, #0
 8001a94:	6405      	str	r5, [r0, #64]	; 0x40

	if (usbd_ep_read_packet(usbd_dev, 0, req, 8) != 8) {
 8001a96:	4629      	mov	r1, r5
 8001a98:	4632      	mov	r2, r6
 8001a9a:	2308      	movs	r3, #8

/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
 8001a9c:	4604      	mov	r4, r0
	struct usb_setup_data *req = &usbd_dev->control_state.req;
	(void)ea;

	usbd_dev->control_state.complete = NULL;

	if (usbd_ep_read_packet(usbd_dev, 0, req, 8) != 8) {
 8001a9e:	f7ff fd42 	bl	8001526 <usbd_ep_read_packet>
 8001aa2:	2808      	cmp	r0, #8
 8001aa4:	d004      	beq.n	8001ab0 <_usbd_control_setup+0x24>
		stall_transaction(usbd_dev);
 8001aa6:	4620      	mov	r0, r4
	} else if (req->bmRequestType & 0x80) {
		usb_control_setup_read(usbd_dev, req);
	} else {
		usb_control_setup_write(usbd_dev, req);
	}
}
 8001aa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)ea;

	usbd_dev->control_state.complete = NULL;

	if (usbd_ep_read_packet(usbd_dev, 0, req, 8) != 8) {
		stall_transaction(usbd_dev);
 8001aac:	f7ff bf40 	b.w	8001930 <stall_transaction>
		return;
	}

	if (req->wLength == 0) {
 8001ab0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ab2:	b11b      	cbz	r3, 8001abc <_usbd_control_setup+0x30>
		usb_control_setup_read(usbd_dev, req);
	} else if (req->bmRequestType & 0x80) {
 8001ab4:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8001ab8:	2a00      	cmp	r2, #0
 8001aba:	da05      	bge.n	8001ac8 <_usbd_control_setup+0x3c>
		usb_control_setup_read(usbd_dev, req);
 8001abc:	4620      	mov	r0, r4
 8001abe:	4631      	mov	r1, r6
	} else {
		usb_control_setup_write(usbd_dev, req);
	}
}
 8001ac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	}

	if (req->wLength == 0) {
		usb_control_setup_read(usbd_dev, req);
	} else if (req->bmRequestType & 0x80) {
		usb_control_setup_read(usbd_dev, req);
 8001ac4:	f7ff bfaf 	b.w	8001a26 <usb_control_setup_read>
}

static void usb_control_setup_write(usbd_device *usbd_dev,
				    struct usb_setup_data *req)
{
	if (req->wLength > usbd_dev->ctrl_buf_len) {
 8001ac8:	8aa2      	ldrh	r2, [r4, #20]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d3eb      	bcc.n	8001aa6 <_usbd_control_setup+0x1a>
		stall_transaction(usbd_dev);
		return;
	}

	/* Buffer into which to write received data. */
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8001ace:	6922      	ldr	r2, [r4, #16]
	usbd_dev->control_state.ctrl_len = 0;
 8001ad0:	87a5      	strh	r5, [r4, #60]	; 0x3c
		stall_transaction(usbd_dev);
		return;
	}

	/* Buffer into which to write received data. */
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8001ad2:	63a2      	str	r2, [r4, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = 0;
	/* Wait for DATA OUT stage. */
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8001ad4:	6822      	ldr	r2, [r4, #0]
 8001ad6:	79d2      	ldrb	r2, [r2, #7]
 8001ad8:	429a      	cmp	r2, r3
		usbd_dev->control_state.state = DATA_OUT;
 8001ada:	bf34      	ite	cc
 8001adc:	2305      	movcc	r3, #5
	} else {
		usbd_dev->control_state.state = LAST_DATA_OUT;
 8001ade:	2306      	movcs	r3, #6
 8001ae0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001ae4:	bd70      	pop	{r4, r5, r6, pc}

08001ae6 <_usbd_control_out>:

void _usbd_control_out(usbd_device *usbd_dev, uint8_t ea)
{
	(void)ea;

	switch (usbd_dev->control_state.state) {
 8001ae6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001aea:	2b06      	cmp	r3, #6
		usb_control_setup_write(usbd_dev, req);
	}
}

void _usbd_control_out(usbd_device *usbd_dev, uint8_t ea)
{
 8001aec:	b510      	push	{r4, lr}
 8001aee:	4604      	mov	r4, r0
	(void)ea;

	switch (usbd_dev->control_state.state) {
 8001af0:	d010      	beq.n	8001b14 <_usbd_control_out+0x2e>
 8001af2:	2b07      	cmp	r3, #7
 8001af4:	d024      	beq.n	8001b40 <_usbd_control_out+0x5a>
 8001af6:	2b05      	cmp	r3, #5
 8001af8:	d133      	bne.n	8001b62 <_usbd_control_out+0x7c>
	case DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8001afa:	f7ff ff23 	bl	8001944 <usb_control_recv_chunk>
 8001afe:	2800      	cmp	r0, #0
 8001b00:	db33      	blt.n	8001b6a <_usbd_control_out+0x84>
			break;
		}
		if ((usbd_dev->control_state.req.wLength -
 8001b02:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8001b04:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001b06:	1ad2      	subs	r2, r2, r3
					usbd_dev->control_state.ctrl_len) <=
					usbd_dev->desc->bMaxPacketSize0) {
 8001b08:	6823      	ldr	r3, [r4, #0]
	case DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
			break;
		}
		if ((usbd_dev->control_state.req.wLength -
					usbd_dev->control_state.ctrl_len) <=
 8001b0a:	79db      	ldrb	r3, [r3, #7]
	switch (usbd_dev->control_state.state) {
	case DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
			break;
		}
		if ((usbd_dev->control_state.req.wLength -
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	dc2c      	bgt.n	8001b6a <_usbd_control_out+0x84>
					usbd_dev->control_state.ctrl_len) <=
					usbd_dev->desc->bMaxPacketSize0) {
			usbd_dev->control_state.state = LAST_DATA_OUT;
 8001b10:	2306      	movs	r3, #6
 8001b12:	e010      	b.n	8001b36 <_usbd_control_out+0x50>
		}
		break;
	case LAST_DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8001b14:	f7ff ff16 	bl	8001944 <usb_control_recv_chunk>
 8001b18:	2800      	cmp	r0, #0
 8001b1a:	db26      	blt.n	8001b6a <_usbd_control_out+0x84>
		}
		/*
		 * We have now received the full data payload.
		 * Invoke callback to process.
		 */
		if (usb_control_request_dispatch(usbd_dev,
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8001b22:	f7ff ff4f 	bl	80019c4 <usb_control_request_dispatch>
 8001b26:	b148      	cbz	r0, 8001b3c <_usbd_control_out+0x56>
					&(usbd_dev->control_state.req))) {
			/* Got to status stage on success. */
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8001b28:	2100      	movs	r1, #0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	460a      	mov	r2, r1
 8001b30:	f7ff fcf3 	bl	800151a <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8001b34:	2304      	movs	r3, #4
 8001b36:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001b3a:	bd10      	pop	{r4, pc}
		} else {
			stall_transaction(usbd_dev);
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	e010      	b.n	8001b62 <_usbd_control_out+0x7c>
		}
		break;
	case STATUS_OUT:
		usbd_ep_read_packet(usbd_dev, 0, NULL, 0);
 8001b40:	2100      	movs	r1, #0
 8001b42:	460b      	mov	r3, r1
 8001b44:	460a      	mov	r2, r1
 8001b46:	f7ff fcee 	bl	8001526 <usbd_ep_read_packet>
		usbd_dev->control_state.state = IDLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (usbd_dev->control_state.complete) {
 8001b50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b52:	b11b      	cbz	r3, 8001b5c <_usbd_control_out+0x76>
			usbd_dev->control_state.complete(usbd_dev,
 8001b54:	4620      	mov	r0, r4
 8001b56:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8001b5a:	4798      	blx	r3
					&(usbd_dev->control_state.req));
		}
		usbd_dev->control_state.complete = NULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8001b60:	bd10      	pop	{r4, pc}
	default:
		stall_transaction(usbd_dev);
	}
}
 8001b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					&(usbd_dev->control_state.req));
		}
		usbd_dev->control_state.complete = NULL;
		break;
	default:
		stall_transaction(usbd_dev);
 8001b66:	f7ff bee3 	b.w	8001930 <stall_transaction>
 8001b6a:	bd10      	pop	{r4, pc}

08001b6c <_usbd_control_in>:
void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 8001b6c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001b70:	2b03      	cmp	r3, #3
		stall_transaction(usbd_dev);
	}
}

void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
 8001b72:	b510      	push	{r4, lr}
 8001b74:	4604      	mov	r4, r0
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 8001b76:	d007      	beq.n	8001b88 <_usbd_control_in+0x1c>
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d007      	beq.n	8001b8c <_usbd_control_in+0x20>
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d11c      	bne.n	8001bba <_usbd_control_in+0x4e>
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8001b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
	case DATA_IN:
		usb_control_send_chunk(usbd_dev);
 8001b84:	f7ff befb 	b.w	800197e <usb_control_send_chunk>
		break;
	case LAST_DATA_IN:
		usbd_dev->control_state.state = STATUS_OUT;
 8001b88:	2307      	movs	r3, #7
 8001b8a:	e013      	b.n	8001bb4 <_usbd_control_in+0x48>
		break;
	case STATUS_IN:
		if (usbd_dev->control_state.complete) {
 8001b8c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b8e:	b113      	cbz	r3, 8001b96 <_usbd_control_in+0x2a>
			usbd_dev->control_state.complete(usbd_dev,
 8001b90:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8001b94:	4798      	blx	r3
					&(usbd_dev->control_state.req));
		}

		/* Exception: Handle SET ADDRESS function here... */
		if ((req->bmRequestType == 0) &&
 8001b96:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001b9a:	b953      	cbnz	r3, 8001bb2 <_usbd_control_in+0x46>
 8001b9c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8001ba0:	2b05      	cmp	r3, #5
 8001ba2:	d106      	bne.n	8001bb2 <_usbd_control_in+0x46>
		    (req->bRequest == USB_REQ_SET_ADDRESS)) {
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8001ba4:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8001ba8:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4620      	mov	r0, r4
 8001bae:	b2c9      	uxtb	r1, r1
 8001bb0:	4798      	blx	r3
		}
		usbd_dev->control_state.state = IDLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		break;
 8001bb8:	bd10      	pop	{r4, pc}
	default:
		stall_transaction(usbd_dev);
	}
}
 8001bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
		}
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
 8001bbe:	f7ff beb7 	b.w	8001930 <stall_transaction>
	...

08001bc4 <stm32f107_usbd_init>:
};

/** Initialize the USB device controller hardware of the STM32. */
static usbd_device *stm32f107_usbd_init(void)
{
	OTG_FS_GINTSTS = OTG_FS_GINTSTS_MMIS;
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <stm32f107_usbd_init+0x78>)
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	601a      	str	r2, [r3, #0]

	OTG_FS_GUSBCFG |= OTG_FS_GUSBCFG_PHYSEL;
 8001bca:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8001bce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bd2:	f843 2c08 	str.w	r2, [r3, #-8]
	/* Enable VBUS sensing in device mode and power down the PHY. */
	OTG_FS_GCCFG |= OTG_FS_GCCFG_VBUSBSEN | OTG_FS_GCCFG_PWRDWN;
 8001bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bd8:	f442 2210 	orr.w	r2, r2, #589824	; 0x90000
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24

	/* Wait for AHB idle. */
	while (!(OTG_FS_GRSTCTL & OTG_FS_GRSTCTL_AHBIDL));
 8001bde:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <stm32f107_usbd_init+0x7c>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	2a00      	cmp	r2, #0
 8001be4:	dafb      	bge.n	8001bde <stm32f107_usbd_init+0x1a>
	/* Do core soft reset. */
	OTG_FS_GRSTCTL |= OTG_FS_GRSTCTL_CSRST;
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	f042 0201 	orr.w	r2, r2, #1
 8001bec:	601a      	str	r2, [r3, #0]
	while (OTG_FS_GRSTCTL & OTG_FS_GRSTCTL_CSRST);
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	f012 0201 	ands.w	r2, r2, #1
 8001bf4:	d1fb      	bne.n	8001bee <stm32f107_usbd_init+0x2a>

	/* Force peripheral only mode. */
	OTG_FS_GUSBCFG |= OTG_FS_GUSBCFG_FDMOD | OTG_FS_GUSBCFG_TRDT_MASK;
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <stm32f107_usbd_init+0x80>)

	/* Restart the PHY clock. */
	OTG_FS_PCGCCTL = 0;

	OTG_FS_GRXFSIZ = stm32f107_usb_driver.rx_fifo_size;
	usbd_dev.fifo_mem_top = stm32f107_usb_driver.rx_fifo_size;
 8001bf8:	4813      	ldr	r0, [pc, #76]	; (8001c48 <stm32f107_usbd_init+0x84>)
	/* Do core soft reset. */
	OTG_FS_GRSTCTL |= OTG_FS_GRSTCTL_CSRST;
	while (OTG_FS_GRSTCTL & OTG_FS_GRSTCTL_CSRST);

	/* Force peripheral only mode. */
	OTG_FS_GUSBCFG |= OTG_FS_GUSBCFG_FDMOD | OTG_FS_GUSBCFG_TRDT_MASK;
 8001bfa:	6819      	ldr	r1, [r3, #0]
 8001bfc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001c00:	f441 5170 	orr.w	r1, r1, #15360	; 0x3c00
 8001c04:	6019      	str	r1, [r3, #0]

	/* Full speed device. */
	OTG_FS_DCFG |= OTG_FS_DCFG_DSPD;
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <stm32f107_usbd_init+0x88>)
 8001c08:	6819      	ldr	r1, [r3, #0]
 8001c0a:	f041 0103 	orr.w	r1, r1, #3
 8001c0e:	6019      	str	r1, [r3, #0]

	/* Restart the PHY clock. */
	OTG_FS_PCGCCTL = 0;
 8001c10:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600

	OTG_FS_GRXFSIZ = stm32f107_usb_driver.rx_fifo_size;
 8001c14:	4a0e      	ldr	r2, [pc, #56]	; (8001c50 <stm32f107_usbd_init+0x8c>)
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	6013      	str	r3, [r2, #0]
	usbd_dev.fifo_mem_top = stm32f107_usb_driver.rx_fifo_size;
 8001c1a:	f8a0 30cc 	strh.w	r3, [r0, #204]	; 0xcc

	/* Unmask interrupts for TX and RX. */
	OTG_FS_GAHBCFG |= OTG_FS_GAHBCFG_GINT;
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <stm32f107_usbd_init+0x90>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	f042 0201 	orr.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
	OTG_FS_GINTMSK = OTG_FS_GINTMSK_ENUMDNEM |
 8001c28:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <stm32f107_usbd_init+0x94>)
 8001c2a:	611a      	str	r2, [r3, #16]
			 OTG_FS_GINTMSK_RXFLVLM |
			 OTG_FS_GINTMSK_IEPINT |
			 OTG_FS_GINTMSK_USBSUSPM |
			 OTG_FS_GINTMSK_WUIM |
			 OTG_FS_GINTMSK_SOFM;
	OTG_FS_DAINTMSK = 0xF;
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <stm32f107_usbd_init+0x98>)
 8001c2e:	220f      	movs	r2, #15
 8001c30:	601a      	str	r2, [r3, #0]
	OTG_FS_DIEPMSK = OTG_FS_DIEPMSK_XFRCM;
 8001c32:	2201      	movs	r2, #1
 8001c34:	f843 2c0c 	str.w	r2, [r3, #-12]

	return &usbd_dev;
}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	50000014 	.word	0x50000014
 8001c40:	50000010 	.word	0x50000010
 8001c44:	5000000c 	.word	0x5000000c
 8001c48:	20008a00 	.word	0x20008a00
 8001c4c:	50000800 	.word	0x50000800
 8001c50:	50000024 	.word	0x50000024
 8001c54:	50000008 	.word	0x50000008
 8001c58:	80042818 	.word	0x80042818
 8001c5c:	5000081c 	.word	0x5000081c

08001c60 <blocking_handler>:
	}

}

void blocking_handler(void)
{
 8001c60:	e7fe      	b.n	8001c60 <blocking_handler>

08001c62 <null_handler>:
	while (1);
}

void null_handler(void)
{
 8001c62:	4770      	bx	lr

08001c64 <reset_handler>:
void WEAK __attribute__ ((naked)) reset_handler(void)
{
	volatile unsigned *src, *dest;
	funcp_t *fp;

	for (src = &_data_loadaddr, dest = &_data;
 8001c64:	2200      	movs	r2, #0
 8001c66:	4918      	ldr	r1, [pc, #96]	; (8001cc8 <reset_handler+0x64>)
 8001c68:	4818      	ldr	r0, [pc, #96]	; (8001ccc <reset_handler+0x68>)
 8001c6a:	1853      	adds	r3, r2, r1
 8001c6c:	4283      	cmp	r3, r0
 8001c6e:	d204      	bcs.n	8001c7a <reset_handler+0x16>
		dest < &_edata;
		src++, dest++) {
		*dest = *src;
 8001c70:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <reset_handler+0x6c>)
 8001c72:	58d3      	ldr	r3, [r2, r3]
 8001c74:	5053      	str	r3, [r2, r1]
 8001c76:	3204      	adds	r2, #4
 8001c78:	e7f5      	b.n	8001c66 <reset_handler+0x2>
	}

	while (dest < &_ebss) {
 8001c7a:	4a16      	ldr	r2, [pc, #88]	; (8001cd4 <reset_handler+0x70>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d203      	bcs.n	8001c88 <reset_handler+0x24>
		*dest++ = 0;
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	3304      	adds	r3, #4
 8001c86:	e7f8      	b.n	8001c7a <reset_handler+0x16>
		dest < &_edata;
		src++, dest++) {
		*dest = *src;
	}

	while (dest < &_ebss) {
 8001c88:	4c13      	ldr	r4, [pc, #76]	; (8001cd8 <reset_handler+0x74>)
		*dest++ = 0;
	}

	/* Constructors. */
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001c8a:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <reset_handler+0x78>)
 8001c8c:	429c      	cmp	r4, r3
 8001c8e:	d203      	bcs.n	8001c98 <reset_handler+0x34>
		(*fp)();
 8001c90:	f854 3b04 	ldr.w	r3, [r4], #4
 8001c94:	4798      	blx	r3
 8001c96:	e7f8      	b.n	8001c8a <reset_handler+0x26>
	while (dest < &_ebss) {
		*dest++ = 0;
	}

	/* Constructors. */
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001c98:	4c11      	ldr	r4, [pc, #68]	; (8001ce0 <reset_handler+0x7c>)
		(*fp)();
	}
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8001c9a:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <reset_handler+0x80>)
 8001c9c:	429c      	cmp	r4, r3
 8001c9e:	d203      	bcs.n	8001ca8 <reset_handler+0x44>
		(*fp)();
 8001ca0:	f854 3b04 	ldr.w	r3, [r4], #4
 8001ca4:	4798      	blx	r3
 8001ca6:	e7f8      	b.n	8001c9a <reset_handler+0x36>
#include <libopencm3/cm3/scb.h>

static void pre_main(void)
{
	/* Enable access to Floating-Point coprocessor. */
	SCB_CPACR |= SCB_CPACR_FULL * (SCB_CPACR_CP10 | SCB_CPACR_CP11);
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <reset_handler+0x84>)

	/* Call the application's entry point. */
	main();

	/* Destructors. */
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8001caa:	4c10      	ldr	r4, [pc, #64]	; (8001cec <reset_handler+0x88>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001cb2:	601a      	str	r2, [r3, #0]

	/* might be provided by platform specific vector.c */
	pre_main();

	/* Call the application's entry point. */
	main();
 8001cb4:	f7fe fc3e 	bl	8000534 <main>

	/* Destructors. */
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <reset_handler+0x8c>)
 8001cba:	429c      	cmp	r4, r3
 8001cbc:	d203      	bcs.n	8001cc6 <reset_handler+0x62>
		(*fp)();
 8001cbe:	f854 3b04 	ldr.w	r3, [r4], #4
 8001cc2:	4798      	blx	r3
 8001cc4:	e7f8      	b.n	8001cb8 <reset_handler+0x54>
 8001cc6:	bf00      	nop
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	200008c4 	.word	0x200008c4
 8001cd0:	08007f24 	.word	0x08007f24
 8001cd4:	20008b20 	.word	0x20008b20
 8001cd8:	08007f1c 	.word	0x08007f1c
 8001cdc:	08007f1c 	.word	0x08007f1c
 8001ce0:	08007f1c 	.word	0x08007f1c
 8001ce4:	08007f1c 	.word	0x08007f1c
 8001ce8:	e000ed88 	.word	0xe000ed88
 8001cec:	08007f1c 	.word	0x08007f1c
 8001cf0:	08007f1c 	.word	0x08007f1c

08001cf4 <nvic_enable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref nvic_stm32f1_userint
 */

void nvic_enable_irq(uint8_t irqn)
{
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <nvic_enable_irq+0x18>)
 8001cf6:	0942      	lsrs	r2, r0, #5
 8001cf8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001cfc:	f000 001f 	and.w	r0, r0, #31
 8001d00:	2201      	movs	r2, #1
 8001d02:	fa02 f000 	lsl.w	r0, r2, r0
 8001d06:	6018      	str	r0, [r3, #0]
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000e100 	.word	0xe000e100

08001d10 <nvic_set_priority>:
void nvic_set_priority(uint8_t irqn, uint8_t priority)
{
	/* code from lpc43xx/nvic.c -- this is quite a hack and alludes to the
	 * negative interrupt numbers assigned to the system interrupts. better
	 * handling would mean signed integers. */
	if (irqn >= NVIC_IRQ_COUNT) {
 8001d10:	2850      	cmp	r0, #80	; 0x50
 8001d12:	d904      	bls.n	8001d1e <nvic_set_priority+0xe>
		/* Cortex-M  system interrupts */
		SCS_SHPR((irqn & 0xF) - 4) = priority;
 8001d14:	f000 000f 	and.w	r0, r0, #15
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <nvic_set_priority+0x1c>)
 8001d1a:	54c1      	strb	r1, [r0, r3]
 8001d1c:	4770      	bx	lr
	} else {
		/* Device specific interrupts */
		NVIC_IPR(irqn) = priority;
 8001d1e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001d22:	f500 4064 	add.w	r0, r0, #58368	; 0xe400
 8001d26:	7001      	strb	r1, [r0, #0]
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed14 	.word	0xe000ed14

08001d30 <pwr_set_vos_scale>:

#include <libopencm3/stm32/pwr.h>

void pwr_set_vos_scale(vos_scale_t scale)
{
	if (scale == SCALE1) {
 8001d30:	b920      	cbnz	r0, 8001d3c <pwr_set_vos_scale+0xc>
		PWR_CR |= PWR_CR_VOS;
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <pwr_set_vos_scale+0x1c>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d3a:	e005      	b.n	8001d48 <pwr_set_vos_scale+0x18>
	} else if (scale == SCALE2) {
 8001d3c:	2801      	cmp	r0, #1
 8001d3e:	d104      	bne.n	8001d4a <pwr_set_vos_scale+0x1a>
		PWR_CR &= PWR_CR_VOS;
 8001d40:	4b02      	ldr	r3, [pc, #8]	; (8001d4c <pwr_set_vos_scale+0x1c>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	4770      	bx	lr
 8001d4c:	40007000 	.word	0x40007000

08001d50 <stm32fx07_set_address>:
#define REBASE(x)        MMIO32((x) + (dev_base_address))
#define REBASE_FIFO(x)   (&MMIO32((dev_base_address) + (OTG_FIFO(x))))

void stm32fx07_set_address(usbd_device *usbd_dev, uint8_t addr)
{
	REBASE(OTG_DCFG) = (REBASE(OTG_DCFG) & ~OTG_FS_DCFG_DAD) | (addr << 4);
 8001d50:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001d5a:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 8001d5e:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 8001d62:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
 8001d66:	4770      	bx	lr

08001d68 <stm32fx07_ep_setup>:
}

void stm32fx07_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
			uint16_t max_size,
			void (*callback) (usbd_device *usbd_dev, uint8_t ep))
{
 8001d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	 * endpoint. Install callback funciton.
	 */
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;

	if (addr == 0) { /* For the default control endpoint */
 8001d6c:	f011 057f 	ands.w	r5, r1, #127	; 0x7f
}

void stm32fx07_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
			uint16_t max_size,
			void (*callback) (usbd_device *usbd_dev, uint8_t ep))
{
 8001d70:	9e08      	ldr	r6, [sp, #32]
 8001d72:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
 8001d76:	f003 077f 	and.w	r7, r3, #127	; 0x7f
	 * endpoint. Install callback funciton.
	 */
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;

	if (addr == 0) { /* For the default control endpoint */
 8001d7a:	d13a      	bne.n	8001df2 <stm32fx07_ep_setup+0x8a>
		/* Configure IN part. */
		if (max_size >= 64) {
 8001d7c:	2b3f      	cmp	r3, #63	; 0x3f
			REBASE(OTG_DIEPCTL0) = OTG_FS_DIEPCTL0_MPSIZ_64;
 8001d7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;

	if (addr == 0) { /* For the default control endpoint */
		/* Configure IN part. */
		if (max_size >= 64) {
 8001d80:	d902      	bls.n	8001d88 <stm32fx07_ep_setup+0x20>
			REBASE(OTG_DIEPCTL0) = OTG_FS_DIEPCTL0_MPSIZ_64;
 8001d82:	f8c2 5900 	str.w	r5, [r2, #2304]	; 0x900
 8001d86:	e009      	b.n	8001d9c <stm32fx07_ep_setup+0x34>
		} else if (max_size >= 32) {
 8001d88:	2b1f      	cmp	r3, #31
 8001d8a:	d901      	bls.n	8001d90 <stm32fx07_ep_setup+0x28>
			REBASE(OTG_DIEPCTL0) = OTG_FS_DIEPCTL0_MPSIZ_32;
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	e003      	b.n	8001d98 <stm32fx07_ep_setup+0x30>
		} else if (max_size >= 16) {
 8001d90:	2b0f      	cmp	r3, #15
			REBASE(OTG_DIEPCTL0) = OTG_FS_DIEPCTL0_MPSIZ_16;
 8001d92:	bf8c      	ite	hi
 8001d94:	2102      	movhi	r1, #2
		} else {
			REBASE(OTG_DIEPCTL0) = OTG_FS_DIEPCTL0_MPSIZ_8;
 8001d96:	2103      	movls	r1, #3
 8001d98:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
		}

		REBASE(OTG_DIEPTSIZ0) =
 8001d9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d9e:	b2bf      	uxth	r7, r7
 8001da0:	f8c2 7910 	str.w	r7, [r2, #2320]	; 0x910
			(max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DIEPCTL0) |=
 8001da4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001da6:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 8001daa:	f041 4108 	orr.w	r1, r1, #2281701376	; 0x88000000
 8001dae:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900

		/* Configure OUT part. */
		usbd_dev->doeptsiz[0] = OTG_FS_DIEPSIZ0_STUPCNT_1 |
			OTG_FS_DIEPSIZ0_PKTCNT |
			(max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(0)) = usbd_dev->doeptsiz[0];
 8001db2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		REBASE(OTG_DIEPCTL0) |=
			OTG_FS_DIEPCTL0_EPENA | OTG_FS_DIEPCTL0_SNAK;

		/* Configure OUT part. */
		usbd_dev->doeptsiz[0] = OTG_FS_DIEPSIZ0_STUPCNT_1 |
			OTG_FS_DIEPSIZ0_PKTCNT |
 8001db4:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8001db8:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
			(max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DIEPCTL0) |=
			OTG_FS_DIEPCTL0_EPENA | OTG_FS_DIEPCTL0_SNAK;

		/* Configure OUT part. */
		usbd_dev->doeptsiz[0] = OTG_FS_DIEPSIZ0_STUPCNT_1 |
 8001dbc:	f8c0 70d4 	str.w	r7, [r0, #212]	; 0xd4
			OTG_FS_DIEPSIZ0_PKTCNT |
			(max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(0)) = usbd_dev->doeptsiz[0];
 8001dc0:	f8c2 7b10 	str.w	r7, [r2, #2832]	; 0xb10
		REBASE(OTG_DOEPCTL(0)) |=
 8001dc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001dc6:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 8001dca:	f041 4108 	orr.w	r1, r1, #2281701376	; 0x88000000
 8001dce:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
		    OTG_FS_DOEPCTL0_EPENA | OTG_FS_DIEPCTL0_SNAK;

		REBASE(OTG_GNPTXFSIZ) = ((max_size / 4) << 16) |
 8001dd2:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8001dd4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001ddc:	6291      	str	r1, [r2, #40]	; 0x28
					 usbd_dev->driver->rx_fifo_size;
		usbd_dev->fifo_mem_top += max_size / 4;
 8001dde:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
 8001de2:	4413      	add	r3, r2
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	f8a0 30cc 	strh.w	r3, [r0, #204]	; 0xcc
		usbd_dev->fifo_mem_top_ep0 = usbd_dev->fifo_mem_top;
 8001dea:	f8a0 30ce 	strh.w	r3, [r0, #206]	; 0xce

		return;
 8001dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	if (dir) {
 8001df2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001df6:	ea4f 4a82 	mov.w	sl, r2, lsl #18
 8001dfa:	d02c      	beq.n	8001e56 <stm32fx07_ep_setup+0xee>
		REBASE(OTG_DIEPTXF(addr)) = ((max_size / 4) << 16) |
					     usbd_dev->fifo_mem_top;
 8001dfc:	f8b0 c0cc 	ldrh.w	ip, [r0, #204]	; 0xcc

		return;
	}

	if (dir) {
		REBASE(OTG_DIEPTXF(addr)) = ((max_size / 4) << 16) |
 8001e00:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001e02:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8001e06:	f105 0940 	add.w	r9, r5, #64	; 0x40
 8001e0a:	ea4c 4208 	orr.w	r2, ip, r8, lsl #16
 8001e0e:	f841 2029 	str.w	r2, [r1, r9, lsl #2]
					     usbd_dev->fifo_mem_top;
		usbd_dev->fifo_mem_top += max_size / 4;

		REBASE(OTG_DIEPTSIZ(addr)) =
 8001e12:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	}

	if (dir) {
		REBASE(OTG_DIEPTXF(addr)) = ((max_size / 4) << 16) |
					     usbd_dev->fifo_mem_top;
		usbd_dev->fifo_mem_top += max_size / 4;
 8001e14:	44c4      	add	ip, r8
 8001e16:	f8a0 c0cc 	strh.w	ip, [r0, #204]	; 0xcc

		REBASE(OTG_DIEPTSIZ(addr)) =
 8001e1a:	f501 6111 	add.w	r1, r1, #2320	; 0x910
 8001e1e:	f04f 0c20 	mov.w	ip, #32
 8001e22:	fb1c 1105 	smlabb	r1, ip, r5, r1
 8001e26:	b2bf      	uxth	r7, r7
 8001e28:	600f      	str	r7, [r1, #0]
		    (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DIEPCTL(addr)) |=
 8001e2a:	f44f 6710 	mov.w	r7, #2304	; 0x900
 8001e2e:	fb1c 7705 	smlabb	r7, ip, r5, r7
 8001e32:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
		    OTG_FS_DIEPCTL0_EPENA | OTG_FS_DIEPCTL0_SNAK | (type << 18)
		    | OTG_FS_DIEPCTL0_USBAEP | OTG_FS_DIEPCTLX_SD0PID
 8001e34:	f04a 4218 	orr.w	r2, sl, #2550136832	; 0x98000000
 8001e38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
					     usbd_dev->fifo_mem_top;
		usbd_dev->fifo_mem_top += max_size / 4;

		REBASE(OTG_DIEPTSIZ(addr)) =
		    (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DIEPCTL(addr)) |=
 8001e3c:	587c      	ldr	r4, [r7, r1]
		    OTG_FS_DIEPCTL0_EPENA | OTG_FS_DIEPCTL0_SNAK | (type << 18)
		    | OTG_FS_DIEPCTL0_USBAEP | OTG_FS_DIEPCTLX_SD0PID
		    | (addr << 22) | max_size;
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	ea43 5385 	orr.w	r3, r3, r5, lsl #22
					     usbd_dev->fifo_mem_top;
		usbd_dev->fifo_mem_top += max_size / 4;

		REBASE(OTG_DIEPTSIZ(addr)) =
		    (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DIEPCTL(addr)) |=
 8001e44:	4323      	orrs	r3, r4
 8001e46:	507b      	str	r3, [r7, r1]
		    OTG_FS_DIEPCTL0_EPENA | OTG_FS_DIEPCTL0_SNAK | (type << 18)
		    | OTG_FS_DIEPCTL0_USBAEP | OTG_FS_DIEPCTLX_SD0PID
		    | (addr << 22) | max_size;

		if (callback) {
 8001e48:	b33e      	cbz	r6, 8001e9a <stm32fx07_ep_setup+0x132>
			usbd_dev->user_callback_ctr[addr][USB_TRANSACTION_IN] =
 8001e4a:	230c      	movs	r3, #12
 8001e4c:	fb03 0005 	mla	r0, r3, r5, r0
 8001e50:	6646      	str	r6, [r0, #100]	; 0x64
 8001e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	if (!dir) {
		usbd_dev->doeptsiz[addr] = OTG_FS_DIEPSIZ0_PKTCNT |
				 (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
 8001e56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			    (void *)callback;
		}
	}

	if (!dir) {
		usbd_dev->doeptsiz[addr] = OTG_FS_DIEPSIZ0_PKTCNT |
 8001e58:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8001e5c:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 8001e60:	f8c1 70d4 	str.w	r7, [r1, #212]	; 0xd4
				 (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
 8001e64:	f502 6c31 	add.w	ip, r2, #2832	; 0xb10
 8001e68:	2120      	movs	r1, #32
 8001e6a:	fb11 cc05 	smlabb	ip, r1, r5, ip
		REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_EPENA |
		    OTG_FS_DOEPCTL0_USBAEP | OTG_FS_DIEPCTL0_CNAK |
		    OTG_FS_DOEPCTLX_SD0PID | (type << 18) | max_size;
 8001e6e:	f04a 4214 	orr.w	r2, sl, #2483027968	; 0x94000000
	}

	if (!dir) {
		usbd_dev->doeptsiz[addr] = OTG_FS_DIEPSIZ0_PKTCNT |
				 (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
 8001e72:	f8cc 7000 	str.w	r7, [ip]
		REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_EPENA |
 8001e76:	f44f 6730 	mov.w	r7, #2816	; 0xb00
 8001e7a:	fb11 7705 	smlabb	r7, r1, r5, r7
 8001e7e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
		    OTG_FS_DOEPCTL0_USBAEP | OTG_FS_DIEPCTL0_CNAK |
		    OTG_FS_DOEPCTLX_SD0PID | (type << 18) | max_size;
 8001e80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000

	if (!dir) {
		usbd_dev->doeptsiz[addr] = OTG_FS_DIEPSIZ0_PKTCNT |
				 (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
		REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_EPENA |
 8001e84:	587c      	ldr	r4, [r7, r1]
		    OTG_FS_DOEPCTL0_USBAEP | OTG_FS_DIEPCTL0_CNAK |
		    OTG_FS_DOEPCTLX_SD0PID | (type << 18) | max_size;
 8001e86:	4313      	orrs	r3, r2

	if (!dir) {
		usbd_dev->doeptsiz[addr] = OTG_FS_DIEPSIZ0_PKTCNT |
				 (max_size & OTG_FS_DIEPSIZ0_XFRSIZ_MASK);
		REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
		REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_EPENA |
 8001e88:	4323      	orrs	r3, r4
 8001e8a:	507b      	str	r3, [r7, r1]
		    OTG_FS_DOEPCTL0_USBAEP | OTG_FS_DIEPCTL0_CNAK |
		    OTG_FS_DOEPCTLX_SD0PID | (type << 18) | max_size;

		if (callback) {
 8001e8c:	b12e      	cbz	r6, 8001e9a <stm32fx07_ep_setup+0x132>
			usbd_dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
 8001e8e:	230c      	movs	r3, #12
 8001e90:	fb03 0005 	mla	r0, r3, r5, r0
 8001e94:	6686      	str	r6, [r0, #104]	; 0x68
 8001e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001e9e <stm32fx07_endpoints_reset>:
}

void stm32fx07_endpoints_reset(usbd_device *usbd_dev)
{
	/* The core resets the endpoints automatically on reset. */
	usbd_dev->fifo_mem_top = usbd_dev->fifo_mem_top_ep0;
 8001e9e:	f8b0 30ce 	ldrh.w	r3, [r0, #206]	; 0xce
 8001ea2:	f8a0 30cc 	strh.w	r3, [r0, #204]	; 0xcc
 8001ea6:	4770      	bx	lr

08001ea8 <stm32fx07_ep_stall_set>:
}

void stm32fx07_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
 8001ea8:	b510      	push	{r4, lr}
 8001eaa:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
	if (addr == 0) {
 8001eae:	b951      	cbnz	r1, 8001ec6 <stm32fx07_ep_stall_set+0x1e>
		if (stall) {
			REBASE(OTG_DIEPCTL(addr)) |= OTG_FS_DIEPCTL0_STALL;
 8001eb0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001eb2:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
}

void stm32fx07_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
	if (addr == 0) {
		if (stall) {
 8001eb6:	b112      	cbz	r2, 8001ebe <stm32fx07_ep_stall_set+0x16>
			REBASE(OTG_DIEPCTL(addr)) |= OTG_FS_DIEPCTL0_STALL;
 8001eb8:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
 8001ebc:	e001      	b.n	8001ec2 <stm32fx07_ep_stall_set+0x1a>
		} else {
			REBASE(OTG_DIEPCTL(addr)) &= ~OTG_FS_DIEPCTL0_STALL;
 8001ebe:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
 8001ec2:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
		}
	}

	if (addr & 0x80) {
 8001ec6:	0608      	lsls	r0, r1, #24
		addr &= 0x7F;
 8001ec8:	bf46      	itte	mi
 8001eca:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8001ece:	3148      	addmi	r1, #72	; 0x48
 8001ed0:	3158      	addpl	r1, #88	; 0x58
			REBASE(OTG_DIEPCTL(addr)) &= ~OTG_FS_DIEPCTL0_STALL;
			REBASE(OTG_DIEPCTL(addr)) |= OTG_FS_DIEPCTLX_SD0PID;
		}
	} else {
		if (stall) {
			REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_STALL;
 8001ed2:	0149      	lsls	r1, r1, #5
		} else {
			REBASE(OTG_DIEPCTL(addr)) &= ~OTG_FS_DIEPCTL0_STALL;
			REBASE(OTG_DIEPCTL(addr)) |= OTG_FS_DIEPCTLX_SD0PID;
		}
	} else {
		if (stall) {
 8001ed4:	b122      	cbz	r2, 8001ee0 <stm32fx07_ep_stall_set+0x38>
			REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_STALL;
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed8:	58ca      	ldr	r2, [r1, r3]
 8001eda:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001ede:	e008      	b.n	8001ef2 <stm32fx07_ep_stall_set+0x4a>
		} else {
			REBASE(OTG_DOEPCTL(addr)) &= ~OTG_FS_DOEPCTL0_STALL;
 8001ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee2:	5888      	ldr	r0, [r1, r2]
 8001ee4:	f420 1000 	bic.w	r0, r0, #2097152	; 0x200000
 8001ee8:	5088      	str	r0, [r1, r2]
			REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTLX_SD0PID;
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	58ca      	ldr	r2, [r1, r3]
 8001eee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ef2:	50ca      	str	r2, [r1, r3]
 8001ef4:	bd10      	pop	{r4, pc}

08001ef6 <stm32fx07_ep_stall_get>:
}

uint8_t stm32fx07_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
	/* Return non-zero if STALL set. */
	if (addr & 0x80) {
 8001ef6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001efa:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
		return (REBASE(OTG_DIEPCTL(addr & 0x7f)) &
 8001efe:	bf1a      	itte	ne
 8001f00:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8001f04:	3148      	addne	r1, #72	; 0x48
				OTG_FS_DIEPCTL0_STALL) ? 1 : 0;
	} else {
		return (REBASE(OTG_DOEPCTL(addr)) &
 8001f06:	3158      	addeq	r1, #88	; 0x58
 8001f08:	0149      	lsls	r1, r1, #5
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	58c8      	ldr	r0, [r1, r3]
 8001f0e:	f3c0 5040 	ubfx	r0, r0, #21, #1
				OTG_FS_DOEPCTL0_STALL) ? 1 : 0;
	}
}
 8001f12:	4770      	bx	lr

08001f14 <stm32fx07_ep_nak_set>:

void stm32fx07_ep_nak_set(usbd_device *usbd_dev, uint8_t addr, uint8_t nak)
{
	/* It does not make sence to force NAK on IN endpoints. */
	if (addr & 0x80) {
 8001f14:	060b      	lsls	r3, r1, #24
 8001f16:	d410      	bmi.n	8001f3a <stm32fx07_ep_nak_set+0x26>
		return;
	}

	usbd_dev->force_nak[addr] = nak;
 8001f18:	1843      	adds	r3, r0, r1
 8001f1a:	3158      	adds	r1, #88	; 0x58
 8001f1c:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8001f20:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8

	if (nak) {
		REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_SNAK;
 8001f24:	0149      	lsls	r1, r1, #5
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		return;
	}

	usbd_dev->force_nak[addr] = nak;

	if (nak) {
 8001f28:	b11a      	cbz	r2, 8001f32 <stm32fx07_ep_nak_set+0x1e>
		REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_SNAK;
 8001f2a:	58ca      	ldr	r2, [r1, r3]
 8001f2c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001f30:	e002      	b.n	8001f38 <stm32fx07_ep_nak_set+0x24>
	} else {
		REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_CNAK;
 8001f32:	58ca      	ldr	r2, [r1, r3]
 8001f34:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001f38:	50ca      	str	r2, [r1, r3]
 8001f3a:	4770      	bx	lr

08001f3c <stm32fx07_ep_write_packet>:
	}
}

uint16_t stm32fx07_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			      const void *buf, uint16_t len)
{
 8001f3c:	b570      	push	{r4, r5, r6, lr}
	int i;

	addr &= 0x7F;

	/* Return if endpoint is already enabled. */
	if (REBASE(OTG_DIEPTSIZ(addr)) & OTG_FS_DIEPSIZ0_PKTCNT) {
 8001f3e:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
 8001f42:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			      const void *buf, uint16_t len)
{
	const uint32_t *buf32 = buf;
	int i;

	addr &= 0x7F;
 8001f44:	f001 017f 	and.w	r1, r1, #127	; 0x7f

	/* Return if endpoint is already enabled. */
	if (REBASE(OTG_DIEPTSIZ(addr)) & OTG_FS_DIEPSIZ0_PKTCNT) {
 8001f48:	2520      	movs	r5, #32
 8001f4a:	f500 6011 	add.w	r0, r0, #2320	; 0x910
 8001f4e:	fb15 0001 	smlabb	r0, r5, r1, r0
 8001f52:	6806      	ldr	r6, [r0, #0]
 8001f54:	0336      	lsls	r6, r6, #12
 8001f56:	d41b      	bmi.n	8001f90 <stm32fx07_ep_write_packet+0x54>
		return 0;
	}

	/* Enable endpoint for transmission. */
	REBASE(OTG_DIEPTSIZ(addr)) = OTG_FS_DIEPSIZ0_PKTCNT | len;
 8001f58:	f443 2600 	orr.w	r6, r3, #524288	; 0x80000
 8001f5c:	6006      	str	r6, [r0, #0]
	REBASE(OTG_DIEPCTL(addr)) |= OTG_FS_DIEPCTL0_EPENA |
 8001f5e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001f62:	fb15 0501 	smlabb	r5, r5, r1, r0
 8001f66:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001f68:	582e      	ldr	r6, [r5, r0]
 8001f6a:	f046 4604 	orr.w	r6, r6, #2214592512	; 0x84000000
 8001f6e:	502e      	str	r6, [r5, r0]
				     OTG_FS_DIEPCTL0_CNAK;
	volatile uint32_t *fifo = REBASE_FIFO(addr);
 8001f70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001f72:	3101      	adds	r1, #1
 8001f74:	eb00 3001 	add.w	r0, r0, r1, lsl #12

	/* Copy buffer to endpoint FIFO, note - memcpy does not work */
	for (i = len; i > 0; i -= 4) {
 8001f78:	4601      	mov	r1, r0
 8001f7a:	18c4      	adds	r4, r0, r3
 8001f7c:	1a64      	subs	r4, r4, r1
 8001f7e:	2c00      	cmp	r4, #0
 8001f80:	dd04      	ble.n	8001f8c <stm32fx07_ep_write_packet+0x50>
 8001f82:	1a14      	subs	r4, r2, r0
		*fifo++ = *buf32++;
 8001f84:	5864      	ldr	r4, [r4, r1]
 8001f86:	f841 4b04 	str.w	r4, [r1], #4
 8001f8a:	e7f6      	b.n	8001f7a <stm32fx07_ep_write_packet+0x3e>
	}

	return len;
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	bd70      	pop	{r4, r5, r6, pc}

	addr &= 0x7F;

	/* Return if endpoint is already enabled. */
	if (REBASE(OTG_DIEPTSIZ(addr)) & OTG_FS_DIEPSIZ0_PKTCNT) {
		return 0;
 8001f90:	2000      	movs	r0, #0
	for (i = len; i > 0; i -= 4) {
		*fifo++ = *buf32++;
	}

	return len;
}
 8001f92:	bd70      	pop	{r4, r5, r6, pc}

08001f94 <stm32fx07_ep_read_packet>:

uint16_t stm32fx07_ep_read_packet(usbd_device *usbd_dev, uint8_t addr,
				  void *buf, uint16_t len)
{
 8001f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f96:	460d      	mov	r5, r1
 8001f98:	4611      	mov	r1, r2
	int i;
	uint32_t *buf32 = buf;
	uint32_t extra;

	len = MIN(len, usbd_dev->rxbcnt);
 8001f9a:	f8b0 20e4 	ldrh.w	r2, [r0, #228]	; 0xe4
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	bf34      	ite	cc
 8001fa2:	461e      	movcc	r6, r3
 8001fa4:	4616      	movcs	r6, r2
	usbd_dev->rxbcnt -= len;

	volatile uint32_t *fifo = REBASE_FIFO(addr);
 8001fa6:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	int i;
	uint32_t *buf32 = buf;
	uint32_t extra;

	len = MIN(len, usbd_dev->rxbcnt);
	usbd_dev->rxbcnt -= len;
 8001fac:	1b92      	subs	r2, r2, r6

	volatile uint32_t *fifo = REBASE_FIFO(addr);
 8001fae:	1c6f      	adds	r7, r5, #1
	int i;
	uint32_t *buf32 = buf;
	uint32_t extra;

	len = MIN(len, usbd_dev->rxbcnt);
	usbd_dev->rxbcnt -= len;
 8001fb0:	f8a0 20e4 	strh.w	r2, [r0, #228]	; 0xe4
	return len;
}

uint16_t stm32fx07_ep_read_packet(usbd_device *usbd_dev, uint8_t addr,
				  void *buf, uint16_t len)
{
 8001fb4:	4604      	mov	r4, r0
	uint32_t extra;

	len = MIN(len, usbd_dev->rxbcnt);
	usbd_dev->rxbcnt -= len;

	volatile uint32_t *fifo = REBASE_FIFO(addr);
 8001fb6:	eb03 3707 	add.w	r7, r3, r7, lsl #12
	for (i = len; i >= 4; i -= 4) {
 8001fba:	4632      	mov	r2, r6

uint16_t stm32fx07_ep_read_packet(usbd_device *usbd_dev, uint8_t addr,
				  void *buf, uint16_t len)
{
	int i;
	uint32_t *buf32 = buf;
 8001fbc:	4608      	mov	r0, r1
 8001fbe:	1a7b      	subs	r3, r7, r1

	len = MIN(len, usbd_dev->rxbcnt);
	usbd_dev->rxbcnt -= len;

	volatile uint32_t *fifo = REBASE_FIFO(addr);
	for (i = len; i >= 4; i -= 4) {
 8001fc0:	2a03      	cmp	r2, #3
 8001fc2:	4403      	add	r3, r0
 8001fc4:	dd04      	ble.n	8001fd0 <stm32fx07_ep_read_packet+0x3c>
		*buf32++ = *fifo++;
 8001fc6:	681b      	ldr	r3, [r3, #0]

	len = MIN(len, usbd_dev->rxbcnt);
	usbd_dev->rxbcnt -= len;

	volatile uint32_t *fifo = REBASE_FIFO(addr);
	for (i = len; i >= 4; i -= 4) {
 8001fc8:	3a04      	subs	r2, #4
		*buf32++ = *fifo++;
 8001fca:	f840 3b04 	str.w	r3, [r0], #4
 8001fce:	e7f6      	b.n	8001fbe <stm32fx07_ep_read_packet+0x2a>
	}

	if (i) {
 8001fd0:	b12a      	cbz	r2, 8001fde <stm32fx07_ep_read_packet+0x4a>
		extra = *fifo++;
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	a902      	add	r1, sp, #8
 8001fd6:	f841 3d04 	str.w	r3, [r1, #-4]!
		memcpy(buf32, &extra, i);
 8001fda:	f000 fc21 	bl	8002820 <memcpy>
	}

	REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
 8001fde:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8001fe2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fe4:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 8001fe8:	2220      	movs	r2, #32
 8001fea:	f501 6131 	add.w	r1, r1, #2832	; 0xb10
 8001fee:	fb12 1105 	smlabb	r1, r2, r5, r1
 8001ff2:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
	REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_EPENA |
	    (usbd_dev->force_nak[addr] ?
 8001ff6:	442c      	add	r4, r5
	if (i) {
		extra = *fifo++;
		memcpy(buf32, &extra, i);
	}

	REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
 8001ff8:	6008      	str	r0, [r1, #0]
	REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_EPENA |
 8001ffa:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8001ffe:	fb12 1205 	smlabb	r2, r2, r5, r1
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	f894 10d0 	ldrb.w	r1, [r4, #208]	; 0xd0
 8002008:	58d0      	ldr	r0, [r2, r3]
 800200a:	2900      	cmp	r1, #0
 800200c:	bf0c      	ite	eq
 800200e:	f04f 4104 	moveq.w	r1, #2214592512	; 0x84000000
 8002012:	f04f 4108 	movne.w	r1, #2281701376	; 0x88000000
 8002016:	4301      	orrs	r1, r0
	    (usbd_dev->force_nak[addr] ?
	     OTG_FS_DOEPCTL0_SNAK : OTG_FS_DOEPCTL0_CNAK);

	return len;
}
 8002018:	4630      	mov	r0, r6
		extra = *fifo++;
		memcpy(buf32, &extra, i);
	}

	REBASE(OTG_DOEPTSIZ(addr)) = usbd_dev->doeptsiz[addr];
	REBASE(OTG_DOEPCTL(addr)) |= OTG_FS_DOEPCTL0_EPENA |
 800201a:	50d1      	str	r1, [r2, r3]
	    (usbd_dev->force_nak[addr] ?
	     OTG_FS_DOEPCTL0_SNAK : OTG_FS_DOEPCTL0_CNAK);

	return len;
}
 800201c:	b003      	add	sp, #12
 800201e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002020 <stm32fx07_poll>:

void stm32fx07_poll(usbd_device *usbd_dev)
{
	/* Read interrupt status register. */
	uint32_t intsts = REBASE(OTG_GINTSTS);
 8002020:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8

	return len;
}

void stm32fx07_poll(usbd_device *usbd_dev)
{
 8002024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Read interrupt status register. */
	uint32_t intsts = REBASE(OTG_GINTSTS);
 8002026:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002028:	695e      	ldr	r6, [r3, #20]
	int i;

	if (intsts & OTG_FS_GINTSTS_ENUMDNE) {
 800202a:	04b5      	lsls	r5, r6, #18

	return len;
}

void stm32fx07_poll(usbd_device *usbd_dev)
{
 800202c:	4604      	mov	r4, r0
	/* Read interrupt status register. */
	uint32_t intsts = REBASE(OTG_GINTSTS);
	int i;

	if (intsts & OTG_FS_GINTSTS_ENUMDNE) {
 800202e:	d509      	bpl.n	8002044 <stm32fx07_poll+0x24>
		/* Handle USB RESET condition. */
		REBASE(OTG_GINTSTS) = OTG_FS_GINTSTS_ENUMDNE;
 8002030:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002034:	6159      	str	r1, [r3, #20]
		usbd_dev->fifo_mem_top = usbd_dev->driver->rx_fifo_size;
 8002036:	8e53      	ldrh	r3, [r2, #50]	; 0x32
 8002038:	f8a0 30cc 	strh.w	r3, [r0, #204]	; 0xcc
		if (usbd_dev->user_callback_sof) {
			usbd_dev->user_callback_sof();
		}
		REBASE(OTG_GINTSTS) = OTG_FS_GINTSTS_SOF;
	}
}
 800203c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

	if (intsts & OTG_FS_GINTSTS_ENUMDNE) {
		/* Handle USB RESET condition. */
		REBASE(OTG_GINTSTS) = OTG_FS_GINTSTS_ENUMDNE;
		usbd_dev->fifo_mem_top = usbd_dev->driver->rx_fifo_size;
		_usbd_reset(usbd_dev);
 8002040:	f7ff ba55 	b.w	80014ee <_usbd_reset>
		return;
	}

	/* Note: RX and TX handled differently in this device. */
	if (intsts & OTG_FS_GINTSTS_RXFLVL) {
 8002044:	06f1      	lsls	r1, r6, #27
 8002046:	d531      	bpl.n	80020ac <stm32fx07_poll+0x8c>
		/* Receive FIFO non-empty. */
		uint32_t rxstsp = REBASE(OTG_GRXSTSP);
 8002048:	6a1b      	ldr	r3, [r3, #32]
		uint32_t pktsts = rxstsp & OTG_FS_GRXSTSP_PKTSTS_MASK;
		if ((pktsts != OTG_FS_GRXSTSP_PKTSTS_OUT) &&
 800204a:	f403 12b0 	and.w	r2, r3, #1441792	; 0x160000
 800204e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002052:	d167      	bne.n	8002124 <stm32fx07_poll+0x104>

	/* Note: RX and TX handled differently in this device. */
	if (intsts & OTG_FS_GINTSTS_RXFLVL) {
		/* Receive FIFO non-empty. */
		uint32_t rxstsp = REBASE(OTG_GRXSTSP);
		uint32_t pktsts = rxstsp & OTG_FS_GRXSTSP_PKTSTS_MASK;
 8002054:	f403 12f0 	and.w	r2, r3, #1966080	; 0x1e0000
		if ((pktsts != OTG_FS_GRXSTSP_PKTSTS_OUT) &&
		    (pktsts != OTG_FS_GRXSTSP_PKTSTS_SETUP)) {
			return;
		}

		uint8_t ep = rxstsp & OTG_FS_GRXSTSP_EPNUM_MASK;
 8002058:	f003 050f 	and.w	r5, r3, #15
		} else {
			type = USB_TRANSACTION_OUT;
		}

		/* Save packet size for stm32f107_ep_read_packet(). */
		usbd_dev->rxbcnt = (rxstsp & OTG_FS_GRXSTSP_BCNT_MASK) >> 4;
 800205c:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8002060:	f8a0 30e4 	strh.w	r3, [r0, #228]	; 0xe4
		}

		uint8_t ep = rxstsp & OTG_FS_GRXSTSP_EPNUM_MASK;
		uint8_t type;
		if (pktsts == OTG_FS_GRXSTSP_PKTSTS_SETUP) {
			type = USB_TRANSACTION_SETUP;
 8002064:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8002068:	bf14      	ite	ne
 800206a:	2201      	movne	r2, #1
 800206c:	2202      	moveq	r2, #2
		} else {
			type = USB_TRANSACTION_OUT;
		}

		/* Save packet size for stm32f107_ep_read_packet(). */
		usbd_dev->rxbcnt = (rxstsp & OTG_FS_GRXSTSP_BCNT_MASK) >> 4;
 800206e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		 * FIXME: Why is a delay needed here?
		 * This appears to fix a problem where the first 4 bytes
		 * of the DATA OUT stage of a control transaction are lost.
		 */
		for (i = 0; i < 1000; i++) {
			__asm__("nop");
 8002072:	bf00      	nop
		/*
		 * FIXME: Why is a delay needed here?
		 * This appears to fix a problem where the first 4 bytes
		 * of the DATA OUT stage of a control transaction are lost.
		 */
		for (i = 0; i < 1000; i++) {
 8002074:	3b01      	subs	r3, #1
 8002076:	d1fc      	bne.n	8002072 <stm32fx07_poll+0x52>
			__asm__("nop");
		}

		if (usbd_dev->user_callback_ctr[ep][type]) {
 8002078:	2303      	movs	r3, #3
 800207a:	fb03 2305 	mla	r3, r3, r5, r2
 800207e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002084:	b113      	cbz	r3, 800208c <stm32fx07_poll+0x6c>
			usbd_dev->user_callback_ctr[ep][type] (usbd_dev, ep);
 8002086:	4620      	mov	r0, r4
 8002088:	4629      	mov	r1, r5
 800208a:	4798      	blx	r3
		}

		/* Discard unread packet data. */
		for (i = 0; i < usbd_dev->rxbcnt; i += 4) {
			(void)*REBASE_FIFO(ep);
 800208c:	3501      	adds	r5, #1
		if (usbd_dev->user_callback_ctr[ep][type]) {
			usbd_dev->user_callback_ctr[ep][type] (usbd_dev, ep);
		}

		/* Discard unread packet data. */
		for (i = 0; i < usbd_dev->rxbcnt; i += 4) {
 800208e:	f8b4 10e4 	ldrh.w	r1, [r4, #228]	; 0xe4
			(void)*REBASE_FIFO(ep);
 8002092:	032d      	lsls	r5, r5, #12
		if (usbd_dev->user_callback_ctr[ep][type]) {
			usbd_dev->user_callback_ctr[ep][type] (usbd_dev, ep);
		}

		/* Discard unread packet data. */
		for (i = 0; i < usbd_dev->rxbcnt; i += 4) {
 8002094:	2300      	movs	r3, #0
 8002096:	428b      	cmp	r3, r1
 8002098:	da05      	bge.n	80020a6 <stm32fx07_poll+0x86>
			(void)*REBASE_FIFO(ep);
 800209a:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 800209e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
		if (usbd_dev->user_callback_ctr[ep][type]) {
			usbd_dev->user_callback_ctr[ep][type] (usbd_dev, ep);
		}

		/* Discard unread packet data. */
		for (i = 0; i < usbd_dev->rxbcnt; i += 4) {
 80020a0:	3304      	adds	r3, #4
			(void)*REBASE_FIFO(ep);
 80020a2:	58aa      	ldr	r2, [r5, r2]
 80020a4:	e7f7      	b.n	8002096 <stm32fx07_poll+0x76>
		}

		usbd_dev->rxbcnt = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f8a4 30e4 	strh.w	r3, [r4, #228]	; 0xe4
		if (usbd_dev->user_callback_ctr[ep][type]) {
			usbd_dev->user_callback_ctr[ep][type] (usbd_dev, ep);
		}

		/* Discard unread packet data. */
		for (i = 0; i < usbd_dev->rxbcnt; i += 4) {
 80020ac:	2500      	movs	r5, #0
	/*
	 * There is no global interrupt flag for transmit complete.
	 * The XFRC bit must be checked in each OTG_FS_DIEPINT(x).
	 */
	for (i = 0; i < 4; i++) { /* Iterate over endpoints. */
		if (REBASE(OTG_DIEPINT(i)) & OTG_FS_DIEPINTX_XFRC) {
 80020ae:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	016f      	lsls	r7, r5, #5
 80020b6:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80020ba:	59db      	ldr	r3, [r3, r7]
 80020bc:	07da      	lsls	r2, r3, #31
 80020be:	d50e      	bpl.n	80020de <stm32fx07_poll+0xbe>
 80020c0:	230c      	movs	r3, #12
 80020c2:	fb03 4305 	mla	r3, r3, r5, r4
			/* Transfer complete. */
			if (usbd_dev->user_callback_ctr[i]
						       [USB_TRANSACTION_IN]) {
 80020c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
	 * The XFRC bit must be checked in each OTG_FS_DIEPINT(x).
	 */
	for (i = 0; i < 4; i++) { /* Iterate over endpoints. */
		if (REBASE(OTG_DIEPINT(i)) & OTG_FS_DIEPINTX_XFRC) {
			/* Transfer complete. */
			if (usbd_dev->user_callback_ctr[i]
 80020c8:	b113      	cbz	r3, 80020d0 <stm32fx07_poll+0xb0>
						       [USB_TRANSACTION_IN]) {
				usbd_dev->user_callback_ctr[i]
					[USB_TRANSACTION_IN](usbd_dev, i);
 80020ca:	4620      	mov	r0, r4
 80020cc:	b2e9      	uxtb	r1, r5
 80020ce:	4798      	blx	r3
			}

			REBASE(OTG_DIEPINT(i)) = OTG_FS_DIEPINTX_XFRC;
 80020d0:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80020da:	2201      	movs	r2, #1
 80020dc:	51da      	str	r2, [r3, r7]

	/*
	 * There is no global interrupt flag for transmit complete.
	 * The XFRC bit must be checked in each OTG_FS_DIEPINT(x).
	 */
	for (i = 0; i < 4; i++) { /* Iterate over endpoints. */
 80020de:	3501      	adds	r5, #1
 80020e0:	2d04      	cmp	r5, #4
 80020e2:	d1e4      	bne.n	80020ae <stm32fx07_poll+0x8e>

			REBASE(OTG_DIEPINT(i)) = OTG_FS_DIEPINTX_XFRC;
		}
	}

	if (intsts & OTG_FS_GINTSTS_USBSUSP) {
 80020e4:	0533      	lsls	r3, r6, #20
 80020e6:	d508      	bpl.n	80020fa <stm32fx07_poll+0xda>
		if (usbd_dev->user_callback_suspend) {
 80020e8:	6a23      	ldr	r3, [r4, #32]
 80020ea:	b103      	cbz	r3, 80020ee <stm32fx07_poll+0xce>
			usbd_dev->user_callback_suspend();
 80020ec:	4798      	blx	r3
		}
		REBASE(OTG_GINTSTS) = OTG_FS_GINTSTS_USBSUSP;
 80020ee:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020f8:	615a      	str	r2, [r3, #20]
	}

	if (intsts & OTG_FS_GINTSTS_WKUPINT) {
 80020fa:	2e00      	cmp	r6, #0
 80020fc:	da08      	bge.n	8002110 <stm32fx07_poll+0xf0>
		if (usbd_dev->user_callback_resume) {
 80020fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002100:	b103      	cbz	r3, 8002104 <stm32fx07_poll+0xe4>
			usbd_dev->user_callback_resume();
 8002102:	4798      	blx	r3
		}
		REBASE(OTG_GINTSTS) = OTG_FS_GINTSTS_WKUPINT;
 8002104:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800210e:	615a      	str	r2, [r3, #20]
	}

	if (intsts & OTG_FS_GINTSTS_SOF) {
 8002110:	0737      	lsls	r7, r6, #28
 8002112:	d507      	bpl.n	8002124 <stm32fx07_poll+0x104>
		if (usbd_dev->user_callback_sof) {
 8002114:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002116:	b103      	cbz	r3, 800211a <stm32fx07_poll+0xfa>
			usbd_dev->user_callback_sof();
 8002118:	4798      	blx	r3
		}
		REBASE(OTG_GINTSTS) = OTG_FS_GINTSTS_SOF;
 800211a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	2208      	movs	r2, #8
 8002122:	615a      	str	r2, [r3, #20]
 8002124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002126 <stm32fx07_disconnect>:
	}
}

void stm32fx07_disconnect(usbd_device *usbd_dev, bool disconnected)
{
 8002126:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
	if (disconnected) {
		REBASE(OTG_DCTL) |= OTG_FS_DCTL_SDIS;
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
	}
}

void stm32fx07_disconnect(usbd_device *usbd_dev, bool disconnected)
{
	if (disconnected) {
 8002130:	b111      	cbz	r1, 8002138 <stm32fx07_disconnect+0x12>
		REBASE(OTG_DCTL) |= OTG_FS_DCTL_SDIS;
 8002132:	f042 0202 	orr.w	r2, r2, #2
 8002136:	e001      	b.n	800213c <stm32fx07_disconnect+0x16>
	} else {
		REBASE(OTG_DCTL) &= ~OTG_FS_DCTL_SDIS;
 8002138:	f022 0202 	bic.w	r2, r2, #2
 800213c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8002140:	4770      	bx	lr
	...

08002144 <abort>:
 8002144:	b508      	push	{r3, lr}
 8002146:	2006      	movs	r0, #6
 8002148:	f000 fca6 	bl	8002a98 <raise>
 800214c:	2001      	movs	r0, #1
 800214e:	f004 fde1 	bl	8006d14 <_exit>
 8002152:	bf00      	nop

08002154 <_cleanup_r>:
 8002154:	f245 51cd 	movw	r1, #21965	; 0x55cd
 8002158:	f6c0 0100 	movt	r1, #2048	; 0x800
 800215c:	f000 b880 	b.w	8002260 <_fwalk>

08002160 <__sinit>:
 8002160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002164:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002166:	b083      	sub	sp, #12
 8002168:	4607      	mov	r7, r0
 800216a:	2c00      	cmp	r4, #0
 800216c:	d170      	bne.n	8002250 <__sinit+0xf0>
 800216e:	6845      	ldr	r5, [r0, #4]
 8002170:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8002174:	f242 1355 	movw	r3, #8533	; 0x2155
 8002178:	f6c0 0300 	movt	r3, #2048	; 0x800
 800217c:	2003      	movs	r0, #3
 800217e:	f507 713b 	add.w	r1, r7, #748	; 0x2ec
 8002182:	2204      	movs	r2, #4
 8002184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002186:	f8c7 02e4 	str.w	r0, [r7, #740]	; 0x2e4
 800218a:	f8c7 12e8 	str.w	r1, [r7, #744]	; 0x2e8
 800218e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8002192:	81aa      	strh	r2, [r5, #12]
 8002194:	602c      	str	r4, [r5, #0]
 8002196:	606c      	str	r4, [r5, #4]
 8002198:	60ac      	str	r4, [r5, #8]
 800219a:	666c      	str	r4, [r5, #100]	; 0x64
 800219c:	81ec      	strh	r4, [r5, #14]
 800219e:	612c      	str	r4, [r5, #16]
 80021a0:	616c      	str	r4, [r5, #20]
 80021a2:	61ac      	str	r4, [r5, #24]
 80021a4:	4621      	mov	r1, r4
 80021a6:	2208      	movs	r2, #8
 80021a8:	f000 fbd4 	bl	8002954 <memset>
 80021ac:	f642 2bd5 	movw	fp, #10965	; 0x2ad5
 80021b0:	68be      	ldr	r6, [r7, #8]
 80021b2:	61ed      	str	r5, [r5, #28]
 80021b4:	f642 2af9 	movw	sl, #11001	; 0x2af9
 80021b8:	f642 3931 	movw	r9, #11057	; 0x2b31
 80021bc:	f642 3851 	movw	r8, #11089	; 0x2b51
 80021c0:	2301      	movs	r3, #1
 80021c2:	f6c0 0b00 	movt	fp, #2048	; 0x800
 80021c6:	f6c0 0a00 	movt	sl, #2048	; 0x800
 80021ca:	f6c0 0900 	movt	r9, #2048	; 0x800
 80021ce:	f6c0 0800 	movt	r8, #2048	; 0x800
 80021d2:	2209      	movs	r2, #9
 80021d4:	f8c5 b020 	str.w	fp, [r5, #32]
 80021d8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80021dc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80021e0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80021e4:	4621      	mov	r1, r4
 80021e6:	81f3      	strh	r3, [r6, #14]
 80021e8:	81b2      	strh	r2, [r6, #12]
 80021ea:	6034      	str	r4, [r6, #0]
 80021ec:	6074      	str	r4, [r6, #4]
 80021ee:	60b4      	str	r4, [r6, #8]
 80021f0:	6674      	str	r4, [r6, #100]	; 0x64
 80021f2:	6134      	str	r4, [r6, #16]
 80021f4:	6174      	str	r4, [r6, #20]
 80021f6:	61b4      	str	r4, [r6, #24]
 80021f8:	2208      	movs	r2, #8
 80021fa:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80021fe:	9301      	str	r3, [sp, #4]
 8002200:	f000 fba8 	bl	8002954 <memset>
 8002204:	68fd      	ldr	r5, [r7, #12]
 8002206:	f8c6 b020 	str.w	fp, [r6, #32]
 800220a:	2012      	movs	r0, #18
 800220c:	2202      	movs	r2, #2
 800220e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8002212:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8002216:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 800221a:	61f6      	str	r6, [r6, #28]
 800221c:	4621      	mov	r1, r4
 800221e:	81a8      	strh	r0, [r5, #12]
 8002220:	81ea      	strh	r2, [r5, #14]
 8002222:	602c      	str	r4, [r5, #0]
 8002224:	606c      	str	r4, [r5, #4]
 8002226:	60ac      	str	r4, [r5, #8]
 8002228:	666c      	str	r4, [r5, #100]	; 0x64
 800222a:	612c      	str	r4, [r5, #16]
 800222c:	616c      	str	r4, [r5, #20]
 800222e:	61ac      	str	r4, [r5, #24]
 8002230:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8002234:	2208      	movs	r2, #8
 8002236:	f000 fb8d 	bl	8002954 <memset>
 800223a:	9b01      	ldr	r3, [sp, #4]
 800223c:	f8c5 b020 	str.w	fp, [r5, #32]
 8002240:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8002244:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8002248:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800224c:	61ed      	str	r5, [r5, #28]
 800224e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002250:	b003      	add	sp, #12
 8002252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002256:	bf00      	nop

08002258 <__sfp_lock_acquire>:
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop

0800225c <__sfp_lock_release>:
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop

08002260 <_fwalk>:
 8002260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002264:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8002268:	4688      	mov	r8, r1
 800226a:	d01a      	beq.n	80022a2 <_fwalk+0x42>
 800226c:	2600      	movs	r6, #0
 800226e:	687d      	ldr	r5, [r7, #4]
 8002270:	68bc      	ldr	r4, [r7, #8]
 8002272:	3d01      	subs	r5, #1
 8002274:	d40f      	bmi.n	8002296 <_fwalk+0x36>
 8002276:	89a3      	ldrh	r3, [r4, #12]
 8002278:	2b01      	cmp	r3, #1
 800227a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800227e:	d906      	bls.n	800228e <_fwalk+0x2e>
 8002280:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8002284:	3301      	adds	r3, #1
 8002286:	4620      	mov	r0, r4
 8002288:	d001      	beq.n	800228e <_fwalk+0x2e>
 800228a:	47c0      	blx	r8
 800228c:	4306      	orrs	r6, r0
 800228e:	1c6b      	adds	r3, r5, #1
 8002290:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8002294:	d1ef      	bne.n	8002276 <_fwalk+0x16>
 8002296:	683f      	ldr	r7, [r7, #0]
 8002298:	2f00      	cmp	r7, #0
 800229a:	d1e8      	bne.n	800226e <_fwalk+0xe>
 800229c:	4630      	mov	r0, r6
 800229e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022a2:	463e      	mov	r6, r7
 80022a4:	4630      	mov	r0, r6
 80022a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022aa:	bf00      	nop

080022ac <malloc>:
 80022ac:	f240 4350 	movw	r3, #1104	; 0x450
 80022b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022b4:	4601      	mov	r1, r0
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	f000 b800 	b.w	80022bc <_malloc_r>

080022bc <_malloc_r>:
 80022bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022c0:	f101 050b 	add.w	r5, r1, #11
 80022c4:	2d16      	cmp	r5, #22
 80022c6:	bf87      	ittee	hi
 80022c8:	f025 0507 	bichi.w	r5, r5, #7
 80022cc:	0feb      	lsrhi	r3, r5, #31
 80022ce:	2300      	movls	r3, #0
 80022d0:	2510      	movls	r5, #16
 80022d2:	428d      	cmp	r5, r1
 80022d4:	bf2c      	ite	cs
 80022d6:	4619      	movcs	r1, r3
 80022d8:	f043 0101 	orrcc.w	r1, r3, #1
 80022dc:	b083      	sub	sp, #12
 80022de:	4607      	mov	r7, r0
 80022e0:	2900      	cmp	r1, #0
 80022e2:	f040 80b5 	bne.w	8002450 <_malloc_r+0x194>
 80022e6:	f000 fb7f 	bl	80029e8 <__malloc_lock>
 80022ea:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80022ee:	d21f      	bcs.n	8002330 <_malloc_r+0x74>
 80022f0:	f240 4654 	movw	r6, #1108	; 0x454
 80022f4:	f2c2 0600 	movt	r6, #8192	; 0x2000
 80022f8:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 80022fc:	eb06 03cc 	add.w	r3, r6, ip, lsl #3
 8002300:	68dc      	ldr	r4, [r3, #12]
 8002302:	429c      	cmp	r4, r3
 8002304:	f000 81f4 	beq.w	80026f0 <_malloc_r+0x434>
 8002308:	6863      	ldr	r3, [r4, #4]
 800230a:	68e2      	ldr	r2, [r4, #12]
 800230c:	68a1      	ldr	r1, [r4, #8]
 800230e:	f023 0303 	bic.w	r3, r3, #3
 8002312:	4423      	add	r3, r4
 8002314:	4638      	mov	r0, r7
 8002316:	685d      	ldr	r5, [r3, #4]
 8002318:	60ca      	str	r2, [r1, #12]
 800231a:	f045 0501 	orr.w	r5, r5, #1
 800231e:	6091      	str	r1, [r2, #8]
 8002320:	605d      	str	r5, [r3, #4]
 8002322:	f000 fb63 	bl	80029ec <__malloc_unlock>
 8002326:	3408      	adds	r4, #8
 8002328:	4620      	mov	r0, r4
 800232a:	b003      	add	sp, #12
 800232c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002330:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 8002334:	bf04      	itt	eq
 8002336:	217e      	moveq	r1, #126	; 0x7e
 8002338:	f04f 0c3f 	moveq.w	ip, #63	; 0x3f
 800233c:	f040 808f 	bne.w	800245e <_malloc_r+0x1a2>
 8002340:	f240 4654 	movw	r6, #1108	; 0x454
 8002344:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8002348:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 800234c:	68cc      	ldr	r4, [r1, #12]
 800234e:	42a1      	cmp	r1, r4
 8002350:	d106      	bne.n	8002360 <_malloc_r+0xa4>
 8002352:	e00d      	b.n	8002370 <_malloc_r+0xb4>
 8002354:	2b00      	cmp	r3, #0
 8002356:	f280 8163 	bge.w	8002620 <_malloc_r+0x364>
 800235a:	68e4      	ldr	r4, [r4, #12]
 800235c:	42a1      	cmp	r1, r4
 800235e:	d007      	beq.n	8002370 <_malloc_r+0xb4>
 8002360:	6862      	ldr	r2, [r4, #4]
 8002362:	f022 0203 	bic.w	r2, r2, #3
 8002366:	1b53      	subs	r3, r2, r5
 8002368:	2b0f      	cmp	r3, #15
 800236a:	ddf3      	ble.n	8002354 <_malloc_r+0x98>
 800236c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8002370:	f10c 0c01 	add.w	ip, ip, #1
 8002374:	f240 4354 	movw	r3, #1108	; 0x454
 8002378:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800237c:	6934      	ldr	r4, [r6, #16]
 800237e:	f103 0e08 	add.w	lr, r3, #8
 8002382:	4574      	cmp	r4, lr
 8002384:	bf08      	it	eq
 8002386:	685a      	ldreq	r2, [r3, #4]
 8002388:	d022      	beq.n	80023d0 <_malloc_r+0x114>
 800238a:	6861      	ldr	r1, [r4, #4]
 800238c:	f021 0103 	bic.w	r1, r1, #3
 8002390:	1b4a      	subs	r2, r1, r5
 8002392:	2a0f      	cmp	r2, #15
 8002394:	f300 8190 	bgt.w	80026b8 <_malloc_r+0x3fc>
 8002398:	2a00      	cmp	r2, #0
 800239a:	f8c3 e014 	str.w	lr, [r3, #20]
 800239e:	f8c3 e010 	str.w	lr, [r3, #16]
 80023a2:	da67      	bge.n	8002474 <_malloc_r+0x1b8>
 80023a4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80023a8:	f080 815f 	bcs.w	800266a <_malloc_r+0x3ae>
 80023ac:	08c9      	lsrs	r1, r1, #3
 80023ae:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
 80023b2:	ea4f 08a1 	mov.w	r8, r1, asr #2
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	6881      	ldr	r1, [r0, #8]
 80023ba:	60e0      	str	r0, [r4, #12]
 80023bc:	f04f 0901 	mov.w	r9, #1
 80023c0:	fa09 f808 	lsl.w	r8, r9, r8
 80023c4:	ea48 0202 	orr.w	r2, r8, r2
 80023c8:	60a1      	str	r1, [r4, #8]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	6084      	str	r4, [r0, #8]
 80023ce:	60cc      	str	r4, [r1, #12]
 80023d0:	ea4f 03ac 	mov.w	r3, ip, asr #2
 80023d4:	2001      	movs	r0, #1
 80023d6:	4098      	lsls	r0, r3
 80023d8:	4290      	cmp	r0, r2
 80023da:	d858      	bhi.n	800248e <_malloc_r+0x1d2>
 80023dc:	4202      	tst	r2, r0
 80023de:	d106      	bne.n	80023ee <_malloc_r+0x132>
 80023e0:	f02c 0c03 	bic.w	ip, ip, #3
 80023e4:	0040      	lsls	r0, r0, #1
 80023e6:	4202      	tst	r2, r0
 80023e8:	f10c 0c04 	add.w	ip, ip, #4
 80023ec:	d0fa      	beq.n	80023e4 <_malloc_r+0x128>
 80023ee:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
 80023f2:	4644      	mov	r4, r8
 80023f4:	46e1      	mov	r9, ip
 80023f6:	68e3      	ldr	r3, [r4, #12]
 80023f8:	429c      	cmp	r4, r3
 80023fa:	d107      	bne.n	800240c <_malloc_r+0x150>
 80023fc:	e16f      	b.n	80026de <_malloc_r+0x422>
 80023fe:	2a00      	cmp	r2, #0
 8002400:	f280 8180 	bge.w	8002704 <_malloc_r+0x448>
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	429c      	cmp	r4, r3
 8002408:	f000 8169 	beq.w	80026de <_malloc_r+0x422>
 800240c:	6859      	ldr	r1, [r3, #4]
 800240e:	f021 0103 	bic.w	r1, r1, #3
 8002412:	1b4a      	subs	r2, r1, r5
 8002414:	2a0f      	cmp	r2, #15
 8002416:	ddf2      	ble.n	80023fe <_malloc_r+0x142>
 8002418:	461c      	mov	r4, r3
 800241a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800241e:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8002422:	1959      	adds	r1, r3, r5
 8002424:	f045 0901 	orr.w	r9, r5, #1
 8002428:	f042 0501 	orr.w	r5, r2, #1
 800242c:	f8c3 9004 	str.w	r9, [r3, #4]
 8002430:	4638      	mov	r0, r7
 8002432:	f8c8 c00c 	str.w	ip, [r8, #12]
 8002436:	f8cc 8008 	str.w	r8, [ip, #8]
 800243a:	6171      	str	r1, [r6, #20]
 800243c:	6131      	str	r1, [r6, #16]
 800243e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8002442:	f8c1 e008 	str.w	lr, [r1, #8]
 8002446:	604d      	str	r5, [r1, #4]
 8002448:	508a      	str	r2, [r1, r2]
 800244a:	f000 facf 	bl	80029ec <__malloc_unlock>
 800244e:	e76b      	b.n	8002328 <_malloc_r+0x6c>
 8002450:	230c      	movs	r3, #12
 8002452:	2400      	movs	r4, #0
 8002454:	6003      	str	r3, [r0, #0]
 8002456:	4620      	mov	r0, r4
 8002458:	b003      	add	sp, #12
 800245a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800245e:	f1bc 0f04 	cmp.w	ip, #4
 8002462:	f200 80ee 	bhi.w	8002642 <_malloc_r+0x386>
 8002466:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 800246a:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 800246e:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8002472:	e765      	b.n	8002340 <_malloc_r+0x84>
 8002474:	4421      	add	r1, r4
 8002476:	4638      	mov	r0, r7
 8002478:	684b      	ldr	r3, [r1, #4]
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	604b      	str	r3, [r1, #4]
 8002480:	f000 fab4 	bl	80029ec <__malloc_unlock>
 8002484:	3408      	adds	r4, #8
 8002486:	4620      	mov	r0, r4
 8002488:	b003      	add	sp, #12
 800248a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800248e:	68b4      	ldr	r4, [r6, #8]
 8002490:	6863      	ldr	r3, [r4, #4]
 8002492:	f023 0903 	bic.w	r9, r3, #3
 8002496:	454d      	cmp	r5, r9
 8002498:	d804      	bhi.n	80024a4 <_malloc_r+0x1e8>
 800249a:	ebc5 0309 	rsb	r3, r5, r9
 800249e:	2b0f      	cmp	r3, #15
 80024a0:	f300 80ae 	bgt.w	8002600 <_malloc_r+0x344>
 80024a4:	f648 23f0 	movw	r3, #35568	; 0x8af0
 80024a8:	f640 0a60 	movw	sl, #2144	; 0x860
 80024ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024b0:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f8da 1000 	ldr.w	r1, [sl]
 80024ba:	442b      	add	r3, r5
 80024bc:	3101      	adds	r1, #1
 80024be:	bf1d      	ittte	ne
 80024c0:	f503 5380 	addne.w	r3, r3, #4096	; 0x1000
 80024c4:	330f      	addne	r3, #15
 80024c6:	f423 637f 	bicne.w	r3, r3, #4080	; 0xff0
 80024ca:	f103 0c10 	addeq.w	ip, r3, #16
 80024ce:	bf18      	it	ne
 80024d0:	f023 0c0f 	bicne.w	ip, r3, #15
 80024d4:	eb04 0209 	add.w	r2, r4, r9
 80024d8:	4661      	mov	r1, ip
 80024da:	4638      	mov	r0, r7
 80024dc:	9201      	str	r2, [sp, #4]
 80024de:	f8cd c000 	str.w	ip, [sp]
 80024e2:	f000 fa99 	bl	8002a18 <_sbrk_r>
 80024e6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80024ea:	4680      	mov	r8, r0
 80024ec:	9a01      	ldr	r2, [sp, #4]
 80024ee:	f8dd c000 	ldr.w	ip, [sp]
 80024f2:	f000 811d 	beq.w	8002730 <_malloc_r+0x474>
 80024f6:	4282      	cmp	r2, r0
 80024f8:	f200 8117 	bhi.w	800272a <_malloc_r+0x46e>
 80024fc:	f648 2bf4 	movw	fp, #35572	; 0x8af4
 8002500:	f2c2 0b00 	movt	fp, #8192	; 0x2000
 8002504:	4542      	cmp	r2, r8
 8002506:	f8db 3000 	ldr.w	r3, [fp]
 800250a:	4463      	add	r3, ip
 800250c:	f8cb 3000 	str.w	r3, [fp]
 8002510:	f000 815d 	beq.w	80027ce <_malloc_r+0x512>
 8002514:	f8da 0000 	ldr.w	r0, [sl]
 8002518:	f640 0160 	movw	r1, #2144	; 0x860
 800251c:	3001      	adds	r0, #1
 800251e:	bf18      	it	ne
 8002520:	ebc2 0208 	rsbne	r2, r2, r8
 8002524:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002528:	bf16      	itet	ne
 800252a:	189b      	addne	r3, r3, r2
 800252c:	f8c1 8000 	streq.w	r8, [r1]
 8002530:	f8cb 3000 	strne.w	r3, [fp]
 8002534:	f018 0307 	ands.w	r3, r8, #7
 8002538:	bf1f      	itttt	ne
 800253a:	f1c3 0208 	rsbne	r2, r3, #8
 800253e:	4490      	addne	r8, r2
 8002540:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8002544:	f103 0a08 	addne.w	sl, r3, #8
 8002548:	eb08 030c 	add.w	r3, r8, ip
 800254c:	bf08      	it	eq
 800254e:	f44f 5a80 	moveq.w	sl, #4096	; 0x1000
 8002552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002556:	ebc3 0a0a 	rsb	sl, r3, sl
 800255a:	4651      	mov	r1, sl
 800255c:	4638      	mov	r0, r7
 800255e:	f000 fa5b 	bl	8002a18 <_sbrk_r>
 8002562:	1c43      	adds	r3, r0, #1
 8002564:	bf18      	it	ne
 8002566:	ebc8 0200 	rsbne	r2, r8, r0
 800256a:	f8db 3000 	ldr.w	r3, [fp]
 800256e:	f8c6 8008 	str.w	r8, [r6, #8]
 8002572:	bf15      	itete	ne
 8002574:	4452      	addne	r2, sl
 8002576:	f04f 0a00 	moveq.w	sl, #0
 800257a:	f042 0201 	orrne.w	r2, r2, #1
 800257e:	2201      	moveq	r2, #1
 8002580:	4453      	add	r3, sl
 8002582:	42b4      	cmp	r4, r6
 8002584:	f648 2af4 	movw	sl, #35572	; 0x8af4
 8002588:	f8c8 2004 	str.w	r2, [r8, #4]
 800258c:	f8cb 3000 	str.w	r3, [fp]
 8002590:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 8002594:	d015      	beq.n	80025c2 <_malloc_r+0x306>
 8002596:	f1b9 0f0f 	cmp.w	r9, #15
 800259a:	f240 80f8 	bls.w	800278e <_malloc_r+0x4d2>
 800259e:	6861      	ldr	r1, [r4, #4]
 80025a0:	f1a9 020c 	sub.w	r2, r9, #12
 80025a4:	f022 0207 	bic.w	r2, r2, #7
 80025a8:	f001 0e01 	and.w	lr, r1, #1
 80025ac:	18a1      	adds	r1, r4, r2
 80025ae:	2005      	movs	r0, #5
 80025b0:	ea42 0e0e 	orr.w	lr, r2, lr
 80025b4:	2a0f      	cmp	r2, #15
 80025b6:	f8c4 e004 	str.w	lr, [r4, #4]
 80025ba:	6048      	str	r0, [r1, #4]
 80025bc:	6088      	str	r0, [r1, #8]
 80025be:	f200 8112 	bhi.w	80027e6 <_malloc_r+0x52a>
 80025c2:	f648 22ec 	movw	r2, #35564	; 0x8aec
 80025c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80025ca:	68b4      	ldr	r4, [r6, #8]
 80025cc:	6811      	ldr	r1, [r2, #0]
 80025ce:	428b      	cmp	r3, r1
 80025d0:	bf88      	it	hi
 80025d2:	6013      	strhi	r3, [r2, #0]
 80025d4:	f648 22e8 	movw	r2, #35560	; 0x8ae8
 80025d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80025dc:	6811      	ldr	r1, [r2, #0]
 80025de:	428b      	cmp	r3, r1
 80025e0:	bf88      	it	hi
 80025e2:	6013      	strhi	r3, [r2, #0]
 80025e4:	6862      	ldr	r2, [r4, #4]
 80025e6:	f022 0203 	bic.w	r2, r2, #3
 80025ea:	4295      	cmp	r5, r2
 80025ec:	ebc5 0302 	rsb	r3, r5, r2
 80025f0:	d801      	bhi.n	80025f6 <_malloc_r+0x33a>
 80025f2:	2b0f      	cmp	r3, #15
 80025f4:	dc04      	bgt.n	8002600 <_malloc_r+0x344>
 80025f6:	4638      	mov	r0, r7
 80025f8:	f000 f9f8 	bl	80029ec <__malloc_unlock>
 80025fc:	2400      	movs	r4, #0
 80025fe:	e693      	b.n	8002328 <_malloc_r+0x6c>
 8002600:	1962      	adds	r2, r4, r5
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	f045 0501 	orr.w	r5, r5, #1
 800260a:	6065      	str	r5, [r4, #4]
 800260c:	4638      	mov	r0, r7
 800260e:	60b2      	str	r2, [r6, #8]
 8002610:	6053      	str	r3, [r2, #4]
 8002612:	f000 f9eb 	bl	80029ec <__malloc_unlock>
 8002616:	3408      	adds	r4, #8
 8002618:	4620      	mov	r0, r4
 800261a:	b003      	add	sp, #12
 800261c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002620:	4422      	add	r2, r4
 8002622:	68e3      	ldr	r3, [r4, #12]
 8002624:	6850      	ldr	r0, [r2, #4]
 8002626:	68a1      	ldr	r1, [r4, #8]
 8002628:	f040 0501 	orr.w	r5, r0, #1
 800262c:	60cb      	str	r3, [r1, #12]
 800262e:	4638      	mov	r0, r7
 8002630:	6099      	str	r1, [r3, #8]
 8002632:	6055      	str	r5, [r2, #4]
 8002634:	f000 f9da 	bl	80029ec <__malloc_unlock>
 8002638:	3408      	adds	r4, #8
 800263a:	4620      	mov	r0, r4
 800263c:	b003      	add	sp, #12
 800263e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002642:	f1bc 0f14 	cmp.w	ip, #20
 8002646:	bf9c      	itt	ls
 8002648:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
 800264c:	ea4f 014c 	movls.w	r1, ip, lsl #1
 8002650:	f67f ae76 	bls.w	8002340 <_malloc_r+0x84>
 8002654:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 8002658:	f200 808f 	bhi.w	800277a <_malloc_r+0x4be>
 800265c:	ea4f 3c15 	mov.w	ip, r5, lsr #12
 8002660:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 8002664:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8002668:	e66a      	b.n	8002340 <_malloc_r+0x84>
 800266a:	0a4b      	lsrs	r3, r1, #9
 800266c:	2b04      	cmp	r3, #4
 800266e:	d958      	bls.n	8002722 <_malloc_r+0x466>
 8002670:	2b14      	cmp	r3, #20
 8002672:	bf9c      	itt	ls
 8002674:	f103 025b 	addls.w	r2, r3, #91	; 0x5b
 8002678:	0050      	lslls	r0, r2, #1
 800267a:	d905      	bls.n	8002688 <_malloc_r+0x3cc>
 800267c:	2b54      	cmp	r3, #84	; 0x54
 800267e:	f200 80ba 	bhi.w	80027f6 <_malloc_r+0x53a>
 8002682:	0b0a      	lsrs	r2, r1, #12
 8002684:	326e      	adds	r2, #110	; 0x6e
 8002686:	0050      	lsls	r0, r2, #1
 8002688:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 800268c:	f240 4854 	movw	r8, #1108	; 0x454
 8002690:	6883      	ldr	r3, [r0, #8]
 8002692:	4283      	cmp	r3, r0
 8002694:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8002698:	d07f      	beq.n	800279a <_malloc_r+0x4de>
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	f022 0203 	bic.w	r2, r2, #3
 80026a0:	4291      	cmp	r1, r2
 80026a2:	d202      	bcs.n	80026aa <_malloc_r+0x3ee>
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	4298      	cmp	r0, r3
 80026a8:	d1f7      	bne.n	800269a <_malloc_r+0x3de>
 80026aa:	68d9      	ldr	r1, [r3, #12]
 80026ac:	6872      	ldr	r2, [r6, #4]
 80026ae:	60e1      	str	r1, [r4, #12]
 80026b0:	60a3      	str	r3, [r4, #8]
 80026b2:	608c      	str	r4, [r1, #8]
 80026b4:	60dc      	str	r4, [r3, #12]
 80026b6:	e68b      	b.n	80023d0 <_malloc_r+0x114>
 80026b8:	1961      	adds	r1, r4, r5
 80026ba:	f042 0601 	orr.w	r6, r2, #1
 80026be:	f045 0501 	orr.w	r5, r5, #1
 80026c2:	6065      	str	r5, [r4, #4]
 80026c4:	4638      	mov	r0, r7
 80026c6:	6159      	str	r1, [r3, #20]
 80026c8:	6119      	str	r1, [r3, #16]
 80026ca:	f8c1 e00c 	str.w	lr, [r1, #12]
 80026ce:	f8c1 e008 	str.w	lr, [r1, #8]
 80026d2:	604e      	str	r6, [r1, #4]
 80026d4:	508a      	str	r2, [r1, r2]
 80026d6:	3408      	adds	r4, #8
 80026d8:	f000 f988 	bl	80029ec <__malloc_unlock>
 80026dc:	e624      	b.n	8002328 <_malloc_r+0x6c>
 80026de:	f109 0901 	add.w	r9, r9, #1
 80026e2:	f019 0f03 	tst.w	r9, #3
 80026e6:	f104 0408 	add.w	r4, r4, #8
 80026ea:	f47f ae84 	bne.w	80023f6 <_malloc_r+0x13a>
 80026ee:	e028      	b.n	8002742 <_malloc_r+0x486>
 80026f0:	f104 0308 	add.w	r3, r4, #8
 80026f4:	6964      	ldr	r4, [r4, #20]
 80026f6:	42a3      	cmp	r3, r4
 80026f8:	bf08      	it	eq
 80026fa:	f10c 0c02 	addeq.w	ip, ip, #2
 80026fe:	f43f ae39 	beq.w	8002374 <_malloc_r+0xb8>
 8002702:	e601      	b.n	8002308 <_malloc_r+0x4c>
 8002704:	4419      	add	r1, r3
 8002706:	461c      	mov	r4, r3
 8002708:	6848      	ldr	r0, [r1, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8002710:	f040 0501 	orr.w	r5, r0, #1
 8002714:	604d      	str	r5, [r1, #4]
 8002716:	4638      	mov	r0, r7
 8002718:	60d3      	str	r3, [r2, #12]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	f000 f966 	bl	80029ec <__malloc_unlock>
 8002720:	e602      	b.n	8002328 <_malloc_r+0x6c>
 8002722:	098a      	lsrs	r2, r1, #6
 8002724:	3238      	adds	r2, #56	; 0x38
 8002726:	0050      	lsls	r0, r2, #1
 8002728:	e7ae      	b.n	8002688 <_malloc_r+0x3cc>
 800272a:	42b4      	cmp	r4, r6
 800272c:	f43f aee6 	beq.w	80024fc <_malloc_r+0x240>
 8002730:	68b4      	ldr	r4, [r6, #8]
 8002732:	6862      	ldr	r2, [r4, #4]
 8002734:	f022 0203 	bic.w	r2, r2, #3
 8002738:	e757      	b.n	80025ea <_malloc_r+0x32e>
 800273a:	f8d8 8000 	ldr.w	r8, [r8]
 800273e:	4598      	cmp	r8, r3
 8002740:	d16b      	bne.n	800281a <_malloc_r+0x55e>
 8002742:	f01c 0f03 	tst.w	ip, #3
 8002746:	f1a8 0308 	sub.w	r3, r8, #8
 800274a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800274e:	d1f4      	bne.n	800273a <_malloc_r+0x47e>
 8002750:	6873      	ldr	r3, [r6, #4]
 8002752:	ea23 0300 	bic.w	r3, r3, r0
 8002756:	6073      	str	r3, [r6, #4]
 8002758:	0040      	lsls	r0, r0, #1
 800275a:	4298      	cmp	r0, r3
 800275c:	f63f ae97 	bhi.w	800248e <_malloc_r+0x1d2>
 8002760:	2800      	cmp	r0, #0
 8002762:	f43f ae94 	beq.w	800248e <_malloc_r+0x1d2>
 8002766:	4203      	tst	r3, r0
 8002768:	46cc      	mov	ip, r9
 800276a:	f47f ae40 	bne.w	80023ee <_malloc_r+0x132>
 800276e:	0040      	lsls	r0, r0, #1
 8002770:	4203      	tst	r3, r0
 8002772:	f10c 0c04 	add.w	ip, ip, #4
 8002776:	d0fa      	beq.n	800276e <_malloc_r+0x4b2>
 8002778:	e639      	b.n	80023ee <_malloc_r+0x132>
 800277a:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 800277e:	d817      	bhi.n	80027b0 <_malloc_r+0x4f4>
 8002780:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
 8002784:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 8002788:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800278c:	e5d8      	b.n	8002340 <_malloc_r+0x84>
 800278e:	2301      	movs	r3, #1
 8002790:	f8c8 3004 	str.w	r3, [r8, #4]
 8002794:	4644      	mov	r4, r8
 8002796:	2200      	movs	r2, #0
 8002798:	e727      	b.n	80025ea <_malloc_r+0x32e>
 800279a:	1091      	asrs	r1, r2, #2
 800279c:	2001      	movs	r0, #1
 800279e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80027a2:	fa00 f101 	lsl.w	r1, r0, r1
 80027a6:	430a      	orrs	r2, r1
 80027a8:	f8c8 2004 	str.w	r2, [r8, #4]
 80027ac:	4619      	mov	r1, r3
 80027ae:	e77e      	b.n	80026ae <_malloc_r+0x3f2>
 80027b0:	f240 5354 	movw	r3, #1364	; 0x554
 80027b4:	459c      	cmp	ip, r3
 80027b6:	bf9d      	ittte	ls
 80027b8:	ea4f 4c95 	movls.w	ip, r5, lsr #18
 80027bc:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
 80027c0:	ea4f 014c 	movls.w	r1, ip, lsl #1
 80027c4:	21fc      	movhi	r1, #252	; 0xfc
 80027c6:	bf88      	it	hi
 80027c8:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
 80027cc:	e5b8      	b.n	8002340 <_malloc_r+0x84>
 80027ce:	f3c2 010b 	ubfx	r1, r2, #0, #12
 80027d2:	2900      	cmp	r1, #0
 80027d4:	f47f ae9e 	bne.w	8002514 <_malloc_r+0x258>
 80027d8:	eb0c 0109 	add.w	r1, ip, r9
 80027dc:	68b2      	ldr	r2, [r6, #8]
 80027de:	f041 0101 	orr.w	r1, r1, #1
 80027e2:	6051      	str	r1, [r2, #4]
 80027e4:	e6ed      	b.n	80025c2 <_malloc_r+0x306>
 80027e6:	f104 0108 	add.w	r1, r4, #8
 80027ea:	4638      	mov	r0, r7
 80027ec:	f003 f80c 	bl	8005808 <_free_r>
 80027f0:	f8da 3000 	ldr.w	r3, [sl]
 80027f4:	e6e5      	b.n	80025c2 <_malloc_r+0x306>
 80027f6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80027fa:	d803      	bhi.n	8002804 <_malloc_r+0x548>
 80027fc:	0bca      	lsrs	r2, r1, #15
 80027fe:	3277      	adds	r2, #119	; 0x77
 8002800:	0050      	lsls	r0, r2, #1
 8002802:	e741      	b.n	8002688 <_malloc_r+0x3cc>
 8002804:	f240 5254 	movw	r2, #1364	; 0x554
 8002808:	4293      	cmp	r3, r2
 800280a:	bf9d      	ittte	ls
 800280c:	0c8a      	lsrls	r2, r1, #18
 800280e:	327c      	addls	r2, #124	; 0x7c
 8002810:	0050      	lslls	r0, r2, #1
 8002812:	20fc      	movhi	r0, #252	; 0xfc
 8002814:	bf88      	it	hi
 8002816:	227e      	movhi	r2, #126	; 0x7e
 8002818:	e736      	b.n	8002688 <_malloc_r+0x3cc>
 800281a:	6873      	ldr	r3, [r6, #4]
 800281c:	e79c      	b.n	8002758 <_malloc_r+0x49c>
 800281e:	bf00      	nop

08002820 <memcpy>:
 8002820:	4684      	mov	ip, r0
 8002822:	ea41 0300 	orr.w	r3, r1, r0
 8002826:	f013 0303 	ands.w	r3, r3, #3
 800282a:	d16d      	bne.n	8002908 <memcpy+0xe8>
 800282c:	3a40      	subs	r2, #64	; 0x40
 800282e:	d341      	bcc.n	80028b4 <memcpy+0x94>
 8002830:	f851 3b04 	ldr.w	r3, [r1], #4
 8002834:	f840 3b04 	str.w	r3, [r0], #4
 8002838:	f851 3b04 	ldr.w	r3, [r1], #4
 800283c:	f840 3b04 	str.w	r3, [r0], #4
 8002840:	f851 3b04 	ldr.w	r3, [r1], #4
 8002844:	f840 3b04 	str.w	r3, [r0], #4
 8002848:	f851 3b04 	ldr.w	r3, [r1], #4
 800284c:	f840 3b04 	str.w	r3, [r0], #4
 8002850:	f851 3b04 	ldr.w	r3, [r1], #4
 8002854:	f840 3b04 	str.w	r3, [r0], #4
 8002858:	f851 3b04 	ldr.w	r3, [r1], #4
 800285c:	f840 3b04 	str.w	r3, [r0], #4
 8002860:	f851 3b04 	ldr.w	r3, [r1], #4
 8002864:	f840 3b04 	str.w	r3, [r0], #4
 8002868:	f851 3b04 	ldr.w	r3, [r1], #4
 800286c:	f840 3b04 	str.w	r3, [r0], #4
 8002870:	f851 3b04 	ldr.w	r3, [r1], #4
 8002874:	f840 3b04 	str.w	r3, [r0], #4
 8002878:	f851 3b04 	ldr.w	r3, [r1], #4
 800287c:	f840 3b04 	str.w	r3, [r0], #4
 8002880:	f851 3b04 	ldr.w	r3, [r1], #4
 8002884:	f840 3b04 	str.w	r3, [r0], #4
 8002888:	f851 3b04 	ldr.w	r3, [r1], #4
 800288c:	f840 3b04 	str.w	r3, [r0], #4
 8002890:	f851 3b04 	ldr.w	r3, [r1], #4
 8002894:	f840 3b04 	str.w	r3, [r0], #4
 8002898:	f851 3b04 	ldr.w	r3, [r1], #4
 800289c:	f840 3b04 	str.w	r3, [r0], #4
 80028a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80028a4:	f840 3b04 	str.w	r3, [r0], #4
 80028a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80028ac:	f840 3b04 	str.w	r3, [r0], #4
 80028b0:	3a40      	subs	r2, #64	; 0x40
 80028b2:	d2bd      	bcs.n	8002830 <memcpy+0x10>
 80028b4:	3230      	adds	r2, #48	; 0x30
 80028b6:	d311      	bcc.n	80028dc <memcpy+0xbc>
 80028b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80028bc:	f840 3b04 	str.w	r3, [r0], #4
 80028c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80028c4:	f840 3b04 	str.w	r3, [r0], #4
 80028c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80028cc:	f840 3b04 	str.w	r3, [r0], #4
 80028d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80028d4:	f840 3b04 	str.w	r3, [r0], #4
 80028d8:	3a10      	subs	r2, #16
 80028da:	d2ed      	bcs.n	80028b8 <memcpy+0x98>
 80028dc:	320c      	adds	r2, #12
 80028de:	d305      	bcc.n	80028ec <memcpy+0xcc>
 80028e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80028e4:	f840 3b04 	str.w	r3, [r0], #4
 80028e8:	3a04      	subs	r2, #4
 80028ea:	d2f9      	bcs.n	80028e0 <memcpy+0xc0>
 80028ec:	3204      	adds	r2, #4
 80028ee:	d008      	beq.n	8002902 <memcpy+0xe2>
 80028f0:	07d2      	lsls	r2, r2, #31
 80028f2:	bf1c      	itt	ne
 80028f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80028f8:	f800 3b01 	strbne.w	r3, [r0], #1
 80028fc:	d301      	bcc.n	8002902 <memcpy+0xe2>
 80028fe:	880b      	ldrh	r3, [r1, #0]
 8002900:	8003      	strh	r3, [r0, #0]
 8002902:	4660      	mov	r0, ip
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	2a08      	cmp	r2, #8
 800290a:	d313      	bcc.n	8002934 <memcpy+0x114>
 800290c:	078b      	lsls	r3, r1, #30
 800290e:	d08d      	beq.n	800282c <memcpy+0xc>
 8002910:	f010 0303 	ands.w	r3, r0, #3
 8002914:	d08a      	beq.n	800282c <memcpy+0xc>
 8002916:	f1c3 0304 	rsb	r3, r3, #4
 800291a:	1ad2      	subs	r2, r2, r3
 800291c:	07db      	lsls	r3, r3, #31
 800291e:	bf1c      	itt	ne
 8002920:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8002924:	f800 3b01 	strbne.w	r3, [r0], #1
 8002928:	d380      	bcc.n	800282c <memcpy+0xc>
 800292a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800292e:	f820 3b02 	strh.w	r3, [r0], #2
 8002932:	e77b      	b.n	800282c <memcpy+0xc>
 8002934:	3a04      	subs	r2, #4
 8002936:	d3d9      	bcc.n	80028ec <memcpy+0xcc>
 8002938:	3a01      	subs	r2, #1
 800293a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800293e:	f800 3b01 	strb.w	r3, [r0], #1
 8002942:	d2f9      	bcs.n	8002938 <memcpy+0x118>
 8002944:	780b      	ldrb	r3, [r1, #0]
 8002946:	7003      	strb	r3, [r0, #0]
 8002948:	784b      	ldrb	r3, [r1, #1]
 800294a:	7043      	strb	r3, [r0, #1]
 800294c:	788b      	ldrb	r3, [r1, #2]
 800294e:	7083      	strb	r3, [r0, #2]
 8002950:	4660      	mov	r0, ip
 8002952:	4770      	bx	lr

08002954 <memset>:
 8002954:	b4f0      	push	{r4, r5, r6, r7}
 8002956:	0784      	lsls	r4, r0, #30
 8002958:	d043      	beq.n	80029e2 <memset+0x8e>
 800295a:	1e54      	subs	r4, r2, #1
 800295c:	2a00      	cmp	r2, #0
 800295e:	d03e      	beq.n	80029de <memset+0x8a>
 8002960:	b2cd      	uxtb	r5, r1
 8002962:	4603      	mov	r3, r0
 8002964:	e003      	b.n	800296e <memset+0x1a>
 8002966:	1e62      	subs	r2, r4, #1
 8002968:	2c00      	cmp	r4, #0
 800296a:	d038      	beq.n	80029de <memset+0x8a>
 800296c:	4614      	mov	r4, r2
 800296e:	f803 5b01 	strb.w	r5, [r3], #1
 8002972:	079a      	lsls	r2, r3, #30
 8002974:	d1f7      	bne.n	8002966 <memset+0x12>
 8002976:	2c03      	cmp	r4, #3
 8002978:	d92a      	bls.n	80029d0 <memset+0x7c>
 800297a:	b2cd      	uxtb	r5, r1
 800297c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8002980:	2c0f      	cmp	r4, #15
 8002982:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8002986:	d915      	bls.n	80029b4 <memset+0x60>
 8002988:	f1a4 0710 	sub.w	r7, r4, #16
 800298c:	093f      	lsrs	r7, r7, #4
 800298e:	f103 0610 	add.w	r6, r3, #16
 8002992:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8002996:	461a      	mov	r2, r3
 8002998:	6015      	str	r5, [r2, #0]
 800299a:	6055      	str	r5, [r2, #4]
 800299c:	6095      	str	r5, [r2, #8]
 800299e:	60d5      	str	r5, [r2, #12]
 80029a0:	3210      	adds	r2, #16
 80029a2:	42b2      	cmp	r2, r6
 80029a4:	d1f8      	bne.n	8002998 <memset+0x44>
 80029a6:	f004 040f 	and.w	r4, r4, #15
 80029aa:	3701      	adds	r7, #1
 80029ac:	2c03      	cmp	r4, #3
 80029ae:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80029b2:	d90d      	bls.n	80029d0 <memset+0x7c>
 80029b4:	461e      	mov	r6, r3
 80029b6:	4622      	mov	r2, r4
 80029b8:	3a04      	subs	r2, #4
 80029ba:	2a03      	cmp	r2, #3
 80029bc:	f846 5b04 	str.w	r5, [r6], #4
 80029c0:	d8fa      	bhi.n	80029b8 <memset+0x64>
 80029c2:	1f22      	subs	r2, r4, #4
 80029c4:	f022 0203 	bic.w	r2, r2, #3
 80029c8:	3204      	adds	r2, #4
 80029ca:	4413      	add	r3, r2
 80029cc:	f004 0403 	and.w	r4, r4, #3
 80029d0:	b12c      	cbz	r4, 80029de <memset+0x8a>
 80029d2:	b2c9      	uxtb	r1, r1
 80029d4:	441c      	add	r4, r3
 80029d6:	f803 1b01 	strb.w	r1, [r3], #1
 80029da:	42a3      	cmp	r3, r4
 80029dc:	d1fb      	bne.n	80029d6 <memset+0x82>
 80029de:	bcf0      	pop	{r4, r5, r6, r7}
 80029e0:	4770      	bx	lr
 80029e2:	4614      	mov	r4, r2
 80029e4:	4603      	mov	r3, r0
 80029e6:	e7c6      	b.n	8002976 <memset+0x22>

080029e8 <__malloc_lock>:
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop

080029ec <__malloc_unlock>:
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop

080029f0 <printf>:
 80029f0:	b40f      	push	{r0, r1, r2, r3}
 80029f2:	b500      	push	{lr}
 80029f4:	f240 4250 	movw	r2, #1104	; 0x450
 80029f8:	b083      	sub	sp, #12
 80029fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80029fe:	ab04      	add	r3, sp, #16
 8002a00:	6810      	ldr	r0, [r2, #0]
 8002a02:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a06:	6881      	ldr	r1, [r0, #8]
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	f000 f9f1 	bl	8002df0 <_vfprintf_r>
 8002a0e:	b003      	add	sp, #12
 8002a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a14:	b004      	add	sp, #16
 8002a16:	4770      	bx	lr

08002a18 <_sbrk_r>:
 8002a18:	b538      	push	{r3, r4, r5, lr}
 8002a1a:	f648 341c 	movw	r4, #35612	; 0x8b1c
 8002a1e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002a22:	2300      	movs	r3, #0
 8002a24:	4605      	mov	r5, r0
 8002a26:	4608      	mov	r0, r1
 8002a28:	6023      	str	r3, [r4, #0]
 8002a2a:	f7fd fe7d 	bl	8000728 <_sbrk>
 8002a2e:	1c43      	adds	r3, r0, #1
 8002a30:	d000      	beq.n	8002a34 <_sbrk_r+0x1c>
 8002a32:	bd38      	pop	{r3, r4, r5, pc}
 8002a34:	6823      	ldr	r3, [r4, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0fb      	beq.n	8002a32 <_sbrk_r+0x1a>
 8002a3a:	602b      	str	r3, [r5, #0]
 8002a3c:	bd38      	pop	{r3, r4, r5, pc}
 8002a3e:	bf00      	nop

08002a40 <_raise_r>:
 8002a40:	291f      	cmp	r1, #31
 8002a42:	b538      	push	{r3, r4, r5, lr}
 8002a44:	460c      	mov	r4, r1
 8002a46:	4605      	mov	r5, r0
 8002a48:	d820      	bhi.n	8002a8c <_raise_r+0x4c>
 8002a4a:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8002a4e:	b19a      	cbz	r2, 8002a78 <_raise_r+0x38>
 8002a50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002a54:	b183      	cbz	r3, 8002a78 <_raise_r+0x38>
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d00c      	beq.n	8002a74 <_raise_r+0x34>
 8002a5a:	1c59      	adds	r1, r3, #1
 8002a5c:	d006      	beq.n	8002a6c <_raise_r+0x2c>
 8002a5e:	2500      	movs	r5, #0
 8002a60:	4620      	mov	r0, r4
 8002a62:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8002a66:	4798      	blx	r3
 8002a68:	4628      	mov	r0, r5
 8002a6a:	bd38      	pop	{r3, r4, r5, pc}
 8002a6c:	2316      	movs	r3, #22
 8002a6e:	6003      	str	r3, [r0, #0]
 8002a70:	2001      	movs	r0, #1
 8002a72:	bd38      	pop	{r3, r4, r5, pc}
 8002a74:	2000      	movs	r0, #0
 8002a76:	bd38      	pop	{r3, r4, r5, pc}
 8002a78:	4628      	mov	r0, r5
 8002a7a:	f000 f829 	bl	8002ad0 <_getpid_r>
 8002a7e:	4622      	mov	r2, r4
 8002a80:	4601      	mov	r1, r0
 8002a82:	4628      	mov	r0, r5
 8002a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a88:	f000 b80e 	b.w	8002aa8 <_kill_r>
 8002a8c:	2316      	movs	r3, #22
 8002a8e:	6003      	str	r3, [r0, #0]
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a94:	bd38      	pop	{r3, r4, r5, pc}
 8002a96:	bf00      	nop

08002a98 <raise>:
 8002a98:	f240 4350 	movw	r3, #1104	; 0x450
 8002a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002aa0:	4601      	mov	r1, r0
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	f7ff bfcc 	b.w	8002a40 <_raise_r>

08002aa8 <_kill_r>:
 8002aa8:	b538      	push	{r3, r4, r5, lr}
 8002aaa:	f648 341c 	movw	r4, #35612	; 0x8b1c
 8002aae:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	4605      	mov	r5, r0
 8002ab6:	4608      	mov	r0, r1
 8002ab8:	4611      	mov	r1, r2
 8002aba:	6023      	str	r3, [r4, #0]
 8002abc:	f004 f920 	bl	8006d00 <_kill>
 8002ac0:	1c43      	adds	r3, r0, #1
 8002ac2:	d000      	beq.n	8002ac6 <_kill_r+0x1e>
 8002ac4:	bd38      	pop	{r3, r4, r5, pc}
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0fb      	beq.n	8002ac4 <_kill_r+0x1c>
 8002acc:	602b      	str	r3, [r5, #0]
 8002ace:	bd38      	pop	{r3, r4, r5, pc}

08002ad0 <_getpid_r>:
 8002ad0:	f004 b904 	b.w	8006cdc <_getpid>

08002ad4 <__sread>:
 8002ad4:	b510      	push	{r4, lr}
 8002ad6:	460c      	mov	r4, r1
 8002ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002adc:	f003 fb54 	bl	8006188 <_read_r>
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	bfab      	itete	ge
 8002ae4:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8002ae6:	89a3      	ldrhlt	r3, [r4, #12]
 8002ae8:	181b      	addge	r3, r3, r0
 8002aea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002aee:	bfac      	ite	ge
 8002af0:	6523      	strge	r3, [r4, #80]	; 0x50
 8002af2:	81a3      	strhlt	r3, [r4, #12]
 8002af4:	bd10      	pop	{r4, pc}
 8002af6:	bf00      	nop

08002af8 <__swrite>:
 8002af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002afc:	460c      	mov	r4, r1
 8002afe:	8989      	ldrh	r1, [r1, #12]
 8002b00:	461d      	mov	r5, r3
 8002b02:	05cb      	lsls	r3, r1, #23
 8002b04:	4616      	mov	r6, r2
 8002b06:	4607      	mov	r7, r0
 8002b08:	d506      	bpl.n	8002b18 <__swrite+0x20>
 8002b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2302      	movs	r3, #2
 8002b12:	f002 ff59 	bl	80059c8 <_lseek_r>
 8002b16:	89a1      	ldrh	r1, [r4, #12]
 8002b18:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8002b1c:	81a1      	strh	r1, [r4, #12]
 8002b1e:	4638      	mov	r0, r7
 8002b20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b24:	4632      	mov	r2, r6
 8002b26:	462b      	mov	r3, r5
 8002b28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b2c:	f001 bc3e 	b.w	80043ac <_write_r>

08002b30 <__sseek>:
 8002b30:	b510      	push	{r4, lr}
 8002b32:	460c      	mov	r4, r1
 8002b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b38:	f002 ff46 	bl	80059c8 <_lseek_r>
 8002b3c:	89a3      	ldrh	r3, [r4, #12]
 8002b3e:	1c42      	adds	r2, r0, #1
 8002b40:	bf0e      	itee	eq
 8002b42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002b46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002b4a:	6520      	strne	r0, [r4, #80]	; 0x50
 8002b4c:	81a3      	strh	r3, [r4, #12]
 8002b4e:	bd10      	pop	{r4, pc}

08002b50 <__sclose>:
 8002b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b54:	f001 bca4 	b.w	80044a0 <_close_r>

08002b58 <strcmp>:
 8002b58:	ea40 0c01 	orr.w	ip, r0, r1
 8002b5c:	f01c 0f07 	tst.w	ip, #7
 8002b60:	d123      	bne.n	8002baa <strcmp+0x52>
 8002b62:	f1bd 0d10 	subs.w	sp, sp, #16
 8002b66:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002b6a:	e9cd 6700 	strd	r6, r7, [sp]
 8002b6e:	f06f 0600 	mvn.w	r6, #0
 8002b72:	f04f 0700 	mov.w	r7, #0
 8002b76:	bf00      	nop
 8002b78:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8002b7c:	e8f1 4502 	ldrd	r4, r5, [r1], #8
 8002b80:	42a2      	cmp	r2, r4
 8002b82:	fa82 fc46 	uadd8	ip, r2, r6
 8002b86:	faa7 fc86 	sel	ip, r7, r6
 8002b8a:	bf08      	it	eq
 8002b8c:	f1bc 0f00 	cmpeq.w	ip, #0
 8002b90:	f040 80d7 	bne.w	8002d42 <strcmp+0x1ea>
 8002b94:	42ab      	cmp	r3, r5
 8002b96:	fa83 fc46 	uadd8	ip, r3, r6
 8002b9a:	faa7 fc86 	sel	ip, r7, r6
 8002b9e:	bf08      	it	eq
 8002ba0:	f1bc 0f00 	cmpeq.w	ip, #0
 8002ba4:	f040 80ca 	bne.w	8002d3c <strcmp+0x1e4>
 8002ba8:	e7e6      	b.n	8002b78 <strcmp+0x20>
 8002baa:	f010 0c03 	ands.w	ip, r0, #3
 8002bae:	d021      	beq.n	8002bf4 <strcmp+0x9c>
 8002bb0:	f020 0003 	bic.w	r0, r0, #3
 8002bb4:	f850 2b04 	ldr.w	r2, [r0], #4
 8002bb8:	ea5f 7ccc 	movs.w	ip, ip, lsl #31
 8002bbc:	d008      	beq.n	8002bd0 <strcmp+0x78>
 8002bbe:	d20f      	bcs.n	8002be0 <strcmp+0x88>
 8002bc0:	f811 cb01 	ldrb.w	ip, [r1], #1
 8002bc4:	fa5f f392 	uxtb.w	r3, r2, ror #8
 8002bc8:	ebb3 0c0c 	subs.w	ip, r3, ip
 8002bcc:	d110      	bne.n	8002bf0 <strcmp+0x98>
 8002bce:	b17b      	cbz	r3, 8002bf0 <strcmp+0x98>
 8002bd0:	f811 cb01 	ldrb.w	ip, [r1], #1
 8002bd4:	fa5f f3a2 	uxtb.w	r3, r2, ror #16
 8002bd8:	ebb3 0c0c 	subs.w	ip, r3, ip
 8002bdc:	d108      	bne.n	8002bf0 <strcmp+0x98>
 8002bde:	b13b      	cbz	r3, 8002bf0 <strcmp+0x98>
 8002be0:	f811 cb01 	ldrb.w	ip, [r1], #1
 8002be4:	fa5f f3b2 	uxtb.w	r3, r2, ror #24
 8002be8:	ebb3 0c0c 	subs.w	ip, r3, ip
 8002bec:	d100      	bne.n	8002bf0 <strcmp+0x98>
 8002bee:	b90b      	cbnz	r3, 8002bf4 <strcmp+0x9c>
 8002bf0:	4660      	mov	r0, ip
 8002bf2:	4770      	bx	lr
 8002bf4:	f1bd 0d10 	subs.w	sp, sp, #16
 8002bf8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002bfc:	e9cd 6700 	strd	r6, r7, [sp]
 8002c00:	f06f 0600 	mvn.w	r6, #0
 8002c04:	f04f 0700 	mov.w	r7, #0
 8002c08:	f011 0c03 	ands.w	ip, r1, #3
 8002c0c:	d12d      	bne.n	8002c6a <strcmp+0x112>
 8002c0e:	f010 0f04 	tst.w	r0, #4
 8002c12:	d00d      	beq.n	8002c30 <strcmp+0xd8>
 8002c14:	f850 2b04 	ldr.w	r2, [r0], #4
 8002c18:	f851 4b04 	ldr.w	r4, [r1], #4
 8002c1c:	42a2      	cmp	r2, r4
 8002c1e:	fa82 fc46 	uadd8	ip, r2, r6
 8002c22:	faa7 fc86 	sel	ip, r7, r6
 8002c26:	bf08      	it	eq
 8002c28:	f1bc 0f00 	cmpeq.w	ip, #0
 8002c2c:	f040 8089 	bne.w	8002d42 <strcmp+0x1ea>
 8002c30:	f011 0f04 	tst.w	r1, #4
 8002c34:	d09f      	beq.n	8002b76 <strcmp+0x1e>
 8002c36:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c3a:	bf00      	nop
 8002c3c:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8002c40:	42aa      	cmp	r2, r5
 8002c42:	fa82 fc46 	uadd8	ip, r2, r6
 8002c46:	faa7 fc86 	sel	ip, r7, r6
 8002c4a:	bf08      	it	eq
 8002c4c:	f1bc 0f00 	cmpeq.w	ip, #0
 8002c50:	d171      	bne.n	8002d36 <strcmp+0x1de>
 8002c52:	e8f1 4502 	ldrd	r4, r5, [r1], #8
 8002c56:	42a3      	cmp	r3, r4
 8002c58:	fa83 fc46 	uadd8	ip, r3, r6
 8002c5c:	faa7 fc86 	sel	ip, r7, r6
 8002c60:	bf08      	it	eq
 8002c62:	f1bc 0f00 	cmpeq.w	ip, #0
 8002c66:	d163      	bne.n	8002d30 <strcmp+0x1d8>
 8002c68:	e7e8      	b.n	8002c3c <strcmp+0xe4>
 8002c6a:	f021 0103 	bic.w	r1, r1, #3
 8002c6e:	f1bc 0f02 	cmp.w	ip, #2
 8002c72:	d01e      	beq.n	8002cb2 <strcmp+0x15a>
 8002c74:	da3b      	bge.n	8002cee <strcmp+0x196>
 8002c76:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c7a:	bf00      	nop
 8002c7c:	f850 3b04 	ldr.w	r3, [r0], #4
 8002c80:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8002c84:	fa83 fc46 	uadd8	ip, r3, r6
 8002c88:	faa7 fc86 	sel	ip, r7, r6
 8002c8c:	ebb7 2f0c 	cmp.w	r7, ip, lsl #8
 8002c90:	ea03 2216 	and.w	r2, r3, r6, lsr #8
 8002c94:	bf08      	it	eq
 8002c96:	42aa      	cmpeq	r2, r5
 8002c98:	d14d      	bne.n	8002d36 <strcmp+0x1de>
 8002c9a:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c9e:	f1bc 0f00 	cmp.w	ip, #0
 8002ca2:	ea82 0303 	eor.w	r3, r2, r3
 8002ca6:	ea4f 6205 	mov.w	r2, r5, lsl #24
 8002caa:	bf08      	it	eq
 8002cac:	4293      	cmpeq	r3, r2
 8002cae:	d13c      	bne.n	8002d2a <strcmp+0x1d2>
 8002cb0:	e7e4      	b.n	8002c7c <strcmp+0x124>
 8002cb2:	f851 5b04 	ldr.w	r5, [r1], #4
 8002cb6:	bf00      	nop
 8002cb8:	f850 3b04 	ldr.w	r3, [r0], #4
 8002cbc:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8002cc0:	fa83 fc46 	uadd8	ip, r3, r6
 8002cc4:	faa7 fc86 	sel	ip, r7, r6
 8002cc8:	ebb7 4f0c 	cmp.w	r7, ip, lsl #16
 8002ccc:	ea03 4216 	and.w	r2, r3, r6, lsr #16
 8002cd0:	bf08      	it	eq
 8002cd2:	42aa      	cmpeq	r2, r5
 8002cd4:	d12f      	bne.n	8002d36 <strcmp+0x1de>
 8002cd6:	f851 5b04 	ldr.w	r5, [r1], #4
 8002cda:	f1bc 0f00 	cmp.w	ip, #0
 8002cde:	ea82 0303 	eor.w	r3, r2, r3
 8002ce2:	ea4f 4205 	mov.w	r2, r5, lsl #16
 8002ce6:	bf08      	it	eq
 8002ce8:	4293      	cmpeq	r3, r2
 8002cea:	d11e      	bne.n	8002d2a <strcmp+0x1d2>
 8002cec:	e7e4      	b.n	8002cb8 <strcmp+0x160>
 8002cee:	f851 5b04 	ldr.w	r5, [r1], #4
 8002cf2:	bf00      	nop
 8002cf4:	f850 3b04 	ldr.w	r3, [r0], #4
 8002cf8:	ea4f 6515 	mov.w	r5, r5, lsr #24
 8002cfc:	fa83 fc46 	uadd8	ip, r3, r6
 8002d00:	faa7 fc86 	sel	ip, r7, r6
 8002d04:	ebb7 6f0c 	cmp.w	r7, ip, lsl #24
 8002d08:	ea03 6216 	and.w	r2, r3, r6, lsr #24
 8002d0c:	bf08      	it	eq
 8002d0e:	42aa      	cmpeq	r2, r5
 8002d10:	d111      	bne.n	8002d36 <strcmp+0x1de>
 8002d12:	f851 5b04 	ldr.w	r5, [r1], #4
 8002d16:	f1bc 0f00 	cmp.w	ip, #0
 8002d1a:	ea82 0303 	eor.w	r3, r2, r3
 8002d1e:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8002d22:	bf08      	it	eq
 8002d24:	4293      	cmpeq	r3, r2
 8002d26:	d100      	bne.n	8002d2a <strcmp+0x1d2>
 8002d28:	e7e4      	b.n	8002cf4 <strcmp+0x19c>
 8002d2a:	ba19      	rev	r1, r3
 8002d2c:	ba12      	rev	r2, r2
 8002d2e:	e00a      	b.n	8002d46 <strcmp+0x1ee>
 8002d30:	ba19      	rev	r1, r3
 8002d32:	ba22      	rev	r2, r4
 8002d34:	e007      	b.n	8002d46 <strcmp+0x1ee>
 8002d36:	ba11      	rev	r1, r2
 8002d38:	ba2a      	rev	r2, r5
 8002d3a:	e004      	b.n	8002d46 <strcmp+0x1ee>
 8002d3c:	ba19      	rev	r1, r3
 8002d3e:	ba2a      	rev	r2, r5
 8002d40:	e001      	b.n	8002d46 <strcmp+0x1ee>
 8002d42:	ba11      	rev	r1, r2
 8002d44:	ba22      	rev	r2, r4
 8002d46:	fa9c f08c 	rev.w	r0, ip
 8002d4a:	e9dd 6700 	ldrd	r6, r7, [sp]
 8002d4e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8002d52:	f11d 0d10 	adds.w	sp, sp, #16
 8002d56:	b138      	cbz	r0, 8002d68 <strcmp+0x210>
 8002d58:	fab0 f080 	clz	r0, r0
 8002d5c:	f1c0 0018 	rsb	r0, r0, #24
 8002d60:	fa21 f100 	lsr.w	r1, r1, r0
 8002d64:	fa22 f200 	lsr.w	r2, r2, r0
 8002d68:	2001      	movs	r0, #1
 8002d6a:	4291      	cmp	r1, r2
 8002d6c:	bf98      	it	ls
 8002d6e:	4180      	sbcls	r0, r0
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop

08002d74 <strlen>:
 8002d74:	f020 0103 	bic.w	r1, r0, #3
 8002d78:	f010 0003 	ands.w	r0, r0, #3
 8002d7c:	f1c0 0000 	rsb	r0, r0, #0
 8002d80:	f851 3b04 	ldr.w	r3, [r1], #4
 8002d84:	f100 0c04 	add.w	ip, r0, #4
 8002d88:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8002d8c:	f06f 0200 	mvn.w	r2, #0
 8002d90:	bf1c      	itt	ne
 8002d92:	fa22 f20c 	lsrne.w	r2, r2, ip
 8002d96:	4313      	orrne	r3, r2
 8002d98:	f04f 0c01 	mov.w	ip, #1
 8002d9c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8002da0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8002da4:	eba3 020c 	sub.w	r2, r3, ip
 8002da8:	ea22 0203 	bic.w	r2, r2, r3
 8002dac:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8002db0:	bf04      	itt	eq
 8002db2:	f851 3b04 	ldreq.w	r3, [r1], #4
 8002db6:	3004      	addeq	r0, #4
 8002db8:	d0f4      	beq.n	8002da4 <strlen+0x30>
 8002dba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002dbe:	bf1f      	itttt	ne
 8002dc0:	3001      	addne	r0, #1
 8002dc2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8002dc6:	3001      	addne	r0, #1
 8002dc8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8002dcc:	bf18      	it	ne
 8002dce:	3001      	addne	r0, #1
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop

08002dd4 <write>:
 8002dd4:	b430      	push	{r4, r5}
 8002dd6:	f240 4450 	movw	r4, #1104	; 0x450
 8002dda:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002dde:	460d      	mov	r5, r1
 8002de0:	4613      	mov	r3, r2
 8002de2:	4601      	mov	r1, r0
 8002de4:	462a      	mov	r2, r5
 8002de6:	6820      	ldr	r0, [r4, #0]
 8002de8:	bc30      	pop	{r4, r5}
 8002dea:	f001 badf 	b.w	80043ac <_write_r>
 8002dee:	bf00      	nop

08002df0 <_vfprintf_r>:
 8002df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002df4:	b0c3      	sub	sp, #268	; 0x10c
 8002df6:	461c      	mov	r4, r3
 8002df8:	4689      	mov	r9, r1
 8002dfa:	9206      	str	r2, [sp, #24]
 8002dfc:	900a      	str	r0, [sp, #40]	; 0x28
 8002dfe:	f002 fddd 	bl	80059bc <_localeconv_r>
 8002e02:	6800      	ldr	r0, [r0, #0]
 8002e04:	9014      	str	r0, [sp, #80]	; 0x50
 8002e06:	f7ff ffb5 	bl	8002d74 <strlen>
 8002e0a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002e0c:	9017      	str	r0, [sp, #92]	; 0x5c
 8002e0e:	940e      	str	r4, [sp, #56]	; 0x38
 8002e10:	b11d      	cbz	r5, 8002e1a <_vfprintf_r+0x2a>
 8002e12:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 811d 	beq.w	8003054 <_vfprintf_r+0x264>
 8002e1a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	0490      	lsls	r0, r2, #18
 8002e22:	d40a      	bmi.n	8002e3a <_vfprintf_r+0x4a>
 8002e24:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 8002e28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e2c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002e30:	f8a9 300c 	strh.w	r3, [r9, #12]
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 8002e3a:	0711      	lsls	r1, r2, #28
 8002e3c:	f140 80d1 	bpl.w	8002fe2 <_vfprintf_r+0x1f2>
 8002e40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80cc 	beq.w	8002fe2 <_vfprintf_r+0x1f2>
 8002e4a:	f002 021a 	and.w	r2, r2, #26
 8002e4e:	2a0a      	cmp	r2, #10
 8002e50:	f000 80d3 	beq.w	8002ffa <_vfprintf_r+0x20a>
 8002e54:	f10d 05c7 	add.w	r5, sp, #199	; 0xc7
 8002e58:	9503      	str	r5, [sp, #12]
 8002e5a:	ad32      	add	r5, sp, #200	; 0xc8
 8002e5c:	46ac      	mov	ip, r5
 8002e5e:	9525      	str	r5, [sp, #148]	; 0x94
 8002e60:	9d03      	ldr	r5, [sp, #12]
 8002e62:	f8cd 901c 	str.w	r9, [sp, #28]
 8002e66:	ac32      	add	r4, sp, #200	; 0xc8
 8002e68:	9404      	str	r4, [sp, #16]
 8002e6a:	ebc5 040c 	rsb	r4, r5, ip
 8002e6e:	f647 5b9c 	movw	fp, #32156	; 0x7d9c
 8002e72:	941b      	str	r4, [sp, #108]	; 0x6c
 8002e74:	f647 55ec 	movw	r5, #32236	; 0x7dec
 8002e78:	f647 54f0 	movw	r4, #32240	; 0x7df0
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f6c0 0400 	movt	r4, #2048	; 0x800
 8002e82:	f6c0 0b00 	movt	fp, #2048	; 0x800
 8002e86:	f6c0 0500 	movt	r5, #2048	; 0x800
 8002e8a:	930c      	str	r3, [sp, #48]	; 0x30
 8002e8c:	9327      	str	r3, [sp, #156]	; 0x9c
 8002e8e:	9326      	str	r3, [sp, #152]	; 0x98
 8002e90:	9316      	str	r3, [sp, #88]	; 0x58
 8002e92:	9318      	str	r3, [sp, #96]	; 0x60
 8002e94:	9315      	str	r3, [sp, #84]	; 0x54
 8002e96:	9319      	str	r3, [sp, #100]	; 0x64
 8002e98:	930f      	str	r3, [sp, #60]	; 0x3c
 8002e9a:	9411      	str	r4, [sp, #68]	; 0x44
 8002e9c:	9512      	str	r5, [sp, #72]	; 0x48
 8002e9e:	4666      	mov	r6, ip
 8002ea0:	465f      	mov	r7, fp
 8002ea2:	9c06      	ldr	r4, [sp, #24]
 8002ea4:	7823      	ldrb	r3, [r4, #0]
 8002ea6:	2b25      	cmp	r3, #37	; 0x25
 8002ea8:	bf18      	it	ne
 8002eaa:	2b00      	cmpne	r3, #0
 8002eac:	f000 80d6 	beq.w	800305c <_vfprintf_r+0x26c>
 8002eb0:	1c62      	adds	r2, r4, #1
 8002eb2:	4614      	mov	r4, r2
 8002eb4:	3201      	adds	r2, #1
 8002eb6:	7823      	ldrb	r3, [r4, #0]
 8002eb8:	2b25      	cmp	r3, #37	; 0x25
 8002eba:	bf18      	it	ne
 8002ebc:	2b00      	cmpne	r3, #0
 8002ebe:	d1f8      	bne.n	8002eb2 <_vfprintf_r+0xc2>
 8002ec0:	9806      	ldr	r0, [sp, #24]
 8002ec2:	1a25      	subs	r5, r4, r0
 8002ec4:	d00f      	beq.n	8002ee6 <_vfprintf_r+0xf6>
 8002ec6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002ec8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8002eca:	6030      	str	r0, [r6, #0]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	442a      	add	r2, r5
 8002ed0:	2b07      	cmp	r3, #7
 8002ed2:	6075      	str	r5, [r6, #4]
 8002ed4:	9227      	str	r2, [sp, #156]	; 0x9c
 8002ed6:	9326      	str	r3, [sp, #152]	; 0x98
 8002ed8:	bfd8      	it	le
 8002eda:	3608      	addle	r6, #8
 8002edc:	f300 80a0 	bgt.w	8003020 <_vfprintf_r+0x230>
 8002ee0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002ee2:	4429      	add	r1, r5
 8002ee4:	910f      	str	r1, [sp, #60]	; 0x3c
 8002ee6:	7823      	ldrb	r3, [r4, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f001 804a 	beq.w	8003f82 <_vfprintf_r+0x1192>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	1c65      	adds	r5, r4, #1
 8002ef2:	f894 9001 	ldrb.w	r9, [r4, #1]
 8002ef6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8002efa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002efe:	461a      	mov	r2, r3
 8002f00:	930d      	str	r3, [sp, #52]	; 0x34
 8002f02:	9305      	str	r3, [sp, #20]
 8002f04:	9506      	str	r5, [sp, #24]
 8002f06:	9408      	str	r4, [sp, #32]
 8002f08:	462b      	mov	r3, r5
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f1a9 0120 	sub.w	r1, r9, #32
 8002f10:	2958      	cmp	r1, #88	; 0x58
 8002f12:	f200 8428 	bhi.w	8003766 <_vfprintf_r+0x976>
 8002f16:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002f1a:	03cf      	.short	0x03cf
 8002f1c:	04260426 	.word	0x04260426
 8002f20:	0426041e 	.word	0x0426041e
 8002f24:	04260426 	.word	0x04260426
 8002f28:	04260426 	.word	0x04260426
 8002f2c:	03750426 	.word	0x03750426
 8002f30:	042603cb 	.word	0x042603cb
 8002f34:	0250005d 	.word	0x0250005d
 8002f38:	028f0426 	.word	0x028f0426
 8002f3c:	02960296 	.word	0x02960296
 8002f40:	02960296 	.word	0x02960296
 8002f44:	02960296 	.word	0x02960296
 8002f48:	02960296 	.word	0x02960296
 8002f4c:	04260296 	.word	0x04260296
 8002f50:	04260426 	.word	0x04260426
 8002f54:	04260426 	.word	0x04260426
 8002f58:	04260426 	.word	0x04260426
 8002f5c:	04260426 	.word	0x04260426
 8002f60:	02710426 	.word	0x02710426
 8002f64:	042602ae 	.word	0x042602ae
 8002f68:	042602ae 	.word	0x042602ae
 8002f6c:	04260426 	.word	0x04260426
 8002f70:	02a70426 	.word	0x02a70426
 8002f74:	04260426 	.word	0x04260426
 8002f78:	042602ed 	.word	0x042602ed
 8002f7c:	04260426 	.word	0x04260426
 8002f80:	04260426 	.word	0x04260426
 8002f84:	04260308 	.word	0x04260308
 8002f88:	03200426 	.word	0x03200426
 8002f8c:	04260426 	.word	0x04260426
 8002f90:	04260426 	.word	0x04260426
 8002f94:	04260426 	.word	0x04260426
 8002f98:	04260426 	.word	0x04260426
 8002f9c:	04260426 	.word	0x04260426
 8002fa0:	035d0347 	.word	0x035d0347
 8002fa4:	02ae02ae 	.word	0x02ae02ae
 8002fa8:	03ee02ae 	.word	0x03ee02ae
 8002fac:	0426035d 	.word	0x0426035d
 8002fb0:	03f50426 	.word	0x03f50426
 8002fb4:	040a0426 	.word	0x040a0426
 8002fb8:	03d6023f 	.word	0x03d6023f
 8002fbc:	04260382 	.word	0x04260382
 8002fc0:	04260389 	.word	0x04260389
 8002fc4:	042600a3 	.word	0x042600a3
 8002fc8:	03b10426 	.word	0x03b10426
 8002fcc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002fce:	910e      	str	r1, [sp, #56]	; 0x38
 8002fd0:	4264      	negs	r4, r4
 8002fd2:	940d      	str	r4, [sp, #52]	; 0x34
 8002fd4:	9d05      	ldr	r5, [sp, #20]
 8002fd6:	f045 0504 	orr.w	r5, r5, #4
 8002fda:	9505      	str	r5, [sp, #20]
 8002fdc:	f893 9000 	ldrb.w	r9, [r3]
 8002fe0:	e793      	b.n	8002f0a <_vfprintf_r+0x11a>
 8002fe2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002fe4:	4649      	mov	r1, r9
 8002fe6:	f001 f9f7 	bl	80043d8 <__swsetup_r>
 8002fea:	b9a0      	cbnz	r0, 8003016 <_vfprintf_r+0x226>
 8002fec:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 8002ff0:	f002 021a 	and.w	r2, r2, #26
 8002ff4:	2a0a      	cmp	r2, #10
 8002ff6:	f47f af2d 	bne.w	8002e54 <_vfprintf_r+0x64>
 8002ffa:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f6ff af28 	blt.w	8002e54 <_vfprintf_r+0x64>
 8003004:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003006:	9a06      	ldr	r2, [sp, #24]
 8003008:	4649      	mov	r1, r9
 800300a:	4623      	mov	r3, r4
 800300c:	f001 f992 	bl	8004334 <__sbprintf>
 8003010:	b043      	add	sp, #268	; 0x10c
 8003012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800301a:	b043      	add	sp, #268	; 0x10c
 800301c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003020:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003022:	9907      	ldr	r1, [sp, #28]
 8003024:	aa25      	add	r2, sp, #148	; 0x94
 8003026:	f003 f92d 	bl	8006284 <__sprint_r>
 800302a:	b948      	cbnz	r0, 8003040 <_vfprintf_r+0x250>
 800302c:	ae32      	add	r6, sp, #200	; 0xc8
 800302e:	e757      	b.n	8002ee0 <_vfprintf_r+0xf0>
 8003030:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003032:	9907      	ldr	r1, [sp, #28]
 8003034:	aa25      	add	r2, sp, #148	; 0x94
 8003036:	f003 f925 	bl	8006284 <__sprint_r>
 800303a:	2800      	cmp	r0, #0
 800303c:	f000 818c 	beq.w	8003358 <_vfprintf_r+0x568>
 8003040:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8003044:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003048:	065b      	lsls	r3, r3, #25
 800304a:	d4e4      	bmi.n	8003016 <_vfprintf_r+0x226>
 800304c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800304e:	b043      	add	sp, #268	; 0x10c
 8003050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003054:	4628      	mov	r0, r5
 8003056:	f7ff f883 	bl	8002160 <__sinit>
 800305a:	e6de      	b.n	8002e1a <_vfprintf_r+0x2a>
 800305c:	9c06      	ldr	r4, [sp, #24]
 800305e:	e742      	b.n	8002ee6 <_vfprintf_r+0xf6>
 8003060:	9c05      	ldr	r4, [sp, #20]
 8003062:	9306      	str	r3, [sp, #24]
 8003064:	06a3      	lsls	r3, r4, #26
 8003066:	f140 8269 	bpl.w	800353c <_vfprintf_r+0x74c>
 800306a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800306c:	1deb      	adds	r3, r5, #7
 800306e:	f023 0307 	bic.w	r3, r3, #7
 8003072:	f103 0408 	add.w	r4, r3, #8
 8003076:	940e      	str	r4, [sp, #56]	; 0x38
 8003078:	e9d3 4500 	ldrd	r4, r5, [r3]
 800307c:	2301      	movs	r3, #1
 800307e:	f04f 0a00 	mov.w	sl, #0
 8003082:	f88d a077 	strb.w	sl, [sp, #119]	; 0x77
 8003086:	9a08      	ldr	r2, [sp, #32]
 8003088:	2a00      	cmp	r2, #0
 800308a:	bfa2      	ittt	ge
 800308c:	9805      	ldrge	r0, [sp, #20]
 800308e:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 8003092:	9005      	strge	r0, [sp, #20]
 8003094:	ea54 0105 	orrs.w	r1, r4, r5
 8003098:	9808      	ldr	r0, [sp, #32]
 800309a:	bf0c      	ite	eq
 800309c:	2200      	moveq	r2, #0
 800309e:	2201      	movne	r2, #1
 80030a0:	2800      	cmp	r0, #0
 80030a2:	bf18      	it	ne
 80030a4:	f042 0201 	orrne.w	r2, r2, #1
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	f000 83e2 	beq.w	8003872 <_vfprintf_r+0xa82>
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	f000 8505 	beq.w	8003abe <_vfprintf_r+0xcce>
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	f10d 02c7 	add.w	r2, sp, #199	; 0xc7
 80030ba:	f040 8151 	bne.w	8003360 <_vfprintf_r+0x570>
 80030be:	9815      	ldr	r0, [sp, #84]	; 0x54
 80030c0:	f004 010f 	and.w	r1, r4, #15
 80030c4:	0923      	lsrs	r3, r4, #4
 80030c6:	4690      	mov	r8, r2
 80030c8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80030cc:	5c42      	ldrb	r2, [r0, r1]
 80030ce:	0929      	lsrs	r1, r5, #4
 80030d0:	461c      	mov	r4, r3
 80030d2:	460d      	mov	r5, r1
 80030d4:	ea54 0105 	orrs.w	r1, r4, r5
 80030d8:	f888 2000 	strb.w	r2, [r8]
 80030dc:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80030e0:	d1ee      	bne.n	80030c0 <_vfprintf_r+0x2d0>
 80030e2:	9b04      	ldr	r3, [sp, #16]
 80030e4:	ebc8 0303 	rsb	r3, r8, r3
 80030e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80030ea:	9c08      	ldr	r4, [sp, #32]
 80030ec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80030ee:	42a5      	cmp	r5, r4
 80030f0:	bfb8      	it	lt
 80030f2:	4625      	movlt	r5, r4
 80030f4:	2400      	movs	r4, #0
 80030f6:	9509      	str	r5, [sp, #36]	; 0x24
 80030f8:	9413      	str	r4, [sp, #76]	; 0x4c
 80030fa:	f1ba 0f00 	cmp.w	sl, #0
 80030fe:	d002      	beq.n	8003106 <_vfprintf_r+0x316>
 8003100:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003102:	3401      	adds	r4, #1
 8003104:	9409      	str	r4, [sp, #36]	; 0x24
 8003106:	9d05      	ldr	r5, [sp, #20]
 8003108:	f015 0b02 	ands.w	fp, r5, #2
 800310c:	bf18      	it	ne
 800310e:	9c09      	ldrne	r4, [sp, #36]	; 0x24
 8003110:	9d05      	ldr	r5, [sp, #20]
 8003112:	bf1c      	itt	ne
 8003114:	3402      	addne	r4, #2
 8003116:	9409      	strne	r4, [sp, #36]	; 0x24
 8003118:	f015 0584 	ands.w	r5, r5, #132	; 0x84
 800311c:	9510      	str	r5, [sp, #64]	; 0x40
 800311e:	f040 8337 	bne.w	8003790 <_vfprintf_r+0x9a0>
 8003122:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003124:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003126:	1a2c      	subs	r4, r5, r0
 8003128:	2c00      	cmp	r4, #0
 800312a:	f340 8331 	ble.w	8003790 <_vfprintf_r+0x9a0>
 800312e:	2c10      	cmp	r4, #16
 8003130:	f647 5af0 	movw	sl, #32240	; 0x7df0
 8003134:	f340 87a7 	ble.w	8004086 <_vfprintf_r+0x1296>
 8003138:	4630      	mov	r0, r6
 800313a:	971a      	str	r7, [sp, #104]	; 0x68
 800313c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800313e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003140:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8003142:	4627      	mov	r7, r4
 8003144:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8003148:	2510      	movs	r5, #16
 800314a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800314c:	e002      	b.n	8003154 <_vfprintf_r+0x364>
 800314e:	3f10      	subs	r7, #16
 8003150:	2f10      	cmp	r7, #16
 8003152:	dd17      	ble.n	8003184 <_vfprintf_r+0x394>
 8003154:	3201      	adds	r2, #1
 8003156:	3110      	adds	r1, #16
 8003158:	2a07      	cmp	r2, #7
 800315a:	6006      	str	r6, [r0, #0]
 800315c:	6045      	str	r5, [r0, #4]
 800315e:	9127      	str	r1, [sp, #156]	; 0x9c
 8003160:	9226      	str	r2, [sp, #152]	; 0x98
 8003162:	bfd8      	it	le
 8003164:	3008      	addle	r0, #8
 8003166:	ddf2      	ble.n	800314e <_vfprintf_r+0x35e>
 8003168:	4620      	mov	r0, r4
 800316a:	9907      	ldr	r1, [sp, #28]
 800316c:	aa25      	add	r2, sp, #148	; 0x94
 800316e:	f003 f889 	bl	8006284 <__sprint_r>
 8003172:	2800      	cmp	r0, #0
 8003174:	f47f af64 	bne.w	8003040 <_vfprintf_r+0x250>
 8003178:	3f10      	subs	r7, #16
 800317a:	2f10      	cmp	r7, #16
 800317c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800317e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003180:	a832      	add	r0, sp, #200	; 0xc8
 8003182:	dce7      	bgt.n	8003154 <_vfprintf_r+0x364>
 8003184:	463c      	mov	r4, r7
 8003186:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003188:	4606      	mov	r6, r0
 800318a:	3201      	adds	r2, #1
 800318c:	4421      	add	r1, r4
 800318e:	2a07      	cmp	r2, #7
 8003190:	9127      	str	r1, [sp, #156]	; 0x9c
 8003192:	9226      	str	r2, [sp, #152]	; 0x98
 8003194:	f8c6 a000 	str.w	sl, [r6]
 8003198:	6074      	str	r4, [r6, #4]
 800319a:	f300 849e 	bgt.w	8003ada <_vfprintf_r+0xcea>
 800319e:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 80031a2:	3608      	adds	r6, #8
 80031a4:	460c      	mov	r4, r1
 80031a6:	f1ba 0f00 	cmp.w	sl, #0
 80031aa:	d00e      	beq.n	80031ca <_vfprintf_r+0x3da>
 80031ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80031ae:	3301      	adds	r3, #1
 80031b0:	3401      	adds	r4, #1
 80031b2:	f10d 0177 	add.w	r1, sp, #119	; 0x77
 80031b6:	2201      	movs	r2, #1
 80031b8:	2b07      	cmp	r3, #7
 80031ba:	e886 0006 	stmia.w	r6, {r1, r2}
 80031be:	9427      	str	r4, [sp, #156]	; 0x9c
 80031c0:	9326      	str	r3, [sp, #152]	; 0x98
 80031c2:	bfd8      	it	le
 80031c4:	3608      	addle	r6, #8
 80031c6:	f300 82e5 	bgt.w	8003794 <_vfprintf_r+0x9a4>
 80031ca:	f1bb 0f00 	cmp.w	fp, #0
 80031ce:	d00d      	beq.n	80031ec <_vfprintf_r+0x3fc>
 80031d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80031d2:	3301      	adds	r3, #1
 80031d4:	3402      	adds	r4, #2
 80031d6:	a91e      	add	r1, sp, #120	; 0x78
 80031d8:	2202      	movs	r2, #2
 80031da:	2b07      	cmp	r3, #7
 80031dc:	e886 0006 	stmia.w	r6, {r1, r2}
 80031e0:	9427      	str	r4, [sp, #156]	; 0x9c
 80031e2:	9326      	str	r3, [sp, #152]	; 0x98
 80031e4:	bfd8      	it	le
 80031e6:	3608      	addle	r6, #8
 80031e8:	f300 8406 	bgt.w	80039f8 <_vfprintf_r+0xc08>
 80031ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80031ee:	2b80      	cmp	r3, #128	; 0x80
 80031f0:	f000 8352 	beq.w	8003898 <_vfprintf_r+0xaa8>
 80031f4:	9d08      	ldr	r5, [sp, #32]
 80031f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80031f8:	ebc3 0a05 	rsb	sl, r3, r5
 80031fc:	f1ba 0f00 	cmp.w	sl, #0
 8003200:	dd44      	ble.n	800328c <_vfprintf_r+0x49c>
 8003202:	f1ba 0f10 	cmp.w	sl, #16
 8003206:	f647 559c 	movw	r5, #32156	; 0x7d9c
 800320a:	bfdc      	itt	le
 800320c:	f6c0 0500 	movtle	r5, #2048	; 0x800
 8003210:	9b26      	ldrle	r3, [sp, #152]	; 0x98
 8003212:	dd27      	ble.n	8003264 <_vfprintf_r+0x474>
 8003214:	f6c0 0500 	movt	r5, #2048	; 0x800
 8003218:	4622      	mov	r2, r4
 800321a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800321c:	4654      	mov	r4, sl
 800321e:	f04f 0b10 	mov.w	fp, #16
 8003222:	46aa      	mov	sl, r5
 8003224:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003226:	e002      	b.n	800322e <_vfprintf_r+0x43e>
 8003228:	3c10      	subs	r4, #16
 800322a:	2c10      	cmp	r4, #16
 800322c:	dd17      	ble.n	800325e <_vfprintf_r+0x46e>
 800322e:	3301      	adds	r3, #1
 8003230:	3210      	adds	r2, #16
 8003232:	2b07      	cmp	r3, #7
 8003234:	e886 0880 	stmia.w	r6, {r7, fp}
 8003238:	9227      	str	r2, [sp, #156]	; 0x9c
 800323a:	9326      	str	r3, [sp, #152]	; 0x98
 800323c:	bfd8      	it	le
 800323e:	3608      	addle	r6, #8
 8003240:	ddf2      	ble.n	8003228 <_vfprintf_r+0x438>
 8003242:	4628      	mov	r0, r5
 8003244:	9907      	ldr	r1, [sp, #28]
 8003246:	aa25      	add	r2, sp, #148	; 0x94
 8003248:	f003 f81c 	bl	8006284 <__sprint_r>
 800324c:	2800      	cmp	r0, #0
 800324e:	f47f aef7 	bne.w	8003040 <_vfprintf_r+0x250>
 8003252:	3c10      	subs	r4, #16
 8003254:	2c10      	cmp	r4, #16
 8003256:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8003258:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800325a:	ae32      	add	r6, sp, #200	; 0xc8
 800325c:	dce7      	bgt.n	800322e <_vfprintf_r+0x43e>
 800325e:	4655      	mov	r5, sl
 8003260:	46a2      	mov	sl, r4
 8003262:	4614      	mov	r4, r2
 8003264:	3301      	adds	r3, #1
 8003266:	4454      	add	r4, sl
 8003268:	2b07      	cmp	r3, #7
 800326a:	e886 0420 	stmia.w	r6, {r5, sl}
 800326e:	9427      	str	r4, [sp, #156]	; 0x9c
 8003270:	9326      	str	r3, [sp, #152]	; 0x98
 8003272:	bfd8      	it	le
 8003274:	3608      	addle	r6, #8
 8003276:	dd09      	ble.n	800328c <_vfprintf_r+0x49c>
 8003278:	980a      	ldr	r0, [sp, #40]	; 0x28
 800327a:	9907      	ldr	r1, [sp, #28]
 800327c:	aa25      	add	r2, sp, #148	; 0x94
 800327e:	f003 f801 	bl	8006284 <__sprint_r>
 8003282:	2800      	cmp	r0, #0
 8003284:	f47f aedc 	bne.w	8003040 <_vfprintf_r+0x250>
 8003288:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800328a:	ae32      	add	r6, sp, #200	; 0xc8
 800328c:	9d05      	ldr	r5, [sp, #20]
 800328e:	05ea      	lsls	r2, r5, #23
 8003290:	f100 828b 	bmi.w	80037aa <_vfprintf_r+0x9ba>
 8003294:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003296:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003298:	f8c6 8000 	str.w	r8, [r6]
 800329c:	3301      	adds	r3, #1
 800329e:	442c      	add	r4, r5
 80032a0:	2b07      	cmp	r3, #7
 80032a2:	9427      	str	r4, [sp, #156]	; 0x9c
 80032a4:	6075      	str	r5, [r6, #4]
 80032a6:	9326      	str	r3, [sp, #152]	; 0x98
 80032a8:	f300 8396 	bgt.w	80039d8 <_vfprintf_r+0xbe8>
 80032ac:	3608      	adds	r6, #8
 80032ae:	9d05      	ldr	r5, [sp, #20]
 80032b0:	076a      	lsls	r2, r5, #29
 80032b2:	d546      	bpl.n	8003342 <_vfprintf_r+0x552>
 80032b4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80032b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80032b8:	1a45      	subs	r5, r0, r1
 80032ba:	2d00      	cmp	r5, #0
 80032bc:	dd41      	ble.n	8003342 <_vfprintf_r+0x552>
 80032be:	2d10      	cmp	r5, #16
 80032c0:	f647 5af0 	movw	sl, #32240	; 0x7df0
 80032c4:	bfdc      	itt	le
 80032c6:	f6c0 0a00 	movtle	sl, #2048	; 0x800
 80032ca:	9b26      	ldrle	r3, [sp, #152]	; 0x98
 80032cc:	dd27      	ble.n	800331e <_vfprintf_r+0x52e>
 80032ce:	9705      	str	r7, [sp, #20]
 80032d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80032d2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80032d6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80032da:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80032dc:	f6c0 0a00 	movt	sl, #2048	; 0x800
 80032e0:	f04f 0810 	mov.w	r8, #16
 80032e4:	e002      	b.n	80032ec <_vfprintf_r+0x4fc>
 80032e6:	3d10      	subs	r5, #16
 80032e8:	2d10      	cmp	r5, #16
 80032ea:	dd17      	ble.n	800331c <_vfprintf_r+0x52c>
 80032ec:	3301      	adds	r3, #1
 80032ee:	3410      	adds	r4, #16
 80032f0:	2b07      	cmp	r3, #7
 80032f2:	e886 0180 	stmia.w	r6, {r7, r8}
 80032f6:	9427      	str	r4, [sp, #156]	; 0x9c
 80032f8:	9326      	str	r3, [sp, #152]	; 0x98
 80032fa:	bfd8      	it	le
 80032fc:	3608      	addle	r6, #8
 80032fe:	ddf2      	ble.n	80032e6 <_vfprintf_r+0x4f6>
 8003300:	4648      	mov	r0, r9
 8003302:	4659      	mov	r1, fp
 8003304:	aa25      	add	r2, sp, #148	; 0x94
 8003306:	f002 ffbd 	bl	8006284 <__sprint_r>
 800330a:	2800      	cmp	r0, #0
 800330c:	f040 8443 	bne.w	8003b96 <_vfprintf_r+0xda6>
 8003310:	3d10      	subs	r5, #16
 8003312:	2d10      	cmp	r5, #16
 8003314:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8003316:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003318:	ae32      	add	r6, sp, #200	; 0xc8
 800331a:	dce7      	bgt.n	80032ec <_vfprintf_r+0x4fc>
 800331c:	9f05      	ldr	r7, [sp, #20]
 800331e:	3301      	adds	r3, #1
 8003320:	442c      	add	r4, r5
 8003322:	2b07      	cmp	r3, #7
 8003324:	9427      	str	r4, [sp, #156]	; 0x9c
 8003326:	9326      	str	r3, [sp, #152]	; 0x98
 8003328:	f8c6 a000 	str.w	sl, [r6]
 800332c:	6075      	str	r5, [r6, #4]
 800332e:	dd08      	ble.n	8003342 <_vfprintf_r+0x552>
 8003330:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003332:	9907      	ldr	r1, [sp, #28]
 8003334:	aa25      	add	r2, sp, #148	; 0x94
 8003336:	f002 ffa5 	bl	8006284 <__sprint_r>
 800333a:	2800      	cmp	r0, #0
 800333c:	f47f ae80 	bne.w	8003040 <_vfprintf_r+0x250>
 8003340:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8003342:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003344:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003346:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003348:	4281      	cmp	r1, r0
 800334a:	bfac      	ite	ge
 800334c:	186d      	addge	r5, r5, r1
 800334e:	182d      	addlt	r5, r5, r0
 8003350:	950f      	str	r5, [sp, #60]	; 0x3c
 8003352:	2c00      	cmp	r4, #0
 8003354:	f47f ae6c 	bne.w	8003030 <_vfprintf_r+0x240>
 8003358:	2300      	movs	r3, #0
 800335a:	9326      	str	r3, [sp, #152]	; 0x98
 800335c:	ae32      	add	r6, sp, #200	; 0xc8
 800335e:	e5a0      	b.n	8002ea2 <_vfprintf_r+0xb2>
 8003360:	08e3      	lsrs	r3, r4, #3
 8003362:	4690      	mov	r8, r2
 8003364:	ea43 7345 	orr.w	r3, r3, r5, lsl #29
 8003368:	08ea      	lsrs	r2, r5, #3
 800336a:	f004 0107 	and.w	r1, r4, #7
 800336e:	4615      	mov	r5, r2
 8003370:	461c      	mov	r4, r3
 8003372:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8003376:	ea54 0105 	orrs.w	r1, r4, r5
 800337a:	f888 3000 	strb.w	r3, [r8]
 800337e:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8003382:	d1ed      	bne.n	8003360 <_vfprintf_r+0x570>
 8003384:	9c05      	ldr	r4, [sp, #20]
 8003386:	07e0      	lsls	r0, r4, #31
 8003388:	4641      	mov	r1, r8
 800338a:	f100 84e8 	bmi.w	8003d5e <_vfprintf_r+0xf6e>
 800338e:	9d04      	ldr	r5, [sp, #16]
 8003390:	ebc8 0505 	rsb	r5, r8, r5
 8003394:	950b      	str	r5, [sp, #44]	; 0x2c
 8003396:	e6a8      	b.n	80030ea <_vfprintf_r+0x2fa>
 8003398:	9d05      	ldr	r5, [sp, #20]
 800339a:	9306      	str	r3, [sp, #24]
 800339c:	f015 0320 	ands.w	r3, r5, #32
 80033a0:	f000 80b2 	beq.w	8003508 <_vfprintf_r+0x718>
 80033a4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80033a6:	1de3      	adds	r3, r4, #7
 80033a8:	f023 0307 	bic.w	r3, r3, #7
 80033ac:	f103 0508 	add.w	r5, r3, #8
 80033b0:	950e      	str	r5, [sp, #56]	; 0x38
 80033b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80033b6:	2300      	movs	r3, #0
 80033b8:	e661      	b.n	800307e <_vfprintf_r+0x28e>
 80033ba:	f893 9000 	ldrb.w	r9, [r3]
 80033be:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
 80033c2:	f103 0001 	add.w	r0, r3, #1
 80033c6:	f000 8784 	beq.w	80042d2 <_vfprintf_r+0x14e2>
 80033ca:	f1a9 0130 	sub.w	r1, r9, #48	; 0x30
 80033ce:	2909      	cmp	r1, #9
 80033d0:	bf82      	ittt	hi
 80033d2:	2400      	movhi	r4, #0
 80033d4:	4603      	movhi	r3, r0
 80033d6:	9408      	strhi	r4, [sp, #32]
 80033d8:	f63f ad98 	bhi.w	8002f0c <_vfprintf_r+0x11c>
 80033dc:	2300      	movs	r3, #0
 80033de:	f810 9b01 	ldrb.w	r9, [r0], #1
 80033e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033e6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80033ea:	f1a9 0130 	sub.w	r1, r9, #48	; 0x30
 80033ee:	2909      	cmp	r1, #9
 80033f0:	d9f5      	bls.n	80033de <_vfprintf_r+0x5ee>
 80033f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80033f6:	9308      	str	r3, [sp, #32]
 80033f8:	4603      	mov	r3, r0
 80033fa:	e587      	b.n	8002f0c <_vfprintf_r+0x11c>
 80033fc:	9d05      	ldr	r5, [sp, #20]
 80033fe:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8003402:	f045 0510 	orr.w	r5, r5, #16
 8003406:	9505      	str	r5, [sp, #20]
 8003408:	9c05      	ldr	r4, [sp, #20]
 800340a:	9306      	str	r3, [sp, #24]
 800340c:	06a2      	lsls	r2, r4, #26
 800340e:	f140 80e8 	bpl.w	80035e2 <_vfprintf_r+0x7f2>
 8003412:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003414:	1de9      	adds	r1, r5, #7
 8003416:	f021 0107 	bic.w	r1, r1, #7
 800341a:	e9d1 2300 	ldrd	r2, r3, [r1]
 800341e:	3108      	adds	r1, #8
 8003420:	910e      	str	r1, [sp, #56]	; 0x38
 8003422:	4614      	mov	r4, r2
 8003424:	461d      	mov	r5, r3
 8003426:	2a00      	cmp	r2, #0
 8003428:	f173 0100 	sbcs.w	r1, r3, #0
 800342c:	f2c0 84a3 	blt.w	8003d76 <_vfprintf_r+0xf86>
 8003430:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 8003434:	2301      	movs	r3, #1
 8003436:	e626      	b.n	8003086 <_vfprintf_r+0x296>
 8003438:	9c05      	ldr	r4, [sp, #20]
 800343a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800343e:	9405      	str	r4, [sp, #20]
 8003440:	f893 9000 	ldrb.w	r9, [r3]
 8003444:	e561      	b.n	8002f0a <_vfprintf_r+0x11a>
 8003446:	2500      	movs	r5, #0
 8003448:	f1a9 0130 	sub.w	r1, r9, #48	; 0x30
 800344c:	950d      	str	r5, [sp, #52]	; 0x34
 800344e:	4628      	mov	r0, r5
 8003450:	f813 9b01 	ldrb.w	r9, [r3], #1
 8003454:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003458:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800345c:	f1a9 0130 	sub.w	r1, r9, #48	; 0x30
 8003460:	2909      	cmp	r1, #9
 8003462:	d9f5      	bls.n	8003450 <_vfprintf_r+0x660>
 8003464:	900d      	str	r0, [sp, #52]	; 0x34
 8003466:	e551      	b.n	8002f0c <_vfprintf_r+0x11c>
 8003468:	9c05      	ldr	r4, [sp, #20]
 800346a:	f044 0408 	orr.w	r4, r4, #8
 800346e:	9405      	str	r4, [sp, #20]
 8003470:	f893 9000 	ldrb.w	r9, [r3]
 8003474:	e549      	b.n	8002f0a <_vfprintf_r+0x11a>
 8003476:	9c05      	ldr	r4, [sp, #20]
 8003478:	9306      	str	r3, [sp, #24]
 800347a:	0724      	lsls	r4, r4, #28
 800347c:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8003480:	f140 850f 	bpl.w	8003ea2 <_vfprintf_r+0x10b2>
 8003484:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003486:	1deb      	adds	r3, r5, #7
 8003488:	f023 0307 	bic.w	r3, r3, #7
 800348c:	f103 0408 	add.w	r4, r3, #8
 8003490:	681d      	ldr	r5, [r3, #0]
 8003492:	940e      	str	r4, [sp, #56]	; 0x38
 8003494:	9516      	str	r5, [sp, #88]	; 0x58
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	9318      	str	r3, [sp, #96]	; 0x60
 800349a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800349c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800349e:	ec43 2b10 	vmov	d0, r2, r3
 80034a2:	f002 fe87 	bl	80061b4 <__fpclassifyd>
 80034a6:	2801      	cmp	r0, #1
 80034a8:	f040 846f 	bne.w	8003d8a <_vfprintf_r+0xf9a>
 80034ac:	9816      	ldr	r0, [sp, #88]	; 0x58
 80034ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80034b0:	2200      	movs	r2, #0
 80034b2:	2300      	movs	r3, #0
 80034b4:	f004 f85a 	bl	800756c <__aeabi_dcmplt>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	f040 8618 	bne.w	80040ee <_vfprintf_r+0x12fe>
 80034be:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 80034c2:	2503      	movs	r5, #3
 80034c4:	9509      	str	r5, [sp, #36]	; 0x24
 80034c6:	9d05      	ldr	r5, [sp, #20]
 80034c8:	2400      	movs	r4, #0
 80034ca:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80034ce:	f647 58b0 	movw	r8, #32176	; 0x7db0
 80034d2:	f647 53ac 	movw	r3, #32172	; 0x7dac
 80034d6:	f6c0 0800 	movt	r8, #2048	; 0x800
 80034da:	f6c0 0300 	movt	r3, #2048	; 0x800
 80034de:	9408      	str	r4, [sp, #32]
 80034e0:	9505      	str	r5, [sp, #20]
 80034e2:	2403      	movs	r4, #3
 80034e4:	2500      	movs	r5, #0
 80034e6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80034ea:	bfd8      	it	le
 80034ec:	4698      	movle	r8, r3
 80034ee:	940b      	str	r4, [sp, #44]	; 0x2c
 80034f0:	9513      	str	r5, [sp, #76]	; 0x4c
 80034f2:	e602      	b.n	80030fa <_vfprintf_r+0x30a>
 80034f4:	9c05      	ldr	r4, [sp, #20]
 80034f6:	9306      	str	r3, [sp, #24]
 80034f8:	f044 0410 	orr.w	r4, r4, #16
 80034fc:	9405      	str	r4, [sp, #20]
 80034fe:	9d05      	ldr	r5, [sp, #20]
 8003500:	f015 0320 	ands.w	r3, r5, #32
 8003504:	f47f af4e 	bne.w	80033a4 <_vfprintf_r+0x5b4>
 8003508:	9c05      	ldr	r4, [sp, #20]
 800350a:	f014 0210 	ands.w	r2, r4, #16
 800350e:	f040 832a 	bne.w	8003b66 <_vfprintf_r+0xd76>
 8003512:	9c05      	ldr	r4, [sp, #20]
 8003514:	f014 0340 	ands.w	r3, r4, #64	; 0x40
 8003518:	f000 8325 	beq.w	8003b66 <_vfprintf_r+0xd76>
 800351c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800351e:	8804      	ldrh	r4, [r0, #0]
 8003520:	3004      	adds	r0, #4
 8003522:	4613      	mov	r3, r2
 8003524:	2500      	movs	r5, #0
 8003526:	900e      	str	r0, [sp, #56]	; 0x38
 8003528:	e5a9      	b.n	800307e <_vfprintf_r+0x28e>
 800352a:	9d05      	ldr	r5, [sp, #20]
 800352c:	9306      	str	r3, [sp, #24]
 800352e:	f045 0510 	orr.w	r5, r5, #16
 8003532:	9505      	str	r5, [sp, #20]
 8003534:	9c05      	ldr	r4, [sp, #20]
 8003536:	06a3      	lsls	r3, r4, #26
 8003538:	f53f ad97 	bmi.w	800306a <_vfprintf_r+0x27a>
 800353c:	9d05      	ldr	r5, [sp, #20]
 800353e:	06ed      	lsls	r5, r5, #27
 8003540:	f100 8318 	bmi.w	8003b74 <_vfprintf_r+0xd84>
 8003544:	9c05      	ldr	r4, [sp, #20]
 8003546:	0664      	lsls	r4, r4, #25
 8003548:	f140 8314 	bpl.w	8003b74 <_vfprintf_r+0xd84>
 800354c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800354e:	8804      	ldrh	r4, [r0, #0]
 8003550:	3004      	adds	r0, #4
 8003552:	2500      	movs	r5, #0
 8003554:	2301      	movs	r3, #1
 8003556:	900e      	str	r0, [sp, #56]	; 0x38
 8003558:	e591      	b.n	800307e <_vfprintf_r+0x28e>
 800355a:	9d05      	ldr	r5, [sp, #20]
 800355c:	9306      	str	r3, [sp, #24]
 800355e:	f647 54bc 	movw	r4, #32188	; 0x7dbc
 8003562:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003566:	06a8      	lsls	r0, r5, #26
 8003568:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 800356c:	9415      	str	r4, [sp, #84]	; 0x54
 800356e:	f140 8091 	bpl.w	8003694 <_vfprintf_r+0x8a4>
 8003572:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8003574:	1de3      	adds	r3, r4, #7
 8003576:	f023 0307 	bic.w	r3, r3, #7
 800357a:	f103 0508 	add.w	r5, r3, #8
 800357e:	950e      	str	r5, [sp, #56]	; 0x38
 8003580:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003584:	9805      	ldr	r0, [sp, #20]
 8003586:	07c3      	lsls	r3, r0, #31
 8003588:	f140 8242 	bpl.w	8003a10 <_vfprintf_r+0xc20>
 800358c:	ea54 0105 	orrs.w	r1, r4, r5
 8003590:	f000 823e 	beq.w	8003a10 <_vfprintf_r+0xc20>
 8003594:	2330      	movs	r3, #48	; 0x30
 8003596:	f040 0002 	orr.w	r0, r0, #2
 800359a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 800359e:	f88d 9079 	strb.w	r9, [sp, #121]	; 0x79
 80035a2:	9005      	str	r0, [sp, #20]
 80035a4:	2302      	movs	r3, #2
 80035a6:	e56a      	b.n	800307e <_vfprintf_r+0x28e>
 80035a8:	9306      	str	r3, [sp, #24]
 80035aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035ac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f04f 0a00 	mov.w	sl, #0
 80035b4:	2501      	movs	r5, #1
 80035b6:	3404      	adds	r4, #4
 80035b8:	f88d a077 	strb.w	sl, [sp, #119]	; 0x77
 80035bc:	9509      	str	r5, [sp, #36]	; 0x24
 80035be:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
 80035c2:	940e      	str	r4, [sp, #56]	; 0x38
 80035c4:	f8cd a020 	str.w	sl, [sp, #32]
 80035c8:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 80035cc:	950b      	str	r5, [sp, #44]	; 0x2c
 80035ce:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 80035d2:	e598      	b.n	8003106 <_vfprintf_r+0x316>
 80035d4:	9c05      	ldr	r4, [sp, #20]
 80035d6:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 80035da:	06a2      	lsls	r2, r4, #26
 80035dc:	9306      	str	r3, [sp, #24]
 80035de:	f53f af18 	bmi.w	8003412 <_vfprintf_r+0x622>
 80035e2:	9c05      	ldr	r4, [sp, #20]
 80035e4:	06e3      	lsls	r3, r4, #27
 80035e6:	f100 82cd 	bmi.w	8003b84 <_vfprintf_r+0xd94>
 80035ea:	9c05      	ldr	r4, [sp, #20]
 80035ec:	0665      	lsls	r5, r4, #25
 80035ee:	f140 82c9 	bpl.w	8003b84 <_vfprintf_r+0xd94>
 80035f2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80035f4:	f9b0 4000 	ldrsh.w	r4, [r0]
 80035f8:	3004      	adds	r0, #4
 80035fa:	17e5      	asrs	r5, r4, #31
 80035fc:	4622      	mov	r2, r4
 80035fe:	462b      	mov	r3, r5
 8003600:	900e      	str	r0, [sp, #56]	; 0x38
 8003602:	e710      	b.n	8003426 <_vfprintf_r+0x636>
 8003604:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8003606:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003608:	6824      	ldr	r4, [r4, #0]
 800360a:	2c00      	cmp	r4, #0
 800360c:	940d      	str	r4, [sp, #52]	; 0x34
 800360e:	f105 0104 	add.w	r1, r5, #4
 8003612:	f6ff acdb 	blt.w	8002fcc <_vfprintf_r+0x1dc>
 8003616:	910e      	str	r1, [sp, #56]	; 0x38
 8003618:	f893 9000 	ldrb.w	r9, [r3]
 800361c:	e475      	b.n	8002f0a <_vfprintf_r+0x11a>
 800361e:	9c05      	ldr	r4, [sp, #20]
 8003620:	f044 0420 	orr.w	r4, r4, #32
 8003624:	9405      	str	r4, [sp, #20]
 8003626:	f893 9000 	ldrb.w	r9, [r3]
 800362a:	e46e      	b.n	8002f0a <_vfprintf_r+0x11a>
 800362c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800362e:	9306      	str	r3, [sp, #24]
 8003630:	f8d4 8000 	ldr.w	r8, [r4]
 8003634:	2500      	movs	r5, #0
 8003636:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
 800363a:	3404      	adds	r4, #4
 800363c:	f1b8 0f00 	cmp.w	r8, #0
 8003640:	f000 8540 	beq.w	80040c4 <_vfprintf_r+0x12d4>
 8003644:	9808      	ldr	r0, [sp, #32]
 8003646:	2800      	cmp	r0, #0
 8003648:	4640      	mov	r0, r8
 800364a:	f2c0 850e 	blt.w	800406a <_vfprintf_r+0x127a>
 800364e:	4629      	mov	r1, r5
 8003650:	9a08      	ldr	r2, [sp, #32]
 8003652:	f002 fa41 	bl	8005ad8 <memchr>
 8003656:	2800      	cmp	r0, #0
 8003658:	f000 858b 	beq.w	8004172 <_vfprintf_r+0x1382>
 800365c:	9908      	ldr	r1, [sp, #32]
 800365e:	940e      	str	r4, [sp, #56]	; 0x38
 8003660:	ebc8 0000 	rsb	r0, r8, r0
 8003664:	4288      	cmp	r0, r1
 8003666:	bfb8      	it	lt
 8003668:	4601      	movlt	r1, r0
 800366a:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
 800366e:	910b      	str	r1, [sp, #44]	; 0x2c
 8003670:	9508      	str	r5, [sp, #32]
 8003672:	9409      	str	r4, [sp, #36]	; 0x24
 8003674:	9513      	str	r5, [sp, #76]	; 0x4c
 8003676:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 800367a:	e53e      	b.n	80030fa <_vfprintf_r+0x30a>
 800367c:	9d05      	ldr	r5, [sp, #20]
 800367e:	9306      	str	r3, [sp, #24]
 8003680:	f647 54d0 	movw	r4, #32208	; 0x7dd0
 8003684:	f6c0 0400 	movt	r4, #2048	; 0x800
 8003688:	06a8      	lsls	r0, r5, #26
 800368a:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 800368e:	9415      	str	r4, [sp, #84]	; 0x54
 8003690:	f53f af6f 	bmi.w	8003572 <_vfprintf_r+0x782>
 8003694:	9c05      	ldr	r4, [sp, #20]
 8003696:	06e1      	lsls	r1, r4, #27
 8003698:	f100 825f 	bmi.w	8003b5a <_vfprintf_r+0xd6a>
 800369c:	9c05      	ldr	r4, [sp, #20]
 800369e:	0662      	lsls	r2, r4, #25
 80036a0:	f140 825b 	bpl.w	8003b5a <_vfprintf_r+0xd6a>
 80036a4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80036a6:	8804      	ldrh	r4, [r0, #0]
 80036a8:	3004      	adds	r0, #4
 80036aa:	2500      	movs	r5, #0
 80036ac:	900e      	str	r0, [sp, #56]	; 0x38
 80036ae:	e769      	b.n	8003584 <_vfprintf_r+0x794>
 80036b0:	f893 9000 	ldrb.w	r9, [r3]
 80036b4:	222b      	movs	r2, #43	; 0x2b
 80036b6:	e428      	b.n	8002f0a <_vfprintf_r+0x11a>
 80036b8:	f893 9000 	ldrb.w	r9, [r3]
 80036bc:	2a00      	cmp	r2, #0
 80036be:	f47f ac24 	bne.w	8002f0a <_vfprintf_r+0x11a>
 80036c2:	2220      	movs	r2, #32
 80036c4:	e421      	b.n	8002f0a <_vfprintf_r+0x11a>
 80036c6:	9d05      	ldr	r5, [sp, #20]
 80036c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036ca:	9306      	str	r3, [sp, #24]
 80036cc:	f045 0502 	orr.w	r5, r5, #2
 80036d0:	f647 50d0 	movw	r0, #32208	; 0x7dd0
 80036d4:	2330      	movs	r3, #48	; 0x30
 80036d6:	f04f 0978 	mov.w	r9, #120	; 0x78
 80036da:	9505      	str	r5, [sp, #20]
 80036dc:	f6c0 0000 	movt	r0, #2048	; 0x800
 80036e0:	1d15      	adds	r5, r2, #4
 80036e2:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 80036e6:	950e      	str	r5, [sp, #56]	; 0x38
 80036e8:	6814      	ldr	r4, [r2, #0]
 80036ea:	f88d 9079 	strb.w	r9, [sp, #121]	; 0x79
 80036ee:	2500      	movs	r5, #0
 80036f0:	9015      	str	r0, [sp, #84]	; 0x54
 80036f2:	2302      	movs	r3, #2
 80036f4:	e4c3      	b.n	800307e <_vfprintf_r+0x28e>
 80036f6:	9d05      	ldr	r5, [sp, #20]
 80036f8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80036fc:	9505      	str	r5, [sp, #20]
 80036fe:	f893 9000 	ldrb.w	r9, [r3]
 8003702:	e402      	b.n	8002f0a <_vfprintf_r+0x11a>
 8003704:	f893 9000 	ldrb.w	r9, [r3]
 8003708:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
 800370c:	bf0c      	ite	eq
 800370e:	9c05      	ldreq	r4, [sp, #20]
 8003710:	9d05      	ldrne	r5, [sp, #20]
 8003712:	4619      	mov	r1, r3
 8003714:	bf09      	itett	eq
 8003716:	f044 0420 	orreq.w	r4, r4, #32
 800371a:	f045 0510 	orrne.w	r5, r5, #16
 800371e:	3301      	addeq	r3, #1
 8003720:	9405      	streq	r4, [sp, #20]
 8003722:	bf0c      	ite	eq
 8003724:	f891 9001 	ldrbeq.w	r9, [r1, #1]
 8003728:	9505      	strne	r5, [sp, #20]
 800372a:	f7ff bbee 	b.w	8002f0a <_vfprintf_r+0x11a>
 800372e:	9d05      	ldr	r5, [sp, #20]
 8003730:	9306      	str	r3, [sp, #24]
 8003732:	06a9      	lsls	r1, r5, #26
 8003734:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8003738:	f140 83c0 	bpl.w	8003ebc <_vfprintf_r+0x10cc>
 800373c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800373e:	6821      	ldr	r1, [r4, #0]
 8003740:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8003742:	17e5      	asrs	r5, r4, #31
 8003744:	462b      	mov	r3, r5
 8003746:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003748:	4622      	mov	r2, r4
 800374a:	3504      	adds	r5, #4
 800374c:	950e      	str	r5, [sp, #56]	; 0x38
 800374e:	e9c1 2300 	strd	r2, r3, [r1]
 8003752:	f7ff bba6 	b.w	8002ea2 <_vfprintf_r+0xb2>
 8003756:	9d05      	ldr	r5, [sp, #20]
 8003758:	f045 0501 	orr.w	r5, r5, #1
 800375c:	9505      	str	r5, [sp, #20]
 800375e:	f893 9000 	ldrb.w	r9, [r3]
 8003762:	f7ff bbd2 	b.w	8002f0a <_vfprintf_r+0x11a>
 8003766:	9306      	str	r3, [sp, #24]
 8003768:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 800376c:	f1b9 0f00 	cmp.w	r9, #0
 8003770:	f000 8407 	beq.w	8003f82 <_vfprintf_r+0x1192>
 8003774:	2300      	movs	r3, #0
 8003776:	2501      	movs	r5, #1
 8003778:	469a      	mov	sl, r3
 800377a:	9509      	str	r5, [sp, #36]	; 0x24
 800377c:	f88d 90a0 	strb.w	r9, [sp, #160]	; 0xa0
 8003780:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8003784:	9308      	str	r3, [sp, #32]
 8003786:	9313      	str	r3, [sp, #76]	; 0x4c
 8003788:	950b      	str	r5, [sp, #44]	; 0x2c
 800378a:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 800378e:	e4ba      	b.n	8003106 <_vfprintf_r+0x316>
 8003790:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8003792:	e508      	b.n	80031a6 <_vfprintf_r+0x3b6>
 8003794:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003796:	9907      	ldr	r1, [sp, #28]
 8003798:	aa25      	add	r2, sp, #148	; 0x94
 800379a:	f002 fd73 	bl	8006284 <__sprint_r>
 800379e:	2800      	cmp	r0, #0
 80037a0:	f47f ac4e 	bne.w	8003040 <_vfprintf_r+0x250>
 80037a4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80037a6:	ae32      	add	r6, sp, #200	; 0xc8
 80037a8:	e50f      	b.n	80031ca <_vfprintf_r+0x3da>
 80037aa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80037ae:	f340 80c2 	ble.w	8003936 <_vfprintf_r+0xb46>
 80037b2:	9816      	ldr	r0, [sp, #88]	; 0x58
 80037b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80037b6:	2200      	movs	r2, #0
 80037b8:	2300      	movs	r3, #0
 80037ba:	f003 fecd 	bl	8007558 <__aeabi_dcmpeq>
 80037be:	2800      	cmp	r0, #0
 80037c0:	f000 8129 	beq.w	8003a16 <_vfprintf_r+0xc26>
 80037c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80037c6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80037c8:	3301      	adds	r3, #1
 80037ca:	3401      	adds	r4, #1
 80037cc:	2201      	movs	r2, #1
 80037ce:	2b07      	cmp	r3, #7
 80037d0:	6035      	str	r5, [r6, #0]
 80037d2:	6072      	str	r2, [r6, #4]
 80037d4:	9427      	str	r4, [sp, #156]	; 0x9c
 80037d6:	9326      	str	r3, [sp, #152]	; 0x98
 80037d8:	bfd8      	it	le
 80037da:	3608      	addle	r6, #8
 80037dc:	f300 8379 	bgt.w	8003ed2 <_vfprintf_r+0x10e2>
 80037e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80037e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037e4:	42ab      	cmp	r3, r5
 80037e6:	db03      	blt.n	80037f0 <_vfprintf_r+0xa00>
 80037e8:	9d05      	ldr	r5, [sp, #20]
 80037ea:	07eb      	lsls	r3, r5, #31
 80037ec:	f57f ad5f 	bpl.w	80032ae <_vfprintf_r+0x4be>
 80037f0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80037f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80037f4:	6035      	str	r5, [r6, #0]
 80037f6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80037f8:	3301      	adds	r3, #1
 80037fa:	442c      	add	r4, r5
 80037fc:	2b07      	cmp	r3, #7
 80037fe:	6075      	str	r5, [r6, #4]
 8003800:	9427      	str	r4, [sp, #156]	; 0x9c
 8003802:	9326      	str	r3, [sp, #152]	; 0x98
 8003804:	bfd8      	it	le
 8003806:	3608      	addle	r6, #8
 8003808:	f300 83fe 	bgt.w	8004008 <_vfprintf_r+0x1218>
 800380c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800380e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8003812:	f1b8 0f00 	cmp.w	r8, #0
 8003816:	f77f ad4a 	ble.w	80032ae <_vfprintf_r+0x4be>
 800381a:	f1b8 0f10 	cmp.w	r8, #16
 800381e:	f647 559c 	movw	r5, #32156	; 0x7d9c
 8003822:	f340 853a 	ble.w	800429a <_vfprintf_r+0x14aa>
 8003826:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003828:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800382c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8003830:	f6c0 0500 	movt	r5, #2048	; 0x800
 8003834:	f04f 0910 	mov.w	r9, #16
 8003838:	e005      	b.n	8003846 <_vfprintf_r+0xa56>
 800383a:	f1a8 0810 	sub.w	r8, r8, #16
 800383e:	f1b8 0f10 	cmp.w	r8, #16
 8003842:	f340 80c0 	ble.w	80039c6 <_vfprintf_r+0xbd6>
 8003846:	3301      	adds	r3, #1
 8003848:	3410      	adds	r4, #16
 800384a:	2b07      	cmp	r3, #7
 800384c:	e886 0280 	stmia.w	r6, {r7, r9}
 8003850:	9427      	str	r4, [sp, #156]	; 0x9c
 8003852:	9326      	str	r3, [sp, #152]	; 0x98
 8003854:	bfd8      	it	le
 8003856:	3608      	addle	r6, #8
 8003858:	ddef      	ble.n	800383a <_vfprintf_r+0xa4a>
 800385a:	4650      	mov	r0, sl
 800385c:	4659      	mov	r1, fp
 800385e:	aa25      	add	r2, sp, #148	; 0x94
 8003860:	f002 fd10 	bl	8006284 <__sprint_r>
 8003864:	2800      	cmp	r0, #0
 8003866:	f040 8196 	bne.w	8003b96 <_vfprintf_r+0xda6>
 800386a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800386c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800386e:	ae32      	add	r6, sp, #200	; 0xc8
 8003870:	e7e3      	b.n	800383a <_vfprintf_r+0xa4a>
 8003872:	2b00      	cmp	r3, #0
 8003874:	f040 80bb 	bne.w	80039ee <_vfprintf_r+0xbfe>
 8003878:	9c05      	ldr	r4, [sp, #20]
 800387a:	07e1      	lsls	r1, r4, #31
 800387c:	bf5c      	itt	pl
 800387e:	930b      	strpl	r3, [sp, #44]	; 0x2c
 8003880:	f10d 08c8 	addpl.w	r8, sp, #200	; 0xc8
 8003884:	f57f ac31 	bpl.w	80030ea <_vfprintf_r+0x2fa>
 8003888:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800388a:	2330      	movs	r3, #48	; 0x30
 800388c:	f88d 30c7 	strb.w	r3, [sp, #199]	; 0xc7
 8003890:	950b      	str	r5, [sp, #44]	; 0x2c
 8003892:	f10d 08c7 	add.w	r8, sp, #199	; 0xc7
 8003896:	e428      	b.n	80030ea <_vfprintf_r+0x2fa>
 8003898:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800389a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800389c:	ebc0 0a05 	rsb	sl, r0, r5
 80038a0:	f1ba 0f00 	cmp.w	sl, #0
 80038a4:	f77f aca6 	ble.w	80031f4 <_vfprintf_r+0x404>
 80038a8:	f1ba 0f10 	cmp.w	sl, #16
 80038ac:	f647 559c 	movw	r5, #32156	; 0x7d9c
 80038b0:	bfdc      	itt	le
 80038b2:	f6c0 0500 	movtle	r5, #2048	; 0x800
 80038b6:	9b26      	ldrle	r3, [sp, #152]	; 0x98
 80038b8:	dd27      	ble.n	800390a <_vfprintf_r+0xb1a>
 80038ba:	f6c0 0500 	movt	r5, #2048	; 0x800
 80038be:	4622      	mov	r2, r4
 80038c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80038c2:	4654      	mov	r4, sl
 80038c4:	f04f 0b10 	mov.w	fp, #16
 80038c8:	46aa      	mov	sl, r5
 80038ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80038cc:	e002      	b.n	80038d4 <_vfprintf_r+0xae4>
 80038ce:	3c10      	subs	r4, #16
 80038d0:	2c10      	cmp	r4, #16
 80038d2:	dd17      	ble.n	8003904 <_vfprintf_r+0xb14>
 80038d4:	3301      	adds	r3, #1
 80038d6:	3210      	adds	r2, #16
 80038d8:	2b07      	cmp	r3, #7
 80038da:	e886 0880 	stmia.w	r6, {r7, fp}
 80038de:	9227      	str	r2, [sp, #156]	; 0x9c
 80038e0:	9326      	str	r3, [sp, #152]	; 0x98
 80038e2:	bfd8      	it	le
 80038e4:	3608      	addle	r6, #8
 80038e6:	ddf2      	ble.n	80038ce <_vfprintf_r+0xade>
 80038e8:	4628      	mov	r0, r5
 80038ea:	9907      	ldr	r1, [sp, #28]
 80038ec:	aa25      	add	r2, sp, #148	; 0x94
 80038ee:	f002 fcc9 	bl	8006284 <__sprint_r>
 80038f2:	2800      	cmp	r0, #0
 80038f4:	f47f aba4 	bne.w	8003040 <_vfprintf_r+0x250>
 80038f8:	3c10      	subs	r4, #16
 80038fa:	2c10      	cmp	r4, #16
 80038fc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80038fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003900:	ae32      	add	r6, sp, #200	; 0xc8
 8003902:	dce7      	bgt.n	80038d4 <_vfprintf_r+0xae4>
 8003904:	4655      	mov	r5, sl
 8003906:	46a2      	mov	sl, r4
 8003908:	4614      	mov	r4, r2
 800390a:	3301      	adds	r3, #1
 800390c:	4454      	add	r4, sl
 800390e:	2b07      	cmp	r3, #7
 8003910:	e886 0420 	stmia.w	r6, {r5, sl}
 8003914:	9427      	str	r4, [sp, #156]	; 0x9c
 8003916:	9326      	str	r3, [sp, #152]	; 0x98
 8003918:	bfd8      	it	le
 800391a:	3608      	addle	r6, #8
 800391c:	f77f ac6a 	ble.w	80031f4 <_vfprintf_r+0x404>
 8003920:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003922:	9907      	ldr	r1, [sp, #28]
 8003924:	aa25      	add	r2, sp, #148	; 0x94
 8003926:	f002 fcad 	bl	8006284 <__sprint_r>
 800392a:	2800      	cmp	r0, #0
 800392c:	f47f ab88 	bne.w	8003040 <_vfprintf_r+0x250>
 8003930:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8003932:	ae32      	add	r6, sp, #200	; 0xc8
 8003934:	e45e      	b.n	80031f4 <_vfprintf_r+0x404>
 8003936:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003938:	2d01      	cmp	r5, #1
 800393a:	f340 81b1 	ble.w	8003ca0 <_vfprintf_r+0xeb0>
 800393e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003940:	f8c6 8000 	str.w	r8, [r6]
 8003944:	3301      	adds	r3, #1
 8003946:	1c62      	adds	r2, r4, #1
 8003948:	2101      	movs	r1, #1
 800394a:	2b07      	cmp	r3, #7
 800394c:	6071      	str	r1, [r6, #4]
 800394e:	9227      	str	r2, [sp, #156]	; 0x9c
 8003950:	9326      	str	r3, [sp, #152]	; 0x98
 8003952:	bfd8      	it	le
 8003954:	3608      	addle	r6, #8
 8003956:	f300 81ce 	bgt.w	8003cf6 <_vfprintf_r+0xf06>
 800395a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800395c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800395e:	4422      	add	r2, r4
 8003960:	6035      	str	r5, [r6, #0]
 8003962:	1c5c      	adds	r4, r3, #1
 8003964:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8003966:	9227      	str	r2, [sp, #156]	; 0x9c
 8003968:	2c07      	cmp	r4, #7
 800396a:	9426      	str	r4, [sp, #152]	; 0x98
 800396c:	6075      	str	r5, [r6, #4]
 800396e:	f300 81ce 	bgt.w	8003d0e <_vfprintf_r+0xf1e>
 8003972:	3608      	adds	r6, #8
 8003974:	4691      	mov	r9, r2
 8003976:	9816      	ldr	r0, [sp, #88]	; 0x58
 8003978:	9918      	ldr	r1, [sp, #96]	; 0x60
 800397a:	2200      	movs	r2, #0
 800397c:	2300      	movs	r3, #0
 800397e:	f003 fdeb 	bl	8007558 <__aeabi_dcmpeq>
 8003982:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003984:	2800      	cmp	r0, #0
 8003986:	f040 80b6 	bne.w	8003af6 <_vfprintf_r+0xd06>
 800398a:	1e6b      	subs	r3, r5, #1
 800398c:	3401      	adds	r4, #1
 800398e:	f108 0101 	add.w	r1, r8, #1
 8003992:	eb03 0209 	add.w	r2, r3, r9
 8003996:	2c07      	cmp	r4, #7
 8003998:	6031      	str	r1, [r6, #0]
 800399a:	9426      	str	r4, [sp, #152]	; 0x98
 800399c:	9227      	str	r2, [sp, #156]	; 0x9c
 800399e:	6073      	str	r3, [r6, #4]
 80039a0:	f300 819c 	bgt.w	8003cdc <_vfprintf_r+0xeec>
 80039a4:	3608      	adds	r6, #8
 80039a6:	4691      	mov	r9, r2
 80039a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80039aa:	1c63      	adds	r3, r4, #1
 80039ac:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80039ae:	9326      	str	r3, [sp, #152]	; 0x98
 80039b0:	444a      	add	r2, r9
 80039b2:	a921      	add	r1, sp, #132	; 0x84
 80039b4:	2b07      	cmp	r3, #7
 80039b6:	9227      	str	r2, [sp, #156]	; 0x9c
 80039b8:	e886 0012 	stmia.w	r6, {r1, r4}
 80039bc:	dc0c      	bgt.n	80039d8 <_vfprintf_r+0xbe8>
 80039be:	3608      	adds	r6, #8
 80039c0:	4614      	mov	r4, r2
 80039c2:	e474      	b.n	80032ae <_vfprintf_r+0x4be>
 80039c4:	4614      	mov	r4, r2
 80039c6:	3301      	adds	r3, #1
 80039c8:	4444      	add	r4, r8
 80039ca:	2b07      	cmp	r3, #7
 80039cc:	9427      	str	r4, [sp, #156]	; 0x9c
 80039ce:	9326      	str	r3, [sp, #152]	; 0x98
 80039d0:	e886 0120 	stmia.w	r6, {r5, r8}
 80039d4:	f77f ac6a 	ble.w	80032ac <_vfprintf_r+0x4bc>
 80039d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80039da:	9907      	ldr	r1, [sp, #28]
 80039dc:	aa25      	add	r2, sp, #148	; 0x94
 80039de:	f002 fc51 	bl	8006284 <__sprint_r>
 80039e2:	2800      	cmp	r0, #0
 80039e4:	f47f ab2c 	bne.w	8003040 <_vfprintf_r+0x250>
 80039e8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80039ea:	ae32      	add	r6, sp, #200	; 0xc8
 80039ec:	e45f      	b.n	80032ae <_vfprintf_r+0x4be>
 80039ee:	920b      	str	r2, [sp, #44]	; 0x2c
 80039f0:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 80039f4:	f7ff bb79 	b.w	80030ea <_vfprintf_r+0x2fa>
 80039f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80039fa:	9907      	ldr	r1, [sp, #28]
 80039fc:	aa25      	add	r2, sp, #148	; 0x94
 80039fe:	f002 fc41 	bl	8006284 <__sprint_r>
 8003a02:	2800      	cmp	r0, #0
 8003a04:	f47f ab1c 	bne.w	8003040 <_vfprintf_r+0x250>
 8003a08:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8003a0a:	ae32      	add	r6, sp, #200	; 0xc8
 8003a0c:	f7ff bbee 	b.w	80031ec <_vfprintf_r+0x3fc>
 8003a10:	2302      	movs	r3, #2
 8003a12:	f7ff bb34 	b.w	800307e <_vfprintf_r+0x28e>
 8003a16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f340 8265 	ble.w	8003ee8 <_vfprintf_r+0x10f8>
 8003a1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a20:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8003a22:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8003a26:	4285      	cmp	r5, r0
 8003a28:	bfa8      	it	ge
 8003a2a:	4605      	movge	r5, r0
 8003a2c:	2d00      	cmp	r5, #0
 8003a2e:	44c3      	add	fp, r8
 8003a30:	dd0c      	ble.n	8003a4c <_vfprintf_r+0xc5c>
 8003a32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003a34:	f8c6 8000 	str.w	r8, [r6]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	442c      	add	r4, r5
 8003a3c:	2b07      	cmp	r3, #7
 8003a3e:	6075      	str	r5, [r6, #4]
 8003a40:	9427      	str	r4, [sp, #156]	; 0x9c
 8003a42:	9326      	str	r3, [sp, #152]	; 0x98
 8003a44:	bfd8      	it	le
 8003a46:	3608      	addle	r6, #8
 8003a48:	f300 8323 	bgt.w	8004092 <_vfprintf_r+0x12a2>
 8003a4c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003a4e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8003a52:	ebc5 0901 	rsb	r9, r5, r1
 8003a56:	f1b9 0f00 	cmp.w	r9, #0
 8003a5a:	f340 80b5 	ble.w	8003bc8 <_vfprintf_r+0xdd8>
 8003a5e:	f1b9 0f10 	cmp.w	r9, #16
 8003a62:	f647 559c 	movw	r5, #32156	; 0x7d9c
 8003a66:	bfdc      	itt	le
 8003a68:	f6c0 0500 	movtle	r5, #2048	; 0x800
 8003a6c:	9b26      	ldrle	r3, [sp, #152]	; 0x98
 8003a6e:	f340 8097 	ble.w	8003ba0 <_vfprintf_r+0xdb0>
 8003a72:	f6c0 0500 	movt	r5, #2048	; 0x800
 8003a76:	4622      	mov	r2, r4
 8003a78:	9508      	str	r5, [sp, #32]
 8003a7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003a7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003a7e:	9d07      	ldr	r5, [sp, #28]
 8003a80:	f04f 0a10 	mov.w	sl, #16
 8003a84:	e005      	b.n	8003a92 <_vfprintf_r+0xca2>
 8003a86:	f1a9 0910 	sub.w	r9, r9, #16
 8003a8a:	f1b9 0f10 	cmp.w	r9, #16
 8003a8e:	f340 8085 	ble.w	8003b9c <_vfprintf_r+0xdac>
 8003a92:	3301      	adds	r3, #1
 8003a94:	3210      	adds	r2, #16
 8003a96:	2b07      	cmp	r3, #7
 8003a98:	e886 0480 	stmia.w	r6, {r7, sl}
 8003a9c:	9227      	str	r2, [sp, #156]	; 0x9c
 8003a9e:	9326      	str	r3, [sp, #152]	; 0x98
 8003aa0:	bfd8      	it	le
 8003aa2:	3608      	addle	r6, #8
 8003aa4:	ddef      	ble.n	8003a86 <_vfprintf_r+0xc96>
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	aa25      	add	r2, sp, #148	; 0x94
 8003aac:	f002 fbea 	bl	8006284 <__sprint_r>
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	f040 8273 	bne.w	8003f9c <_vfprintf_r+0x11ac>
 8003ab6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8003ab8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003aba:	ae32      	add	r6, sp, #200	; 0xc8
 8003abc:	e7e3      	b.n	8003a86 <_vfprintf_r+0xc96>
 8003abe:	2d00      	cmp	r5, #0
 8003ac0:	bf08      	it	eq
 8003ac2:	2c0a      	cmpeq	r4, #10
 8003ac4:	f080 8130 	bcs.w	8003d28 <_vfprintf_r+0xf38>
 8003ac8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003aca:	3430      	adds	r4, #48	; 0x30
 8003acc:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
 8003ad0:	950b      	str	r5, [sp, #44]	; 0x2c
 8003ad2:	f10d 08c7 	add.w	r8, sp, #199	; 0xc7
 8003ad6:	f7ff bb08 	b.w	80030ea <_vfprintf_r+0x2fa>
 8003ada:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003adc:	9907      	ldr	r1, [sp, #28]
 8003ade:	aa25      	add	r2, sp, #148	; 0x94
 8003ae0:	f002 fbd0 	bl	8006284 <__sprint_r>
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	f47f aaab 	bne.w	8003040 <_vfprintf_r+0x250>
 8003aea:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 8003aee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8003af0:	ae32      	add	r6, sp, #200	; 0xc8
 8003af2:	f7ff bb58 	b.w	80031a6 <_vfprintf_r+0x3b6>
 8003af6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8003afa:	f1b8 0f00 	cmp.w	r8, #0
 8003afe:	f77f af53 	ble.w	80039a8 <_vfprintf_r+0xbb8>
 8003b02:	f647 559c 	movw	r5, #32156	; 0x7d9c
 8003b06:	f1b8 0f10 	cmp.w	r8, #16
 8003b0a:	f6c0 0500 	movt	r5, #2048	; 0x800
 8003b0e:	f340 80dc 	ble.w	8003cca <_vfprintf_r+0xeda>
 8003b12:	464b      	mov	r3, r9
 8003b14:	f04f 0a10 	mov.w	sl, #16
 8003b18:	46a9      	mov	r9, r5
 8003b1a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8003b1e:	9d07      	ldr	r5, [sp, #28]
 8003b20:	e005      	b.n	8003b2e <_vfprintf_r+0xd3e>
 8003b22:	f1a8 0810 	sub.w	r8, r8, #16
 8003b26:	f1b8 0f10 	cmp.w	r8, #16
 8003b2a:	f340 80cc 	ble.w	8003cc6 <_vfprintf_r+0xed6>
 8003b2e:	3401      	adds	r4, #1
 8003b30:	3310      	adds	r3, #16
 8003b32:	2c07      	cmp	r4, #7
 8003b34:	e886 0480 	stmia.w	r6, {r7, sl}
 8003b38:	9327      	str	r3, [sp, #156]	; 0x9c
 8003b3a:	9426      	str	r4, [sp, #152]	; 0x98
 8003b3c:	bfd8      	it	le
 8003b3e:	3608      	addle	r6, #8
 8003b40:	ddef      	ble.n	8003b22 <_vfprintf_r+0xd32>
 8003b42:	4658      	mov	r0, fp
 8003b44:	4629      	mov	r1, r5
 8003b46:	aa25      	add	r2, sp, #148	; 0x94
 8003b48:	f002 fb9c 	bl	8006284 <__sprint_r>
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	f040 8225 	bne.w	8003f9c <_vfprintf_r+0x11ac>
 8003b52:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003b54:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8003b56:	ae32      	add	r6, sp, #200	; 0xc8
 8003b58:	e7e3      	b.n	8003b22 <_vfprintf_r+0xd32>
 8003b5a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003b5c:	682c      	ldr	r4, [r5, #0]
 8003b5e:	3504      	adds	r5, #4
 8003b60:	950e      	str	r5, [sp, #56]	; 0x38
 8003b62:	2500      	movs	r5, #0
 8003b64:	e50e      	b.n	8003584 <_vfprintf_r+0x794>
 8003b66:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003b68:	682c      	ldr	r4, [r5, #0]
 8003b6a:	3504      	adds	r5, #4
 8003b6c:	950e      	str	r5, [sp, #56]	; 0x38
 8003b6e:	2500      	movs	r5, #0
 8003b70:	f7ff ba85 	b.w	800307e <_vfprintf_r+0x28e>
 8003b74:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003b76:	682c      	ldr	r4, [r5, #0]
 8003b78:	3504      	adds	r5, #4
 8003b7a:	950e      	str	r5, [sp, #56]	; 0x38
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	2500      	movs	r5, #0
 8003b80:	f7ff ba7d 	b.w	800307e <_vfprintf_r+0x28e>
 8003b84:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003b86:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003b88:	682c      	ldr	r4, [r5, #0]
 8003b8a:	3004      	adds	r0, #4
 8003b8c:	17e5      	asrs	r5, r4, #31
 8003b8e:	900e      	str	r0, [sp, #56]	; 0x38
 8003b90:	4622      	mov	r2, r4
 8003b92:	462b      	mov	r3, r5
 8003b94:	e447      	b.n	8003426 <_vfprintf_r+0x636>
 8003b96:	46d9      	mov	r9, fp
 8003b98:	f7ff ba54 	b.w	8003044 <_vfprintf_r+0x254>
 8003b9c:	9d08      	ldr	r5, [sp, #32]
 8003b9e:	4614      	mov	r4, r2
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	444c      	add	r4, r9
 8003ba4:	2b07      	cmp	r3, #7
 8003ba6:	e886 0220 	stmia.w	r6, {r5, r9}
 8003baa:	9427      	str	r4, [sp, #156]	; 0x9c
 8003bac:	9326      	str	r3, [sp, #152]	; 0x98
 8003bae:	bfd8      	it	le
 8003bb0:	3608      	addle	r6, #8
 8003bb2:	dd09      	ble.n	8003bc8 <_vfprintf_r+0xdd8>
 8003bb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003bb6:	9907      	ldr	r1, [sp, #28]
 8003bb8:	aa25      	add	r2, sp, #148	; 0x94
 8003bba:	f002 fb63 	bl	8006284 <__sprint_r>
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	f47f aa3e 	bne.w	8003040 <_vfprintf_r+0x250>
 8003bc4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8003bc6:	ae32      	add	r6, sp, #200	; 0xc8
 8003bc8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8003bca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003bcc:	44a8      	add	r8, r5
 8003bce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bd0:	42ab      	cmp	r3, r5
 8003bd2:	db4c      	blt.n	8003c6e <_vfprintf_r+0xe7e>
 8003bd4:	9d05      	ldr	r5, [sp, #20]
 8003bd6:	07e8      	lsls	r0, r5, #31
 8003bd8:	d449      	bmi.n	8003c6e <_vfprintf_r+0xe7e>
 8003bda:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003bdc:	ebc8 050b 	rsb	r5, r8, fp
 8003be0:	1ac3      	subs	r3, r0, r3
 8003be2:	42ab      	cmp	r3, r5
 8003be4:	bfb8      	it	lt
 8003be6:	461d      	movlt	r5, r3
 8003be8:	2d00      	cmp	r5, #0
 8003bea:	dd0c      	ble.n	8003c06 <_vfprintf_r+0xe16>
 8003bec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003bee:	f8c6 8000 	str.w	r8, [r6]
 8003bf2:	3201      	adds	r2, #1
 8003bf4:	442c      	add	r4, r5
 8003bf6:	2a07      	cmp	r2, #7
 8003bf8:	6075      	str	r5, [r6, #4]
 8003bfa:	9427      	str	r4, [sp, #156]	; 0x9c
 8003bfc:	9226      	str	r2, [sp, #152]	; 0x98
 8003bfe:	bfd8      	it	le
 8003c00:	3608      	addle	r6, #8
 8003c02:	f300 8251 	bgt.w	80040a8 <_vfprintf_r+0x12b8>
 8003c06:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8003c0a:	ebc5 0803 	rsb	r8, r5, r3
 8003c0e:	f1b8 0f00 	cmp.w	r8, #0
 8003c12:	f77f ab4c 	ble.w	80032ae <_vfprintf_r+0x4be>
 8003c16:	f1b8 0f10 	cmp.w	r8, #16
 8003c1a:	f647 559c 	movw	r5, #32156	; 0x7d9c
 8003c1e:	f340 833c 	ble.w	800429a <_vfprintf_r+0x14aa>
 8003c22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003c24:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003c28:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8003c2c:	f6c0 0500 	movt	r5, #2048	; 0x800
 8003c30:	f04f 0910 	mov.w	r9, #16
 8003c34:	4622      	mov	r2, r4
 8003c36:	e005      	b.n	8003c44 <_vfprintf_r+0xe54>
 8003c38:	f1a8 0810 	sub.w	r8, r8, #16
 8003c3c:	f1b8 0f10 	cmp.w	r8, #16
 8003c40:	f77f aec0 	ble.w	80039c4 <_vfprintf_r+0xbd4>
 8003c44:	3301      	adds	r3, #1
 8003c46:	3210      	adds	r2, #16
 8003c48:	2b07      	cmp	r3, #7
 8003c4a:	e886 0280 	stmia.w	r6, {r7, r9}
 8003c4e:	9227      	str	r2, [sp, #156]	; 0x9c
 8003c50:	9326      	str	r3, [sp, #152]	; 0x98
 8003c52:	bfd8      	it	le
 8003c54:	3608      	addle	r6, #8
 8003c56:	ddef      	ble.n	8003c38 <_vfprintf_r+0xe48>
 8003c58:	4650      	mov	r0, sl
 8003c5a:	4659      	mov	r1, fp
 8003c5c:	aa25      	add	r2, sp, #148	; 0x94
 8003c5e:	f002 fb11 	bl	8006284 <__sprint_r>
 8003c62:	2800      	cmp	r0, #0
 8003c64:	d197      	bne.n	8003b96 <_vfprintf_r+0xda6>
 8003c66:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8003c68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003c6a:	ae32      	add	r6, sp, #200	; 0xc8
 8003c6c:	e7e4      	b.n	8003c38 <_vfprintf_r+0xe48>
 8003c6e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003c70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003c72:	6035      	str	r5, [r6, #0]
 8003c74:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8003c76:	3201      	adds	r2, #1
 8003c78:	442c      	add	r4, r5
 8003c7a:	2a07      	cmp	r2, #7
 8003c7c:	6075      	str	r5, [r6, #4]
 8003c7e:	9427      	str	r4, [sp, #156]	; 0x9c
 8003c80:	9226      	str	r2, [sp, #152]	; 0x98
 8003c82:	bfd8      	it	le
 8003c84:	3608      	addle	r6, #8
 8003c86:	dda8      	ble.n	8003bda <_vfprintf_r+0xdea>
 8003c88:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003c8a:	9907      	ldr	r1, [sp, #28]
 8003c8c:	aa25      	add	r2, sp, #148	; 0x94
 8003c8e:	f002 faf9 	bl	8006284 <__sprint_r>
 8003c92:	2800      	cmp	r0, #0
 8003c94:	f47f a9d4 	bne.w	8003040 <_vfprintf_r+0x250>
 8003c98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003c9a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8003c9c:	ae32      	add	r6, sp, #200	; 0xc8
 8003c9e:	e79c      	b.n	8003bda <_vfprintf_r+0xdea>
 8003ca0:	9d05      	ldr	r5, [sp, #20]
 8003ca2:	07e9      	lsls	r1, r5, #31
 8003ca4:	f53f ae4b 	bmi.w	800393e <_vfprintf_r+0xb4e>
 8003ca8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003caa:	f8c6 8000 	str.w	r8, [r6]
 8003cae:	1c63      	adds	r3, r4, #1
 8003cb0:	1c54      	adds	r4, r2, #1
 8003cb2:	2c07      	cmp	r4, #7
 8003cb4:	f04f 0201 	mov.w	r2, #1
 8003cb8:	9327      	str	r3, [sp, #156]	; 0x9c
 8003cba:	9426      	str	r4, [sp, #152]	; 0x98
 8003cbc:	6072      	str	r2, [r6, #4]
 8003cbe:	dc0d      	bgt.n	8003cdc <_vfprintf_r+0xeec>
 8003cc0:	3608      	adds	r6, #8
 8003cc2:	4699      	mov	r9, r3
 8003cc4:	e670      	b.n	80039a8 <_vfprintf_r+0xbb8>
 8003cc6:	464d      	mov	r5, r9
 8003cc8:	4699      	mov	r9, r3
 8003cca:	3401      	adds	r4, #1
 8003ccc:	eb08 0309 	add.w	r3, r8, r9
 8003cd0:	2c07      	cmp	r4, #7
 8003cd2:	9327      	str	r3, [sp, #156]	; 0x9c
 8003cd4:	9426      	str	r4, [sp, #152]	; 0x98
 8003cd6:	e886 0120 	stmia.w	r6, {r5, r8}
 8003cda:	ddf1      	ble.n	8003cc0 <_vfprintf_r+0xed0>
 8003cdc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003cde:	9907      	ldr	r1, [sp, #28]
 8003ce0:	aa25      	add	r2, sp, #148	; 0x94
 8003ce2:	f002 facf 	bl	8006284 <__sprint_r>
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	f47f a9aa 	bne.w	8003040 <_vfprintf_r+0x250>
 8003cec:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 8003cf0:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8003cf2:	ae32      	add	r6, sp, #200	; 0xc8
 8003cf4:	e658      	b.n	80039a8 <_vfprintf_r+0xbb8>
 8003cf6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003cf8:	9907      	ldr	r1, [sp, #28]
 8003cfa:	aa25      	add	r2, sp, #148	; 0x94
 8003cfc:	f002 fac2 	bl	8006284 <__sprint_r>
 8003d00:	2800      	cmp	r0, #0
 8003d02:	f47f a99d 	bne.w	8003040 <_vfprintf_r+0x250>
 8003d06:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8003d08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003d0a:	ae32      	add	r6, sp, #200	; 0xc8
 8003d0c:	e625      	b.n	800395a <_vfprintf_r+0xb6a>
 8003d0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003d10:	9907      	ldr	r1, [sp, #28]
 8003d12:	aa25      	add	r2, sp, #148	; 0x94
 8003d14:	f002 fab6 	bl	8006284 <__sprint_r>
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	f47f a991 	bne.w	8003040 <_vfprintf_r+0x250>
 8003d1e:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 8003d22:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8003d24:	ae32      	add	r6, sp, #200	; 0xc8
 8003d26:	e626      	b.n	8003976 <_vfprintf_r+0xb86>
 8003d28:	f10d 0bc7 	add.w	fp, sp, #199	; 0xc7
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	4629      	mov	r1, r5
 8003d30:	220a      	movs	r2, #10
 8003d32:	2300      	movs	r3, #0
 8003d34:	f003 fc6a 	bl	800760c <__aeabi_uldivmod>
 8003d38:	3230      	adds	r2, #48	; 0x30
 8003d3a:	f88b 2000 	strb.w	r2, [fp]
 8003d3e:	4620      	mov	r0, r4
 8003d40:	4629      	mov	r1, r5
 8003d42:	220a      	movs	r2, #10
 8003d44:	2300      	movs	r3, #0
 8003d46:	f003 fc61 	bl	800760c <__aeabi_uldivmod>
 8003d4a:	4604      	mov	r4, r0
 8003d4c:	460d      	mov	r5, r1
 8003d4e:	ea54 0005 	orrs.w	r0, r4, r5
 8003d52:	46d8      	mov	r8, fp
 8003d54:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003d58:	d1e8      	bne.n	8003d2c <_vfprintf_r+0xf3c>
 8003d5a:	f7ff b9c2 	b.w	80030e2 <_vfprintf_r+0x2f2>
 8003d5e:	2b30      	cmp	r3, #48	; 0x30
 8003d60:	f43f a9bf 	beq.w	80030e2 <_vfprintf_r+0x2f2>
 8003d64:	9c04      	ldr	r4, [sp, #16]
 8003d66:	2330      	movs	r3, #48	; 0x30
 8003d68:	1aa4      	subs	r4, r4, r2
 8003d6a:	4690      	mov	r8, r2
 8003d6c:	940b      	str	r4, [sp, #44]	; 0x2c
 8003d6e:	f801 3c01 	strb.w	r3, [r1, #-1]
 8003d72:	f7ff b9ba 	b.w	80030ea <_vfprintf_r+0x2fa>
 8003d76:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8003d7a:	4264      	negs	r4, r4
 8003d7c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8003d80:	f88d a077 	strb.w	sl, [sp, #119]	; 0x77
 8003d84:	2301      	movs	r3, #1
 8003d86:	f7ff b97e 	b.w	8003086 <_vfprintf_r+0x296>
 8003d8a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003d8c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8003d8e:	ec43 2b10 	vmov	d0, r2, r3
 8003d92:	f002 fa0f 	bl	80061b4 <__fpclassifyd>
 8003d96:	2800      	cmp	r0, #0
 8003d98:	f000 8111 	beq.w	8003fbe <_vfprintf_r+0x11ce>
 8003d9c:	9c08      	ldr	r4, [sp, #32]
 8003d9e:	3401      	adds	r4, #1
 8003da0:	bf08      	it	eq
 8003da2:	2406      	moveq	r4, #6
 8003da4:	f029 0520 	bic.w	r5, r9, #32
 8003da8:	bf08      	it	eq
 8003daa:	9408      	streq	r4, [sp, #32]
 8003dac:	d006      	beq.n	8003dbc <_vfprintf_r+0xfcc>
 8003dae:	2d47      	cmp	r5, #71	; 0x47
 8003db0:	d104      	bne.n	8003dbc <_vfprintf_r+0xfcc>
 8003db2:	9c08      	ldr	r4, [sp, #32]
 8003db4:	2c00      	cmp	r4, #0
 8003db6:	bf08      	it	eq
 8003db8:	2401      	moveq	r4, #1
 8003dba:	9408      	str	r4, [sp, #32]
 8003dbc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8003dbe:	9c05      	ldr	r4, [sp, #20]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8003dc6:	9410      	str	r4, [sp, #64]	; 0x40
 8003dc8:	bfbd      	ittte	lt
 8003dca:	461c      	movlt	r4, r3
 8003dcc:	f104 4a00 	addlt.w	sl, r4, #2147483648	; 0x80000000
 8003dd0:	f04f 0b2d 	movlt.w	fp, #45	; 0x2d
 8003dd4:	f8dd a060 	ldrge.w	sl, [sp, #96]	; 0x60
 8003dd8:	bfa8      	it	ge
 8003dda:	f04f 0b00 	movge.w	fp, #0
 8003dde:	f1b5 0046 	subs.w	r0, r5, #70	; 0x46
 8003de2:	f1d0 0c00 	rsbs	ip, r0, #0
 8003de6:	eb5c 0c00 	adcs.w	ip, ip, r0
 8003dea:	f1bc 0f00 	cmp.w	ip, #0
 8003dee:	f040 818f 	bne.w	8004110 <_vfprintf_r+0x1320>
 8003df2:	2d45      	cmp	r5, #69	; 0x45
 8003df4:	f040 81ff 	bne.w	80041f6 <_vfprintf_r+0x1406>
 8003df8:	9808      	ldr	r0, [sp, #32]
 8003dfa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003dfc:	1c44      	adds	r4, r0, #1
 8003dfe:	4653      	mov	r3, sl
 8003e00:	a820      	add	r0, sp, #128	; 0x80
 8003e02:	a923      	add	r1, sp, #140	; 0x8c
 8003e04:	ec43 2b10 	vmov	d0, r2, r3
 8003e08:	e88d 0003 	stmia.w	sp, {r0, r1}
 8003e0c:	4622      	mov	r2, r4
 8003e0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003e10:	2102      	movs	r1, #2
 8003e12:	ab1f      	add	r3, sp, #124	; 0x7c
 8003e14:	f000 fbf0 	bl	80045f8 <_dtoa_r>
 8003e18:	4680      	mov	r8, r0
 8003e1a:	4404      	add	r4, r0
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8003e20:	4651      	mov	r1, sl
 8003e22:	2200      	movs	r2, #0
 8003e24:	f003 fb98 	bl	8007558 <__aeabi_dcmpeq>
 8003e28:	4623      	mov	r3, r4
 8003e2a:	b948      	cbnz	r0, 8003e40 <_vfprintf_r+0x1050>
 8003e2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e2e:	429c      	cmp	r4, r3
 8003e30:	d906      	bls.n	8003e40 <_vfprintf_r+0x1050>
 8003e32:	2130      	movs	r1, #48	; 0x30
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	9223      	str	r2, [sp, #140]	; 0x8c
 8003e38:	7019      	strb	r1, [r3, #0]
 8003e3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e3c:	429c      	cmp	r4, r3
 8003e3e:	d8f9      	bhi.n	8003e34 <_vfprintf_r+0x1044>
 8003e40:	ebc8 0303 	rsb	r3, r8, r3
 8003e44:	2d47      	cmp	r5, #71	; 0x47
 8003e46:	930c      	str	r3, [sp, #48]	; 0x30
 8003e48:	f000 818b 	beq.w	8004162 <_vfprintf_r+0x1372>
 8003e4c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003e50:	f340 826a 	ble.w	8004328 <_vfprintf_r+0x1538>
 8003e54:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003e58:	f000 81dd 	beq.w	8004216 <_vfprintf_r+0x1426>
 8003e5c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8003e5e:	9513      	str	r5, [sp, #76]	; 0x4c
 8003e60:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8003e62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e64:	42ac      	cmp	r4, r5
 8003e66:	f2c0 81c8 	blt.w	80041fa <_vfprintf_r+0x140a>
 8003e6a:	9c05      	ldr	r4, [sp, #20]
 8003e6c:	07e0      	lsls	r0, r4, #31
 8003e6e:	bf49      	itett	mi
 8003e70:	9b13      	ldrmi	r3, [sp, #76]	; 0x4c
 8003e72:	9d13      	ldrpl	r5, [sp, #76]	; 0x4c
 8003e74:	3301      	addmi	r3, #1
 8003e76:	930b      	strmi	r3, [sp, #44]	; 0x2c
 8003e78:	bf5a      	itte	pl
 8003e7a:	ea25 73e5 	bicpl.w	r3, r5, r5, asr #31
 8003e7e:	950b      	strpl	r5, [sp, #44]	; 0x2c
 8003e80:	ea23 73e3 	bicmi.w	r3, r3, r3, asr #31
 8003e84:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003e88:	f1bb 0f00 	cmp.w	fp, #0
 8003e8c:	f040 8135 	bne.w	80040fa <_vfprintf_r+0x130a>
 8003e90:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003e92:	9309      	str	r3, [sp, #36]	; 0x24
 8003e94:	9405      	str	r4, [sp, #20]
 8003e96:	f8cd b020 	str.w	fp, [sp, #32]
 8003e9a:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 8003e9e:	f7ff b92c 	b.w	80030fa <_vfprintf_r+0x30a>
 8003ea2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8003ea4:	1de3      	adds	r3, r4, #7
 8003ea6:	f023 0307 	bic.w	r3, r3, #7
 8003eaa:	f103 0508 	add.w	r5, r3, #8
 8003eae:	681c      	ldr	r4, [r3, #0]
 8003eb0:	950e      	str	r5, [sp, #56]	; 0x38
 8003eb2:	9416      	str	r4, [sp, #88]	; 0x58
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	9318      	str	r3, [sp, #96]	; 0x60
 8003eb8:	f7ff baef 	b.w	800349a <_vfprintf_r+0x6aa>
 8003ebc:	9c05      	ldr	r4, [sp, #20]
 8003ebe:	06e2      	lsls	r2, r4, #27
 8003ec0:	d56f      	bpl.n	8003fa2 <_vfprintf_r+0x11b2>
 8003ec2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003ec4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8003ec6:	682b      	ldr	r3, [r5, #0]
 8003ec8:	3504      	adds	r5, #4
 8003eca:	950e      	str	r5, [sp, #56]	; 0x38
 8003ecc:	601c      	str	r4, [r3, #0]
 8003ece:	f7fe bfe8 	b.w	8002ea2 <_vfprintf_r+0xb2>
 8003ed2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003ed4:	9907      	ldr	r1, [sp, #28]
 8003ed6:	aa25      	add	r2, sp, #148	; 0x94
 8003ed8:	f002 f9d4 	bl	8006284 <__sprint_r>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	f47f a8af 	bne.w	8003040 <_vfprintf_r+0x250>
 8003ee2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8003ee4:	ae32      	add	r6, sp, #200	; 0xc8
 8003ee6:	e47b      	b.n	80037e0 <_vfprintf_r+0x9f0>
 8003ee8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003eea:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8003eec:	3201      	adds	r2, #1
 8003eee:	3401      	adds	r4, #1
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	2a07      	cmp	r2, #7
 8003ef4:	6035      	str	r5, [r6, #0]
 8003ef6:	9427      	str	r4, [sp, #156]	; 0x9c
 8003ef8:	9226      	str	r2, [sp, #152]	; 0x98
 8003efa:	6071      	str	r1, [r6, #4]
 8003efc:	dc78      	bgt.n	8003ff0 <_vfprintf_r+0x1200>
 8003efe:	3608      	adds	r6, #8
 8003f00:	4618      	mov	r0, r3
 8003f02:	b928      	cbnz	r0, 8003f10 <_vfprintf_r+0x1120>
 8003f04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f06:	b91d      	cbnz	r5, 8003f10 <_vfprintf_r+0x1120>
 8003f08:	9d05      	ldr	r5, [sp, #20]
 8003f0a:	07ed      	lsls	r5, r5, #31
 8003f0c:	f57f a9cf 	bpl.w	80032ae <_vfprintf_r+0x4be>
 8003f10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003f12:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8003f14:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003f16:	4421      	add	r1, r4
 8003f18:	3301      	adds	r3, #1
 8003f1a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8003f1c:	6035      	str	r5, [r6, #0]
 8003f1e:	2b07      	cmp	r3, #7
 8003f20:	9127      	str	r1, [sp, #156]	; 0x9c
 8003f22:	6074      	str	r4, [r6, #4]
 8003f24:	9326      	str	r3, [sp, #152]	; 0x98
 8003f26:	bfd8      	it	le
 8003f28:	f106 0208 	addle.w	r2, r6, #8
 8003f2c:	f300 8156 	bgt.w	80041dc <_vfprintf_r+0x13ec>
 8003f30:	4244      	negs	r4, r0
 8003f32:	2c00      	cmp	r4, #0
 8003f34:	f340 8089 	ble.w	800404a <_vfprintf_r+0x125a>
 8003f38:	f647 559c 	movw	r5, #32156	; 0x7d9c
 8003f3c:	2c10      	cmp	r4, #16
 8003f3e:	f6c0 0500 	movt	r5, #2048	; 0x800
 8003f42:	dd6d      	ble.n	8004020 <_vfprintf_r+0x1230>
 8003f44:	2610      	movs	r6, #16
 8003f46:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8003f4a:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003f4e:	e002      	b.n	8003f56 <_vfprintf_r+0x1166>
 8003f50:	3c10      	subs	r4, #16
 8003f52:	2c10      	cmp	r4, #16
 8003f54:	dd64      	ble.n	8004020 <_vfprintf_r+0x1230>
 8003f56:	3301      	adds	r3, #1
 8003f58:	3110      	adds	r1, #16
 8003f5a:	2b07      	cmp	r3, #7
 8003f5c:	6017      	str	r7, [r2, #0]
 8003f5e:	6056      	str	r6, [r2, #4]
 8003f60:	9127      	str	r1, [sp, #156]	; 0x9c
 8003f62:	9326      	str	r3, [sp, #152]	; 0x98
 8003f64:	bfd8      	it	le
 8003f66:	3208      	addle	r2, #8
 8003f68:	ddf2      	ble.n	8003f50 <_vfprintf_r+0x1160>
 8003f6a:	4648      	mov	r0, r9
 8003f6c:	4651      	mov	r1, sl
 8003f6e:	aa25      	add	r2, sp, #148	; 0x94
 8003f70:	f002 f988 	bl	8006284 <__sprint_r>
 8003f74:	2800      	cmp	r0, #0
 8003f76:	f040 815d 	bne.w	8004234 <_vfprintf_r+0x1444>
 8003f7a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8003f7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003f7e:	aa32      	add	r2, sp, #200	; 0xc8
 8003f80:	e7e6      	b.n	8003f50 <_vfprintf_r+0x1160>
 8003f82:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003f84:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f43f a85b 	beq.w	8003044 <_vfprintf_r+0x254>
 8003f8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003f90:	4649      	mov	r1, r9
 8003f92:	aa25      	add	r2, sp, #148	; 0x94
 8003f94:	f002 f976 	bl	8006284 <__sprint_r>
 8003f98:	f7ff b854 	b.w	8003044 <_vfprintf_r+0x254>
 8003f9c:	46a9      	mov	r9, r5
 8003f9e:	f7ff b851 	b.w	8003044 <_vfprintf_r+0x254>
 8003fa2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8003fa4:	9d05      	ldr	r5, [sp, #20]
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003fac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003fae:	f104 0404 	add.w	r4, r4, #4
 8003fb2:	940e      	str	r4, [sp, #56]	; 0x38
 8003fb4:	bf14      	ite	ne
 8003fb6:	801d      	strhne	r5, [r3, #0]
 8003fb8:	601d      	streq	r5, [r3, #0]
 8003fba:	f7fe bf72 	b.w	8002ea2 <_vfprintf_r+0xb2>
 8003fbe:	9d05      	ldr	r5, [sp, #20]
 8003fc0:	9008      	str	r0, [sp, #32]
 8003fc2:	f647 58b8 	movw	r8, #32184	; 0x7db8
 8003fc6:	f647 53b4 	movw	r3, #32180	; 0x7db4
 8003fca:	2403      	movs	r4, #3
 8003fcc:	f6c0 0800 	movt	r8, #2048	; 0x800
 8003fd0:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003fd4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8003fd8:	9409      	str	r4, [sp, #36]	; 0x24
 8003fda:	9505      	str	r5, [sp, #20]
 8003fdc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003fe0:	bfd8      	it	le
 8003fe2:	4698      	movle	r8, r3
 8003fe4:	9013      	str	r0, [sp, #76]	; 0x4c
 8003fe6:	940b      	str	r4, [sp, #44]	; 0x2c
 8003fe8:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 8003fec:	f7ff b885 	b.w	80030fa <_vfprintf_r+0x30a>
 8003ff0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003ff2:	9907      	ldr	r1, [sp, #28]
 8003ff4:	aa25      	add	r2, sp, #148	; 0x94
 8003ff6:	f002 f945 	bl	8006284 <__sprint_r>
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	f47f a820 	bne.w	8003040 <_vfprintf_r+0x250>
 8004000:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8004002:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8004004:	ae32      	add	r6, sp, #200	; 0xc8
 8004006:	e77c      	b.n	8003f02 <_vfprintf_r+0x1112>
 8004008:	980a      	ldr	r0, [sp, #40]	; 0x28
 800400a:	9907      	ldr	r1, [sp, #28]
 800400c:	aa25      	add	r2, sp, #148	; 0x94
 800400e:	f002 f939 	bl	8006284 <__sprint_r>
 8004012:	2800      	cmp	r0, #0
 8004014:	f47f a814 	bne.w	8003040 <_vfprintf_r+0x250>
 8004018:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800401a:	ae32      	add	r6, sp, #200	; 0xc8
 800401c:	f7ff bbf6 	b.w	800380c <_vfprintf_r+0xa1c>
 8004020:	3301      	adds	r3, #1
 8004022:	4421      	add	r1, r4
 8004024:	2b07      	cmp	r3, #7
 8004026:	6015      	str	r5, [r2, #0]
 8004028:	6054      	str	r4, [r2, #4]
 800402a:	9127      	str	r1, [sp, #156]	; 0x9c
 800402c:	9326      	str	r3, [sp, #152]	; 0x98
 800402e:	bfd8      	it	le
 8004030:	3208      	addle	r2, #8
 8004032:	dd0a      	ble.n	800404a <_vfprintf_r+0x125a>
 8004034:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004036:	9907      	ldr	r1, [sp, #28]
 8004038:	aa25      	add	r2, sp, #148	; 0x94
 800403a:	f002 f923 	bl	8006284 <__sprint_r>
 800403e:	2800      	cmp	r0, #0
 8004040:	f47e affe 	bne.w	8003040 <_vfprintf_r+0x250>
 8004044:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8004046:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004048:	aa32      	add	r2, sp, #200	; 0xc8
 800404a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800404c:	f8c2 8000 	str.w	r8, [r2]
 8004050:	3301      	adds	r3, #1
 8004052:	4429      	add	r1, r5
 8004054:	2b07      	cmp	r3, #7
 8004056:	9127      	str	r1, [sp, #156]	; 0x9c
 8004058:	9326      	str	r3, [sp, #152]	; 0x98
 800405a:	6055      	str	r5, [r2, #4]
 800405c:	f73f acbc 	bgt.w	80039d8 <_vfprintf_r+0xbe8>
 8004060:	f102 0608 	add.w	r6, r2, #8
 8004064:	460c      	mov	r4, r1
 8004066:	f7ff b922 	b.w	80032ae <_vfprintf_r+0x4be>
 800406a:	9508      	str	r5, [sp, #32]
 800406c:	f7fe fe82 	bl	8002d74 <strlen>
 8004070:	940e      	str	r4, [sp, #56]	; 0x38
 8004072:	9c08      	ldr	r4, [sp, #32]
 8004074:	900b      	str	r0, [sp, #44]	; 0x2c
 8004076:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
 800407a:	9509      	str	r5, [sp, #36]	; 0x24
 800407c:	9413      	str	r4, [sp, #76]	; 0x4c
 800407e:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 8004082:	f7ff b83a 	b.w	80030fa <_vfprintf_r+0x30a>
 8004086:	f6c0 0a00 	movt	sl, #2048	; 0x800
 800408a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800408c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800408e:	f7ff b87c 	b.w	800318a <_vfprintf_r+0x39a>
 8004092:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004094:	9907      	ldr	r1, [sp, #28]
 8004096:	aa25      	add	r2, sp, #148	; 0x94
 8004098:	f002 f8f4 	bl	8006284 <__sprint_r>
 800409c:	2800      	cmp	r0, #0
 800409e:	f47e afcf 	bne.w	8003040 <_vfprintf_r+0x250>
 80040a2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80040a4:	ae32      	add	r6, sp, #200	; 0xc8
 80040a6:	e4d1      	b.n	8003a4c <_vfprintf_r+0xc5c>
 80040a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80040aa:	9907      	ldr	r1, [sp, #28]
 80040ac:	aa25      	add	r2, sp, #148	; 0x94
 80040ae:	f002 f8e9 	bl	8006284 <__sprint_r>
 80040b2:	2800      	cmp	r0, #0
 80040b4:	f47e afc4 	bne.w	8003040 <_vfprintf_r+0x250>
 80040b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80040ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80040bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80040be:	1acb      	subs	r3, r1, r3
 80040c0:	ae32      	add	r6, sp, #200	; 0xc8
 80040c2:	e5a0      	b.n	8003c06 <_vfprintf_r+0xe16>
 80040c4:	9d08      	ldr	r5, [sp, #32]
 80040c6:	940e      	str	r4, [sp, #56]	; 0x38
 80040c8:	2d06      	cmp	r5, #6
 80040ca:	bf28      	it	cs
 80040cc:	2506      	movcs	r5, #6
 80040ce:	46c2      	mov	sl, r8
 80040d0:	950b      	str	r5, [sp, #44]	; 0x2c
 80040d2:	f647 58e4 	movw	r8, #32228	; 0x7de4
 80040d6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80040da:	f8cd a020 	str.w	sl, [sp, #32]
 80040de:	4654      	mov	r4, sl
 80040e0:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 80040e4:	9509      	str	r5, [sp, #36]	; 0x24
 80040e6:	f6c0 0800 	movt	r8, #2048	; 0x800
 80040ea:	f7ff b806 	b.w	80030fa <_vfprintf_r+0x30a>
 80040ee:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 80040f2:	f88d a077 	strb.w	sl, [sp, #119]	; 0x77
 80040f6:	f7ff b9e4 	b.w	80034c2 <_vfprintf_r+0x6d2>
 80040fa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80040fc:	9309      	str	r3, [sp, #36]	; 0x24
 80040fe:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8004102:	2400      	movs	r4, #0
 8004104:	9505      	str	r5, [sp, #20]
 8004106:	f88d a077 	strb.w	sl, [sp, #119]	; 0x77
 800410a:	9408      	str	r4, [sp, #32]
 800410c:	f7fe bff8 	b.w	8003100 <_vfprintf_r+0x310>
 8004110:	2103      	movs	r1, #3
 8004112:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004114:	f8cd c008 	str.w	ip, [sp, #8]
 8004118:	4653      	mov	r3, sl
 800411a:	a823      	add	r0, sp, #140	; 0x8c
 800411c:	ac20      	add	r4, sp, #128	; 0x80
 800411e:	ec43 2b10 	vmov	d0, r2, r3
 8004122:	9001      	str	r0, [sp, #4]
 8004124:	9400      	str	r4, [sp, #0]
 8004126:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004128:	9a08      	ldr	r2, [sp, #32]
 800412a:	ab1f      	add	r3, sp, #124	; 0x7c
 800412c:	f000 fa64 	bl	80045f8 <_dtoa_r>
 8004130:	2d47      	cmp	r5, #71	; 0x47
 8004132:	4680      	mov	r8, r0
 8004134:	f8dd c008 	ldr.w	ip, [sp, #8]
 8004138:	d102      	bne.n	8004140 <_vfprintf_r+0x1350>
 800413a:	9c05      	ldr	r4, [sp, #20]
 800413c:	07e1      	lsls	r1, r4, #31
 800413e:	d50d      	bpl.n	800415c <_vfprintf_r+0x136c>
 8004140:	9c08      	ldr	r4, [sp, #32]
 8004142:	4444      	add	r4, r8
 8004144:	f1bc 0f00 	cmp.w	ip, #0
 8004148:	f43f ae68 	beq.w	8003e1c <_vfprintf_r+0x102c>
 800414c:	f898 3000 	ldrb.w	r3, [r8]
 8004150:	2b30      	cmp	r3, #48	; 0x30
 8004152:	f000 80af 	beq.w	80042b4 <_vfprintf_r+0x14c4>
 8004156:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004158:	441c      	add	r4, r3
 800415a:	e65f      	b.n	8003e1c <_vfprintf_r+0x102c>
 800415c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800415e:	1a1b      	subs	r3, r3, r0
 8004160:	930c      	str	r3, [sp, #48]	; 0x30
 8004162:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004164:	1cda      	adds	r2, r3, #3
 8004166:	db11      	blt.n	800418c <_vfprintf_r+0x139c>
 8004168:	9c08      	ldr	r4, [sp, #32]
 800416a:	429c      	cmp	r4, r3
 800416c:	db0e      	blt.n	800418c <_vfprintf_r+0x139c>
 800416e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004170:	e676      	b.n	8003e60 <_vfprintf_r+0x1070>
 8004172:	9d08      	ldr	r5, [sp, #32]
 8004174:	940e      	str	r4, [sp, #56]	; 0x38
 8004176:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800417a:	9509      	str	r5, [sp, #36]	; 0x24
 800417c:	9d08      	ldr	r5, [sp, #32]
 800417e:	9013      	str	r0, [sp, #76]	; 0x4c
 8004180:	950b      	str	r5, [sp, #44]	; 0x2c
 8004182:	9008      	str	r0, [sp, #32]
 8004184:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 8004188:	f7fe bfb7 	b.w	80030fa <_vfprintf_r+0x30a>
 800418c:	f1a9 0902 	sub.w	r9, r9, #2
 8004190:	3b01      	subs	r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	931f      	str	r3, [sp, #124]	; 0x7c
 8004196:	bfba      	itte	lt
 8004198:	425b      	neglt	r3, r3
 800419a:	222d      	movlt	r2, #45	; 0x2d
 800419c:	222b      	movge	r2, #43	; 0x2b
 800419e:	2b09      	cmp	r3, #9
 80041a0:	f88d 9084 	strb.w	r9, [sp, #132]	; 0x84
 80041a4:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
 80041a8:	dc47      	bgt.n	800423a <_vfprintf_r+0x144a>
 80041aa:	3330      	adds	r3, #48	; 0x30
 80041ac:	2230      	movs	r2, #48	; 0x30
 80041ae:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 80041b2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
 80041b6:	ab22      	add	r3, sp, #136	; 0x88
 80041b8:	aa21      	add	r2, sp, #132	; 0x84
 80041ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80041bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041be:	1a9a      	subs	r2, r3, r2
 80041c0:	4414      	add	r4, r2
 80041c2:	2d01      	cmp	r5, #1
 80041c4:	9219      	str	r2, [sp, #100]	; 0x64
 80041c6:	940b      	str	r4, [sp, #44]	; 0x2c
 80041c8:	f340 80a4 	ble.w	8004314 <_vfprintf_r+0x1524>
 80041cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041ce:	2400      	movs	r4, #0
 80041d0:	3301      	adds	r3, #1
 80041d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80041d4:	9413      	str	r4, [sp, #76]	; 0x4c
 80041d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80041da:	e655      	b.n	8003e88 <_vfprintf_r+0x1098>
 80041dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80041de:	9907      	ldr	r1, [sp, #28]
 80041e0:	aa25      	add	r2, sp, #148	; 0x94
 80041e2:	f002 f84f 	bl	8006284 <__sprint_r>
 80041e6:	2800      	cmp	r0, #0
 80041e8:	f47e af2a 	bne.w	8003040 <_vfprintf_r+0x250>
 80041ec:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80041ee:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80041f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80041f2:	aa32      	add	r2, sp, #200	; 0xc8
 80041f4:	e69c      	b.n	8003f30 <_vfprintf_r+0x1140>
 80041f6:	2102      	movs	r1, #2
 80041f8:	e78b      	b.n	8004112 <_vfprintf_r+0x1322>
 80041fa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80041fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041fe:	2c00      	cmp	r4, #0
 8004200:	bfd4      	ite	le
 8004202:	f1c4 0302 	rsble	r3, r4, #2
 8004206:	2301      	movgt	r3, #1
 8004208:	441d      	add	r5, r3
 800420a:	950b      	str	r5, [sp, #44]	; 0x2c
 800420c:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8004210:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004214:	e638      	b.n	8003e88 <_vfprintf_r+0x1098>
 8004216:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8004218:	2c00      	cmp	r4, #0
 800421a:	9413      	str	r4, [sp, #76]	; 0x4c
 800421c:	dd6b      	ble.n	80042f6 <_vfprintf_r+0x1506>
 800421e:	9d08      	ldr	r5, [sp, #32]
 8004220:	2d00      	cmp	r5, #0
 8004222:	d13f      	bne.n	80042a4 <_vfprintf_r+0x14b4>
 8004224:	9c05      	ldr	r4, [sp, #20]
 8004226:	07e5      	lsls	r5, r4, #31
 8004228:	d43c      	bmi.n	80042a4 <_vfprintf_r+0x14b4>
 800422a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800422c:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8004230:	950b      	str	r5, [sp, #44]	; 0x2c
 8004232:	e629      	b.n	8003e88 <_vfprintf_r+0x1098>
 8004234:	46d1      	mov	r9, sl
 8004236:	f7fe bf05 	b.w	8003044 <_vfprintf_r+0x254>
 800423a:	f246 6067 	movw	r0, #26215	; 0x6667
 800423e:	f2c6 6066 	movt	r0, #26214	; 0x6666
 8004242:	f10d 0192 	add.w	r1, sp, #146	; 0x92
 8004246:	fb80 5403 	smull	r5, r4, r0, r3
 800424a:	17da      	asrs	r2, r3, #31
 800424c:	ebc2 02a4 	rsb	r2, r2, r4, asr #2
 8004250:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 8004254:	460d      	mov	r5, r1
 8004256:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 800425a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800425e:	2a09      	cmp	r2, #9
 8004260:	7029      	strb	r1, [r5, #0]
 8004262:	4613      	mov	r3, r2
 8004264:	f105 31ff 	add.w	r1, r5, #4294967295	; 0xffffffff
 8004268:	dced      	bgt.n	8004246 <_vfprintf_r+0x1456>
 800426a:	f102 0330 	add.w	r3, r2, #48	; 0x30
 800426e:	f10d 0093 	add.w	r0, sp, #147	; 0x93
 8004272:	b2da      	uxtb	r2, r3
 8004274:	4288      	cmp	r0, r1
 8004276:	f805 2c01 	strb.w	r2, [r5, #-1]
 800427a:	d957      	bls.n	800432c <_vfprintf_r+0x153c>
 800427c:	f10d 0185 	add.w	r1, sp, #133	; 0x85
 8004280:	462b      	mov	r3, r5
 8004282:	e001      	b.n	8004288 <_vfprintf_r+0x1498>
 8004284:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004288:	4283      	cmp	r3, r0
 800428a:	f801 2f01 	strb.w	r2, [r1, #1]!
 800428e:	d1f9      	bne.n	8004284 <_vfprintf_r+0x1494>
 8004290:	a842      	add	r0, sp, #264	; 0x108
 8004292:	ebc5 0340 	rsb	r3, r5, r0, lsl #1
 8004296:	3bf6      	subs	r3, #246	; 0xf6
 8004298:	e78e      	b.n	80041b8 <_vfprintf_r+0x13c8>
 800429a:	f6c0 0500 	movt	r5, #2048	; 0x800
 800429e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80042a0:	f7ff bb91 	b.w	80039c6 <_vfprintf_r+0xbd6>
 80042a4:	9c08      	ldr	r4, [sp, #32]
 80042a6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80042a8:	1c63      	adds	r3, r4, #1
 80042aa:	441d      	add	r5, r3
 80042ac:	950b      	str	r5, [sp, #44]	; 0x2c
 80042ae:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 80042b2:	e5e9      	b.n	8003e88 <_vfprintf_r+0x1098>
 80042b4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80042b6:	4651      	mov	r1, sl
 80042b8:	2200      	movs	r2, #0
 80042ba:	2300      	movs	r3, #0
 80042bc:	f003 f94c 	bl	8007558 <__aeabi_dcmpeq>
 80042c0:	2800      	cmp	r0, #0
 80042c2:	f47f af48 	bne.w	8004156 <_vfprintf_r+0x1366>
 80042c6:	9808      	ldr	r0, [sp, #32]
 80042c8:	f1c0 0301 	rsb	r3, r0, #1
 80042cc:	931f      	str	r3, [sp, #124]	; 0x7c
 80042ce:	441c      	add	r4, r3
 80042d0:	e5a4      	b.n	8003e1c <_vfprintf_r+0x102c>
 80042d2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80042d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80042d6:	682d      	ldr	r5, [r5, #0]
 80042d8:	f893 9001 	ldrb.w	r9, [r3, #1]
 80042dc:	9508      	str	r5, [sp, #32]
 80042de:	2d00      	cmp	r5, #0
 80042e0:	f104 0104 	add.w	r1, r4, #4
 80042e4:	bfb8      	it	lt
 80042e6:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 80042ea:	910e      	str	r1, [sp, #56]	; 0x38
 80042ec:	4603      	mov	r3, r0
 80042ee:	bfb8      	it	lt
 80042f0:	9508      	strlt	r5, [sp, #32]
 80042f2:	f7fe be0a 	b.w	8002f0a <_vfprintf_r+0x11a>
 80042f6:	9c08      	ldr	r4, [sp, #32]
 80042f8:	b934      	cbnz	r4, 8004308 <_vfprintf_r+0x1518>
 80042fa:	9d05      	ldr	r5, [sp, #20]
 80042fc:	07ec      	lsls	r4, r5, #31
 80042fe:	bf5c      	itt	pl
 8004300:	2301      	movpl	r3, #1
 8004302:	930b      	strpl	r3, [sp, #44]	; 0x2c
 8004304:	f57f adc0 	bpl.w	8003e88 <_vfprintf_r+0x1098>
 8004308:	9b08      	ldr	r3, [sp, #32]
 800430a:	3302      	adds	r3, #2
 800430c:	930b      	str	r3, [sp, #44]	; 0x2c
 800430e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004312:	e5b9      	b.n	8003e88 <_vfprintf_r+0x1098>
 8004314:	9c05      	ldr	r4, [sp, #20]
 8004316:	f014 0301 	ands.w	r3, r4, #1
 800431a:	f47f af57 	bne.w	80041cc <_vfprintf_r+0x13dc>
 800431e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004320:	9313      	str	r3, [sp, #76]	; 0x4c
 8004322:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8004326:	e5af      	b.n	8003e88 <_vfprintf_r+0x1098>
 8004328:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800432a:	e731      	b.n	8004190 <_vfprintf_r+0x13a0>
 800432c:	f10d 0386 	add.w	r3, sp, #134	; 0x86
 8004330:	e742      	b.n	80041b8 <_vfprintf_r+0x13c8>
 8004332:	bf00      	nop

08004334 <__sbprintf>:
 8004334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004338:	460c      	mov	r4, r1
 800433a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800433e:	69e7      	ldr	r7, [r4, #28]
 8004340:	f8b1 900c 	ldrh.w	r9, [r1, #12]
 8004344:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8004346:	f8b4 800e 	ldrh.w	r8, [r4, #14]
 800434a:	9707      	str	r7, [sp, #28]
 800434c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800434e:	9119      	str	r1, [sp, #100]	; 0x64
 8004350:	ad1a      	add	r5, sp, #104	; 0x68
 8004352:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8004356:	f04f 0e00 	mov.w	lr, #0
 800435a:	f029 0902 	bic.w	r9, r9, #2
 800435e:	4669      	mov	r1, sp
 8004360:	9500      	str	r5, [sp, #0]
 8004362:	9504      	str	r5, [sp, #16]
 8004364:	9602      	str	r6, [sp, #8]
 8004366:	9605      	str	r6, [sp, #20]
 8004368:	f8ad 900c 	strh.w	r9, [sp, #12]
 800436c:	f8ad 800e 	strh.w	r8, [sp, #14]
 8004370:	9709      	str	r7, [sp, #36]	; 0x24
 8004372:	f8cd e018 	str.w	lr, [sp, #24]
 8004376:	4606      	mov	r6, r0
 8004378:	f7fe fd3a 	bl	8002df0 <_vfprintf_r>
 800437c:	1e05      	subs	r5, r0, #0
 800437e:	db07      	blt.n	8004390 <__sbprintf+0x5c>
 8004380:	4630      	mov	r0, r6
 8004382:	4669      	mov	r1, sp
 8004384:	f001 f9d8 	bl	8005738 <_fflush_r>
 8004388:	2800      	cmp	r0, #0
 800438a:	bf18      	it	ne
 800438c:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8004390:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8004394:	065e      	lsls	r6, r3, #25
 8004396:	bf48      	it	mi
 8004398:	89a3      	ldrhmi	r3, [r4, #12]
 800439a:	4628      	mov	r0, r5
 800439c:	bf44      	itt	mi
 800439e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80043a2:	81a3      	strhmi	r3, [r4, #12]
 80043a4:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 80043a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080043ac <_write_r>:
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	f648 341c 	movw	r4, #35612	; 0x8b1c
 80043b2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80043b6:	4606      	mov	r6, r0
 80043b8:	2500      	movs	r5, #0
 80043ba:	4608      	mov	r0, r1
 80043bc:	4611      	mov	r1, r2
 80043be:	461a      	mov	r2, r3
 80043c0:	6025      	str	r5, [r4, #0]
 80043c2:	f7fc f979 	bl	80006b8 <_write>
 80043c6:	1c43      	adds	r3, r0, #1
 80043c8:	d000      	beq.n	80043cc <_write_r+0x20>
 80043ca:	bd70      	pop	{r4, r5, r6, pc}
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0fb      	beq.n	80043ca <_write_r+0x1e>
 80043d2:	6033      	str	r3, [r6, #0]
 80043d4:	bd70      	pop	{r4, r5, r6, pc}
 80043d6:	bf00      	nop

080043d8 <__swsetup_r>:
 80043d8:	b538      	push	{r3, r4, r5, lr}
 80043da:	f240 4350 	movw	r3, #1104	; 0x450
 80043de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80043e2:	4605      	mov	r5, r0
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	460c      	mov	r4, r1
 80043e8:	b110      	cbz	r0, 80043f0 <__swsetup_r+0x18>
 80043ea:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80043ec:	2a00      	cmp	r2, #0
 80043ee:	d036      	beq.n	800445e <__swsetup_r+0x86>
 80043f0:	89a2      	ldrh	r2, [r4, #12]
 80043f2:	b293      	uxth	r3, r2
 80043f4:	0718      	lsls	r0, r3, #28
 80043f6:	d50c      	bpl.n	8004412 <__swsetup_r+0x3a>
 80043f8:	6921      	ldr	r1, [r4, #16]
 80043fa:	b1a9      	cbz	r1, 8004428 <__swsetup_r+0x50>
 80043fc:	f013 0201 	ands.w	r2, r3, #1
 8004400:	d01e      	beq.n	8004440 <__swsetup_r+0x68>
 8004402:	6963      	ldr	r3, [r4, #20]
 8004404:	2200      	movs	r2, #0
 8004406:	425b      	negs	r3, r3
 8004408:	61a3      	str	r3, [r4, #24]
 800440a:	60a2      	str	r2, [r4, #8]
 800440c:	b1f1      	cbz	r1, 800444c <__swsetup_r+0x74>
 800440e:	2000      	movs	r0, #0
 8004410:	bd38      	pop	{r3, r4, r5, pc}
 8004412:	06d9      	lsls	r1, r3, #27
 8004414:	d53b      	bpl.n	800448e <__swsetup_r+0xb6>
 8004416:	075b      	lsls	r3, r3, #29
 8004418:	d424      	bmi.n	8004464 <__swsetup_r+0x8c>
 800441a:	6921      	ldr	r1, [r4, #16]
 800441c:	f042 0308 	orr.w	r3, r2, #8
 8004420:	81a3      	strh	r3, [r4, #12]
 8004422:	b29b      	uxth	r3, r3
 8004424:	2900      	cmp	r1, #0
 8004426:	d1e9      	bne.n	80043fc <__swsetup_r+0x24>
 8004428:	f403 7220 	and.w	r2, r3, #640	; 0x280
 800442c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004430:	d0e4      	beq.n	80043fc <__swsetup_r+0x24>
 8004432:	4621      	mov	r1, r4
 8004434:	4628      	mov	r0, r5
 8004436:	f001 fadd 	bl	80059f4 <__smakebuf_r>
 800443a:	89a3      	ldrh	r3, [r4, #12]
 800443c:	6921      	ldr	r1, [r4, #16]
 800443e:	e7dd      	b.n	80043fc <__swsetup_r+0x24>
 8004440:	0798      	lsls	r0, r3, #30
 8004442:	bf58      	it	pl
 8004444:	6962      	ldrpl	r2, [r4, #20]
 8004446:	60a2      	str	r2, [r4, #8]
 8004448:	2900      	cmp	r1, #0
 800444a:	d1e0      	bne.n	800440e <__swsetup_r+0x36>
 800444c:	89a3      	ldrh	r3, [r4, #12]
 800444e:	061a      	lsls	r2, r3, #24
 8004450:	d5dd      	bpl.n	800440e <__swsetup_r+0x36>
 8004452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004456:	81a3      	strh	r3, [r4, #12]
 8004458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800445c:	bd38      	pop	{r3, r4, r5, pc}
 800445e:	f7fd fe7f 	bl	8002160 <__sinit>
 8004462:	e7c5      	b.n	80043f0 <__swsetup_r+0x18>
 8004464:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004466:	b149      	cbz	r1, 800447c <__swsetup_r+0xa4>
 8004468:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800446c:	4299      	cmp	r1, r3
 800446e:	d003      	beq.n	8004478 <__swsetup_r+0xa0>
 8004470:	4628      	mov	r0, r5
 8004472:	f001 f9c9 	bl	8005808 <_free_r>
 8004476:	89a2      	ldrh	r2, [r4, #12]
 8004478:	2300      	movs	r3, #0
 800447a:	6323      	str	r3, [r4, #48]	; 0x30
 800447c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8004480:	6921      	ldr	r1, [r4, #16]
 8004482:	0412      	lsls	r2, r2, #16
 8004484:	2300      	movs	r3, #0
 8004486:	0c12      	lsrs	r2, r2, #16
 8004488:	e884 000a 	stmia.w	r4, {r1, r3}
 800448c:	e7c6      	b.n	800441c <__swsetup_r+0x44>
 800448e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004492:	2309      	movs	r3, #9
 8004494:	602b      	str	r3, [r5, #0]
 8004496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800449a:	81a2      	strh	r2, [r4, #12]
 800449c:	bd38      	pop	{r3, r4, r5, pc}
 800449e:	bf00      	nop

080044a0 <_close_r>:
 80044a0:	b538      	push	{r3, r4, r5, lr}
 80044a2:	f648 341c 	movw	r4, #35612	; 0x8b1c
 80044a6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80044aa:	2300      	movs	r3, #0
 80044ac:	4605      	mov	r5, r0
 80044ae:	4608      	mov	r0, r1
 80044b0:	6023      	str	r3, [r4, #0]
 80044b2:	f7fc f92f 	bl	8000714 <_close>
 80044b6:	1c43      	adds	r3, r0, #1
 80044b8:	d000      	beq.n	80044bc <_close_r+0x1c>
 80044ba:	bd38      	pop	{r3, r4, r5, pc}
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0fb      	beq.n	80044ba <_close_r+0x1a>
 80044c2:	602b      	str	r3, [r5, #0]
 80044c4:	bd38      	pop	{r3, r4, r5, pc}
 80044c6:	bf00      	nop

080044c8 <quorem>:
 80044c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044cc:	6903      	ldr	r3, [r0, #16]
 80044ce:	690d      	ldr	r5, [r1, #16]
 80044d0:	429d      	cmp	r5, r3
 80044d2:	4683      	mov	fp, r0
 80044d4:	b083      	sub	sp, #12
 80044d6:	bfc8      	it	gt
 80044d8:	2000      	movgt	r0, #0
 80044da:	f300 8088 	bgt.w	80045ee <quorem+0x126>
 80044de:	3d01      	subs	r5, #1
 80044e0:	f101 0414 	add.w	r4, r1, #20
 80044e4:	f10b 0a14 	add.w	sl, fp, #20
 80044e8:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 80044ec:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 80044f0:	3201      	adds	r2, #1
 80044f2:	fbb3 f8f2 	udiv	r8, r3, r2
 80044f6:	00aa      	lsls	r2, r5, #2
 80044f8:	4691      	mov	r9, r2
 80044fa:	9200      	str	r2, [sp, #0]
 80044fc:	4452      	add	r2, sl
 80044fe:	44a1      	add	r9, r4
 8004500:	9201      	str	r2, [sp, #4]
 8004502:	f1b8 0f00 	cmp.w	r8, #0
 8004506:	d03d      	beq.n	8004584 <quorem+0xbc>
 8004508:	f04f 0e00 	mov.w	lr, #0
 800450c:	4670      	mov	r0, lr
 800450e:	4622      	mov	r2, r4
 8004510:	4653      	mov	r3, sl
 8004512:	468c      	mov	ip, r1
 8004514:	f852 6b04 	ldr.w	r6, [r2], #4
 8004518:	6819      	ldr	r1, [r3, #0]
 800451a:	b2b7      	uxth	r7, r6
 800451c:	0c36      	lsrs	r6, r6, #16
 800451e:	fb07 ee08 	mla	lr, r7, r8, lr
 8004522:	fb06 f608 	mul.w	r6, r6, r8
 8004526:	eb06 461e 	add.w	r6, r6, lr, lsr #16
 800452a:	fa1f f78e 	uxth.w	r7, lr
 800452e:	1bc7      	subs	r7, r0, r7
 8004530:	b2b0      	uxth	r0, r6
 8004532:	fa17 f781 	uxtah	r7, r7, r1
 8004536:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
 800453a:	eb00 4027 	add.w	r0, r0, r7, asr #16
 800453e:	b2bf      	uxth	r7, r7
 8004540:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
 8004544:	4591      	cmp	r9, r2
 8004546:	f843 7b04 	str.w	r7, [r3], #4
 800454a:	ea4f 4020 	mov.w	r0, r0, asr #16
 800454e:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8004552:	d2df      	bcs.n	8004514 <quorem+0x4c>
 8004554:	9a00      	ldr	r2, [sp, #0]
 8004556:	f85a 3002 	ldr.w	r3, [sl, r2]
 800455a:	4661      	mov	r1, ip
 800455c:	b993      	cbnz	r3, 8004584 <quorem+0xbc>
 800455e:	9a01      	ldr	r2, [sp, #4]
 8004560:	1f13      	subs	r3, r2, #4
 8004562:	459a      	cmp	sl, r3
 8004564:	d20c      	bcs.n	8004580 <quorem+0xb8>
 8004566:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800456a:	b94b      	cbnz	r3, 8004580 <quorem+0xb8>
 800456c:	f1a2 0308 	sub.w	r3, r2, #8
 8004570:	e002      	b.n	8004578 <quorem+0xb0>
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	3b04      	subs	r3, #4
 8004576:	b91a      	cbnz	r2, 8004580 <quorem+0xb8>
 8004578:	459a      	cmp	sl, r3
 800457a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800457e:	d3f8      	bcc.n	8004572 <quorem+0xaa>
 8004580:	f8cb 5010 	str.w	r5, [fp, #16]
 8004584:	4658      	mov	r0, fp
 8004586:	f001 fd19 	bl	8005fbc <__mcmp>
 800458a:	2800      	cmp	r0, #0
 800458c:	db2e      	blt.n	80045ec <quorem+0x124>
 800458e:	f108 0801 	add.w	r8, r8, #1
 8004592:	4653      	mov	r3, sl
 8004594:	2200      	movs	r2, #0
 8004596:	f854 6b04 	ldr.w	r6, [r4], #4
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	b2b1      	uxth	r1, r6
 800459e:	1a52      	subs	r2, r2, r1
 80045a0:	0c36      	lsrs	r6, r6, #16
 80045a2:	fa12 f180 	uxtah	r1, r2, r0
 80045a6:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
 80045aa:	eb02 4221 	add.w	r2, r2, r1, asr #16
 80045ae:	b289      	uxth	r1, r1
 80045b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80045b4:	45a1      	cmp	r9, r4
 80045b6:	f843 1b04 	str.w	r1, [r3], #4
 80045ba:	ea4f 4222 	mov.w	r2, r2, asr #16
 80045be:	d2ea      	bcs.n	8004596 <quorem+0xce>
 80045c0:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
 80045c4:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
 80045c8:	b982      	cbnz	r2, 80045ec <quorem+0x124>
 80045ca:	1f1a      	subs	r2, r3, #4
 80045cc:	4592      	cmp	sl, r2
 80045ce:	d20b      	bcs.n	80045e8 <quorem+0x120>
 80045d0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80045d4:	b942      	cbnz	r2, 80045e8 <quorem+0x120>
 80045d6:	3b08      	subs	r3, #8
 80045d8:	e002      	b.n	80045e0 <quorem+0x118>
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	3b04      	subs	r3, #4
 80045de:	b91a      	cbnz	r2, 80045e8 <quorem+0x120>
 80045e0:	459a      	cmp	sl, r3
 80045e2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80045e6:	d3f8      	bcc.n	80045da <quorem+0x112>
 80045e8:	f8cb 5010 	str.w	r5, [fp, #16]
 80045ec:	4640      	mov	r0, r8
 80045ee:	b003      	add	sp, #12
 80045f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045f4:	0000      	movs	r0, r0
	...

080045f8 <_dtoa_r>:
 80045f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fc:	b09b      	sub	sp, #108	; 0x6c
 80045fe:	4604      	mov	r4, r0
 8004600:	9102      	str	r1, [sp, #8]
 8004602:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004604:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8004606:	9205      	str	r2, [sp, #20]
 8004608:	9306      	str	r3, [sp, #24]
 800460a:	ec5b ab10 	vmov	sl, fp, d0
 800460e:	b141      	cbz	r1, 8004622 <_dtoa_r+0x2a>
 8004610:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004612:	2201      	movs	r2, #1
 8004614:	409a      	lsls	r2, r3
 8004616:	604b      	str	r3, [r1, #4]
 8004618:	608a      	str	r2, [r1, #8]
 800461a:	f001 facb 	bl	8005bb4 <_Bfree>
 800461e:	2300      	movs	r3, #0
 8004620:	6423      	str	r3, [r4, #64]	; 0x40
 8004622:	f1bb 0f00 	cmp.w	fp, #0
 8004626:	bfb5      	itete	lt
 8004628:	2301      	movlt	r3, #1
 800462a:	2300      	movge	r3, #0
 800462c:	602b      	strlt	r3, [r5, #0]
 800462e:	602b      	strge	r3, [r5, #0]
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	bfb4      	ite	lt
 8004636:	f02b 4900 	biclt.w	r9, fp, #2147483648	; 0x80000000
 800463a:	46d9      	movge	r9, fp
 800463c:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	ea09 0303 	and.w	r3, r9, r3
 8004648:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800464c:	bfb8      	it	lt
 800464e:	46cb      	movlt	fp, r9
 8004650:	4293      	cmp	r3, r2
 8004652:	d016      	beq.n	8004682 <_dtoa_r+0x8a>
 8004654:	2200      	movs	r2, #0
 8004656:	2300      	movs	r3, #0
 8004658:	4650      	mov	r0, sl
 800465a:	4659      	mov	r1, fp
 800465c:	f002 ff7c 	bl	8007558 <__aeabi_dcmpeq>
 8004660:	4656      	mov	r6, sl
 8004662:	465f      	mov	r7, fp
 8004664:	4680      	mov	r8, r0
 8004666:	b328      	cbz	r0, 80046b4 <_dtoa_r+0xbc>
 8004668:	9e06      	ldr	r6, [sp, #24]
 800466a:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800466c:	2301      	movs	r3, #1
 800466e:	6033      	str	r3, [r6, #0]
 8004670:	2d00      	cmp	r5, #0
 8004672:	f000 80db 	beq.w	800482c <_dtoa_r+0x234>
 8004676:	48a8      	ldr	r0, [pc, #672]	; (8004918 <_dtoa_r+0x320>)
 8004678:	6028      	str	r0, [r5, #0]
 800467a:	3801      	subs	r0, #1
 800467c:	b01b      	add	sp, #108	; 0x6c
 800467e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004682:	9d06      	ldr	r5, [sp, #24]
 8004684:	f242 730f 	movw	r3, #9999	; 0x270f
 8004688:	f647 600c 	movw	r0, #32268	; 0x7e0c
 800468c:	602b      	str	r3, [r5, #0]
 800468e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004692:	f1ba 0f00 	cmp.w	sl, #0
 8004696:	f000 80a9 	beq.w	80047ec <_dtoa_r+0x1f4>
 800469a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800469c:	2e00      	cmp	r6, #0
 800469e:	d0ed      	beq.n	800467c <_dtoa_r+0x84>
 80046a0:	78c3      	ldrb	r3, [r0, #3]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f040 80b1 	bne.w	800480a <_dtoa_r+0x212>
 80046a8:	1cc3      	adds	r3, r0, #3
 80046aa:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80046ac:	602b      	str	r3, [r5, #0]
 80046ae:	b01b      	add	sp, #108	; 0x6c
 80046b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b4:	4620      	mov	r0, r4
 80046b6:	ec47 6b10 	vmov	d0, r6, r7
 80046ba:	a919      	add	r1, sp, #100	; 0x64
 80046bc:	aa18      	add	r2, sp, #96	; 0x60
 80046be:	f001 fd09 	bl	80060d4 <__d2b>
 80046c2:	ea5f 5519 	movs.w	r5, r9, lsr #20
 80046c6:	900b      	str	r0, [sp, #44]	; 0x2c
 80046c8:	f040 80a2 	bne.w	8004810 <_dtoa_r+0x218>
 80046cc:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80046ce:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80046d0:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80046d4:	443d      	add	r5, r7
 80046d6:	429d      	cmp	r5, r3
 80046d8:	f2c0 825c 	blt.w	8004b94 <_dtoa_r+0x59c>
 80046dc:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 80046e0:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 80046e4:	1b5b      	subs	r3, r3, r5
 80046e6:	f205 4212 	addw	r2, r5, #1042	; 0x412
 80046ea:	fa09 f303 	lsl.w	r3, r9, r3
 80046ee:	fa2a f202 	lsr.w	r2, sl, r2
 80046f2:	ea43 0002 	orr.w	r0, r3, r2
 80046f6:	f002 fc51 	bl	8006f9c <__aeabi_ui2d>
 80046fa:	2601      	movs	r6, #1
 80046fc:	3d01      	subs	r5, #1
 80046fe:	46b8      	mov	r8, r7
 8004700:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004704:	9615      	str	r6, [sp, #84]	; 0x54
 8004706:	2300      	movs	r3, #0
 8004708:	2200      	movs	r2, #0
 800470a:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800470e:	f002 fb07 	bl	8006d20 <__aeabi_dsub>
 8004712:	a37b      	add	r3, pc, #492	; (adr r3, 8004900 <_dtoa_r+0x308>)
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	f002 fcb6 	bl	8007088 <__aeabi_dmul>
 800471c:	a37a      	add	r3, pc, #488	; (adr r3, 8004908 <_dtoa_r+0x310>)
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	f002 faff 	bl	8006d24 <__adddf3>
 8004726:	4606      	mov	r6, r0
 8004728:	4628      	mov	r0, r5
 800472a:	460f      	mov	r7, r1
 800472c:	f002 fc46 	bl	8006fbc <__aeabi_i2d>
 8004730:	a377      	add	r3, pc, #476	; (adr r3, 8004910 <_dtoa_r+0x318>)
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	f002 fca7 	bl	8007088 <__aeabi_dmul>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4630      	mov	r0, r6
 8004740:	4639      	mov	r1, r7
 8004742:	f002 faef 	bl	8006d24 <__adddf3>
 8004746:	4606      	mov	r6, r0
 8004748:	460f      	mov	r7, r1
 800474a:	f002 ff37 	bl	80075bc <__aeabi_d2iz>
 800474e:	4639      	mov	r1, r7
 8004750:	9004      	str	r0, [sp, #16]
 8004752:	2200      	movs	r2, #0
 8004754:	4630      	mov	r0, r6
 8004756:	2300      	movs	r3, #0
 8004758:	f002 ff08 	bl	800756c <__aeabi_dcmplt>
 800475c:	2800      	cmp	r0, #0
 800475e:	f040 8202 	bne.w	8004b66 <_dtoa_r+0x56e>
 8004762:	9e04      	ldr	r6, [sp, #16]
 8004764:	2e16      	cmp	r6, #22
 8004766:	bf84      	itt	hi
 8004768:	2601      	movhi	r6, #1
 800476a:	9614      	strhi	r6, [sp, #80]	; 0x50
 800476c:	d812      	bhi.n	8004794 <_dtoa_r+0x19c>
 800476e:	f647 6320 	movw	r3, #32288	; 0x7e20
 8004772:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004776:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800477a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800477e:	4652      	mov	r2, sl
 8004780:	465b      	mov	r3, fp
 8004782:	f002 ff11 	bl	80075a8 <__aeabi_dcmpgt>
 8004786:	2800      	cmp	r0, #0
 8004788:	f000 820c 	beq.w	8004ba4 <_dtoa_r+0x5ac>
 800478c:	3e01      	subs	r6, #1
 800478e:	9604      	str	r6, [sp, #16]
 8004790:	2600      	movs	r6, #0
 8004792:	9614      	str	r6, [sp, #80]	; 0x50
 8004794:	ebc5 0508 	rsb	r5, r5, r8
 8004798:	3d01      	subs	r5, #1
 800479a:	bf48      	it	mi
 800479c:	2600      	movmi	r6, #0
 800479e:	9508      	str	r5, [sp, #32]
 80047a0:	bf48      	it	mi
 80047a2:	9608      	strmi	r6, [sp, #32]
 80047a4:	9e04      	ldr	r6, [sp, #16]
 80047a6:	bf4b      	itete	mi
 80047a8:	426d      	negmi	r5, r5
 80047aa:	2500      	movpl	r5, #0
 80047ac:	950a      	strmi	r5, [sp, #40]	; 0x28
 80047ae:	950a      	strpl	r5, [sp, #40]	; 0x28
 80047b0:	2e00      	cmp	r6, #0
 80047b2:	f2c0 81e6 	blt.w	8004b82 <_dtoa_r+0x58a>
 80047b6:	9d08      	ldr	r5, [sp, #32]
 80047b8:	960f      	str	r6, [sp, #60]	; 0x3c
 80047ba:	4435      	add	r5, r6
 80047bc:	2600      	movs	r6, #0
 80047be:	9508      	str	r5, [sp, #32]
 80047c0:	960c      	str	r6, [sp, #48]	; 0x30
 80047c2:	9d02      	ldr	r5, [sp, #8]
 80047c4:	2d09      	cmp	r5, #9
 80047c6:	d836      	bhi.n	8004836 <_dtoa_r+0x23e>
 80047c8:	2d05      	cmp	r5, #5
 80047ca:	bfc4      	itt	gt
 80047cc:	3d04      	subgt	r5, #4
 80047ce:	9502      	strgt	r5, [sp, #8]
 80047d0:	9e02      	ldr	r6, [sp, #8]
 80047d2:	f1a6 0302 	sub.w	r3, r6, #2
 80047d6:	bfcc      	ite	gt
 80047d8:	2500      	movgt	r5, #0
 80047da:	2501      	movle	r5, #1
 80047dc:	2b03      	cmp	r3, #3
 80047de:	d82c      	bhi.n	800483a <_dtoa_r+0x242>
 80047e0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80047e4:	02100342 	.word	0x02100342
 80047e8:	056c0350 	.word	0x056c0350
 80047ec:	f647 6200 	movw	r2, #32256	; 0x7e00
 80047f0:	f647 630c 	movw	r3, #32268	; 0x7e0c
 80047f4:	f3c9 0013 	ubfx	r0, r9, #0, #20
 80047f8:	f6c0 0200 	movt	r2, #2048	; 0x800
 80047fc:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004800:	2800      	cmp	r0, #0
 8004802:	bf0c      	ite	eq
 8004804:	4610      	moveq	r0, r2
 8004806:	4618      	movne	r0, r3
 8004808:	e747      	b.n	800469a <_dtoa_r+0xa2>
 800480a:	f100 0308 	add.w	r3, r0, #8
 800480e:	e74c      	b.n	80046aa <_dtoa_r+0xb2>
 8004810:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004814:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004818:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 800481c:	4650      	mov	r0, sl
 800481e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004822:	f443 1140 	orr.w	r1, r3, #3145728	; 0x300000
 8004826:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800482a:	e76c      	b.n	8004706 <_dtoa_r+0x10e>
 800482c:	f647 50ec 	movw	r0, #32236	; 0x7dec
 8004830:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004834:	e722      	b.n	800467c <_dtoa_r+0x84>
 8004836:	2600      	movs	r6, #0
 8004838:	9602      	str	r6, [sp, #8]
 800483a:	2500      	movs	r5, #0
 800483c:	6465      	str	r5, [r4, #68]	; 0x44
 800483e:	4629      	mov	r1, r5
 8004840:	4620      	mov	r0, r4
 8004842:	f001 f991 	bl	8005b68 <_Balloc>
 8004846:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800484a:	9505      	str	r5, [sp, #20]
 800484c:	2501      	movs	r5, #1
 800484e:	9007      	str	r0, [sp, #28]
 8004850:	960e      	str	r6, [sp, #56]	; 0x38
 8004852:	6420      	str	r0, [r4, #64]	; 0x40
 8004854:	9609      	str	r6, [sp, #36]	; 0x24
 8004856:	950d      	str	r5, [sp, #52]	; 0x34
 8004858:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800485a:	2b00      	cmp	r3, #0
 800485c:	f2c0 80bb 	blt.w	80049d6 <_dtoa_r+0x3de>
 8004860:	9e04      	ldr	r6, [sp, #16]
 8004862:	2e0e      	cmp	r6, #14
 8004864:	f300 80b7 	bgt.w	80049d6 <_dtoa_r+0x3de>
 8004868:	f647 6320 	movw	r3, #32288	; 0x7e20
 800486c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004870:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004874:	9d05      	ldr	r5, [sp, #20]
 8004876:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004878:	ed93 7b00 	vldr	d7, [r3]
 800487c:	0fea      	lsrs	r2, r5, #31
 800487e:	2e00      	cmp	r6, #0
 8004880:	bfcc      	ite	gt
 8004882:	2200      	movgt	r2, #0
 8004884:	f002 0201 	andle.w	r2, r2, #1
 8004888:	ed8d 7b02 	vstr	d7, [sp, #8]
 800488c:	2a00      	cmp	r2, #0
 800488e:	f040 844c 	bne.w	800512a <_dtoa_r+0xb32>
 8004892:	ec53 2b17 	vmov	r2, r3, d7
 8004896:	4650      	mov	r0, sl
 8004898:	4659      	mov	r1, fp
 800489a:	f002 fd1f 	bl	80072dc <__aeabi_ddiv>
 800489e:	f002 fe8d 	bl	80075bc <__aeabi_d2iz>
 80048a2:	4680      	mov	r8, r0
 80048a4:	f002 fb8a 	bl	8006fbc <__aeabi_i2d>
 80048a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048ac:	f002 fbec 	bl	8007088 <__aeabi_dmul>
 80048b0:	460b      	mov	r3, r1
 80048b2:	4602      	mov	r2, r0
 80048b4:	4659      	mov	r1, fp
 80048b6:	4650      	mov	r0, sl
 80048b8:	f002 fa32 	bl	8006d20 <__aeabi_dsub>
 80048bc:	9d07      	ldr	r5, [sp, #28]
 80048be:	f108 0330 	add.w	r3, r8, #48	; 0x30
 80048c2:	702b      	strb	r3, [r5, #0]
 80048c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	4606      	mov	r6, r0
 80048ca:	460f      	mov	r7, r1
 80048cc:	f105 0501 	add.w	r5, r5, #1
 80048d0:	d054      	beq.n	800497c <_dtoa_r+0x384>
 80048d2:	2300      	movs	r3, #0
 80048d4:	2200      	movs	r2, #0
 80048d6:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80048da:	f002 fbd5 	bl	8007088 <__aeabi_dmul>
 80048de:	2200      	movs	r2, #0
 80048e0:	2300      	movs	r3, #0
 80048e2:	4606      	mov	r6, r0
 80048e4:	460f      	mov	r7, r1
 80048e6:	f002 fe37 	bl	8007558 <__aeabi_dcmpeq>
 80048ea:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80048ee:	2800      	cmp	r0, #0
 80048f0:	f040 84fe 	bne.w	80052f0 <_dtoa_r+0xcf8>
 80048f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80048f6:	44a9      	add	r9, r5
 80048f8:	9d07      	ldr	r5, [sp, #28]
 80048fa:	f105 0a02 	add.w	sl, r5, #2
 80048fe:	e018      	b.n	8004932 <_dtoa_r+0x33a>
 8004900:	636f4361 	.word	0x636f4361
 8004904:	3fd287a7 	.word	0x3fd287a7
 8004908:	8b60c8b3 	.word	0x8b60c8b3
 800490c:	3fc68a28 	.word	0x3fc68a28
 8004910:	509f79fb 	.word	0x509f79fb
 8004914:	3fd34413 	.word	0x3fd34413
 8004918:	08007ded 	.word	0x08007ded
 800491c:	f002 fbb4 	bl	8007088 <__aeabi_dmul>
 8004920:	2200      	movs	r2, #0
 8004922:	2300      	movs	r3, #0
 8004924:	4606      	mov	r6, r0
 8004926:	460f      	mov	r7, r1
 8004928:	f002 fe16 	bl	8007558 <__aeabi_dcmpeq>
 800492c:	2800      	cmp	r0, #0
 800492e:	f040 84dd 	bne.w	80052ec <_dtoa_r+0xcf4>
 8004932:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004936:	4630      	mov	r0, r6
 8004938:	4639      	mov	r1, r7
 800493a:	f002 fccf 	bl	80072dc <__aeabi_ddiv>
 800493e:	f002 fe3d 	bl	80075bc <__aeabi_d2iz>
 8004942:	4680      	mov	r8, r0
 8004944:	f002 fb3a 	bl	8006fbc <__aeabi_i2d>
 8004948:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800494c:	f002 fb9c 	bl	8007088 <__aeabi_dmul>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4630      	mov	r0, r6
 8004956:	4639      	mov	r1, r7
 8004958:	f002 f9e2 	bl	8006d20 <__aeabi_dsub>
 800495c:	f108 0530 	add.w	r5, r8, #48	; 0x30
 8004960:	2300      	movs	r3, #0
 8004962:	45ca      	cmp	sl, r9
 8004964:	f80a 5c01 	strb.w	r5, [sl, #-1]
 8004968:	4606      	mov	r6, r0
 800496a:	4655      	mov	r5, sl
 800496c:	460f      	mov	r7, r1
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004976:	f10a 0a01 	add.w	sl, sl, #1
 800497a:	d1cf      	bne.n	800491c <_dtoa_r+0x324>
 800497c:	4632      	mov	r2, r6
 800497e:	463b      	mov	r3, r7
 8004980:	4630      	mov	r0, r6
 8004982:	4639      	mov	r1, r7
 8004984:	f002 f9ce 	bl	8006d24 <__adddf3>
 8004988:	4606      	mov	r6, r0
 800498a:	460f      	mov	r7, r1
 800498c:	4632      	mov	r2, r6
 800498e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004992:	463b      	mov	r3, r7
 8004994:	f002 fdea 	bl	800756c <__aeabi_dcmplt>
 8004998:	2800      	cmp	r0, #0
 800499a:	f000 8560 	beq.w	800545e <_dtoa_r+0xe66>
 800499e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80049a2:	9e04      	ldr	r6, [sp, #16]
 80049a4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 80049a8:	9616      	str	r6, [sp, #88]	; 0x58
 80049aa:	9507      	str	r5, [sp, #28]
 80049ac:	462a      	mov	r2, r5
 80049ae:	e005      	b.n	80049bc <_dtoa_r+0x3c4>
 80049b0:	4599      	cmp	r9, r3
 80049b2:	f000 84cf 	beq.w	8005354 <_dtoa_r+0xd5c>
 80049b6:	f813 8c01 	ldrb.w	r8, [r3, #-1]
 80049ba:	461a      	mov	r2, r3
 80049bc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80049c0:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 80049c4:	d0f4      	beq.n	80049b0 <_dtoa_r+0x3b8>
 80049c6:	9207      	str	r2, [sp, #28]
 80049c8:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80049ca:	f108 0201 	add.w	r2, r8, #1
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	9604      	str	r6, [sp, #16]
 80049d2:	701a      	strb	r2, [r3, #0]
 80049d4:	e0b1      	b.n	8004b3a <_dtoa_r+0x542>
 80049d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80049d8:	2d00      	cmp	r5, #0
 80049da:	f040 80e5 	bne.w	8004ba8 <_dtoa_r+0x5b0>
 80049de:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80049e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80049e2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80049e6:	9908      	ldr	r1, [sp, #32]
 80049e8:	2900      	cmp	r1, #0
 80049ea:	bfc8      	it	gt
 80049ec:	2d00      	cmpgt	r5, #0
 80049ee:	dd09      	ble.n	8004a04 <_dtoa_r+0x40c>
 80049f0:	460b      	mov	r3, r1
 80049f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049f4:	42ab      	cmp	r3, r5
 80049f6:	bfa8      	it	ge
 80049f8:	462b      	movge	r3, r5
 80049fa:	1ad2      	subs	r2, r2, r3
 80049fc:	1ac9      	subs	r1, r1, r3
 80049fe:	920a      	str	r2, [sp, #40]	; 0x28
 8004a00:	1aed      	subs	r5, r5, r3
 8004a02:	9108      	str	r1, [sp, #32]
 8004a04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	dd1a      	ble.n	8004a40 <_dtoa_r+0x448>
 8004a0a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a0c:	2900      	cmp	r1, #0
 8004a0e:	f000 8465 	beq.w	80052dc <_dtoa_r+0xce4>
 8004a12:	2e00      	cmp	r6, #0
 8004a14:	dd10      	ble.n	8004a38 <_dtoa_r+0x440>
 8004a16:	4641      	mov	r1, r8
 8004a18:	4632      	mov	r2, r6
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	f001 fa20 	bl	8005e60 <__pow5mult>
 8004a20:	4680      	mov	r8, r0
 8004a22:	4641      	mov	r1, r8
 8004a24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a26:	4620      	mov	r0, r4
 8004a28:	f001 f970 	bl	8005d0c <__multiply>
 8004a2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a2e:	4607      	mov	r7, r0
 8004a30:	4620      	mov	r0, r4
 8004a32:	f001 f8bf 	bl	8005bb4 <_Bfree>
 8004a36:	970b      	str	r7, [sp, #44]	; 0x2c
 8004a38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a3a:	1b9a      	subs	r2, r3, r6
 8004a3c:	f040 8495 	bne.w	800536a <_dtoa_r+0xd72>
 8004a40:	2101      	movs	r1, #1
 8004a42:	4620      	mov	r0, r4
 8004a44:	f001 f958 	bl	8005cf8 <__i2b>
 8004a48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004a4a:	2900      	cmp	r1, #0
 8004a4c:	4606      	mov	r6, r0
 8004a4e:	dd05      	ble.n	8004a5c <_dtoa_r+0x464>
 8004a50:	4601      	mov	r1, r0
 8004a52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a54:	4620      	mov	r0, r4
 8004a56:	f001 fa03 	bl	8005e60 <__pow5mult>
 8004a5a:	4606      	mov	r6, r0
 8004a5c:	9a02      	ldr	r2, [sp, #8]
 8004a5e:	2a01      	cmp	r2, #1
 8004a60:	f340 8379 	ble.w	8005156 <_dtoa_r+0xb5e>
 8004a64:	2700      	movs	r7, #0
 8004a66:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004a68:	2001      	movs	r0, #1
 8004a6a:	2900      	cmp	r1, #0
 8004a6c:	f040 8333 	bne.w	80050d6 <_dtoa_r+0xade>
 8004a70:	9b08      	ldr	r3, [sp, #32]
 8004a72:	4403      	add	r3, r0
 8004a74:	f013 031f 	ands.w	r3, r3, #31
 8004a78:	f000 8286 	beq.w	8004f88 <_dtoa_r+0x990>
 8004a7c:	f1c3 0220 	rsb	r2, r3, #32
 8004a80:	2a04      	cmp	r2, #4
 8004a82:	f340 855b 	ble.w	800553c <_dtoa_r+0xf44>
 8004a86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a88:	f8dd e020 	ldr.w	lr, [sp, #32]
 8004a8c:	f1c3 031c 	rsb	r3, r3, #28
 8004a90:	441a      	add	r2, r3
 8004a92:	449e      	add	lr, r3
 8004a94:	920a      	str	r2, [sp, #40]	; 0x28
 8004a96:	441d      	add	r5, r3
 8004a98:	f8cd e020 	str.w	lr, [sp, #32]
 8004a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	dd05      	ble.n	8004aae <_dtoa_r+0x4b6>
 8004aa2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f001 fa2a 	bl	8005f00 <__lshift>
 8004aac:	900b      	str	r0, [sp, #44]	; 0x2c
 8004aae:	9908      	ldr	r1, [sp, #32]
 8004ab0:	2900      	cmp	r1, #0
 8004ab2:	dd05      	ble.n	8004ac0 <_dtoa_r+0x4c8>
 8004ab4:	4631      	mov	r1, r6
 8004ab6:	9a08      	ldr	r2, [sp, #32]
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f001 fa21 	bl	8005f00 <__lshift>
 8004abe:	4606      	mov	r6, r0
 8004ac0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004ac2:	2a00      	cmp	r2, #0
 8004ac4:	f040 8310 	bne.w	80050e8 <_dtoa_r+0xaf0>
 8004ac8:	9a02      	ldr	r2, [sp, #8]
 8004aca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004acc:	2a02      	cmp	r2, #2
 8004ace:	bfd4      	ite	le
 8004ad0:	2300      	movle	r3, #0
 8004ad2:	2301      	movgt	r3, #1
 8004ad4:	2900      	cmp	r1, #0
 8004ad6:	bfc8      	it	gt
 8004ad8:	2300      	movgt	r3, #0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 820a 	beq.w	8004ef4 <_dtoa_r+0x8fc>
 8004ae0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004ae2:	2d00      	cmp	r5, #0
 8004ae4:	f040 81ff 	bne.w	8004ee6 <_dtoa_r+0x8ee>
 8004ae8:	4631      	mov	r1, r6
 8004aea:	462b      	mov	r3, r5
 8004aec:	2205      	movs	r2, #5
 8004aee:	4620      	mov	r0, r4
 8004af0:	f001 f86a 	bl	8005bc8 <__multadd>
 8004af4:	4606      	mov	r6, r0
 8004af6:	4631      	mov	r1, r6
 8004af8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004afa:	f001 fa5f 	bl	8005fbc <__mcmp>
 8004afe:	2800      	cmp	r0, #0
 8004b00:	f340 81f1 	ble.w	8004ee6 <_dtoa_r+0x8ee>
 8004b04:	9d04      	ldr	r5, [sp, #16]
 8004b06:	3501      	adds	r5, #1
 8004b08:	9504      	str	r5, [sp, #16]
 8004b0a:	9d07      	ldr	r5, [sp, #28]
 8004b0c:	46a9      	mov	r9, r5
 8004b0e:	2331      	movs	r3, #49	; 0x31
 8004b10:	f109 0101 	add.w	r1, r9, #1
 8004b14:	702b      	strb	r3, [r5, #0]
 8004b16:	9107      	str	r1, [sp, #28]
 8004b18:	2500      	movs	r5, #0
 8004b1a:	4631      	mov	r1, r6
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	f001 f849 	bl	8005bb4 <_Bfree>
 8004b22:	f1b8 0f00 	cmp.w	r8, #0
 8004b26:	d008      	beq.n	8004b3a <_dtoa_r+0x542>
 8004b28:	4545      	cmp	r5, r8
 8004b2a:	bf18      	it	ne
 8004b2c:	2d00      	cmpne	r5, #0
 8004b2e:	f040 8239 	bne.w	8004fa4 <_dtoa_r+0x9ac>
 8004b32:	4641      	mov	r1, r8
 8004b34:	4620      	mov	r0, r4
 8004b36:	f001 f83d 	bl	8005bb4 <_Bfree>
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b3e:	f001 f839 	bl	8005bb4 <_Bfree>
 8004b42:	9e04      	ldr	r6, [sp, #16]
 8004b44:	9d07      	ldr	r5, [sp, #28]
 8004b46:	2200      	movs	r2, #0
 8004b48:	1c73      	adds	r3, r6, #1
 8004b4a:	702a      	strb	r2, [r5, #0]
 8004b4c:	9e06      	ldr	r6, [sp, #24]
 8004b4e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8004b50:	6033      	str	r3, [r6, #0]
 8004b52:	4648      	mov	r0, r9
 8004b54:	2d00      	cmp	r5, #0
 8004b56:	f43f ad91 	beq.w	800467c <_dtoa_r+0x84>
 8004b5a:	9e07      	ldr	r6, [sp, #28]
 8004b5c:	4648      	mov	r0, r9
 8004b5e:	602e      	str	r6, [r5, #0]
 8004b60:	b01b      	add	sp, #108	; 0x6c
 8004b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b66:	9804      	ldr	r0, [sp, #16]
 8004b68:	f002 fa28 	bl	8006fbc <__aeabi_i2d>
 8004b6c:	4632      	mov	r2, r6
 8004b6e:	463b      	mov	r3, r7
 8004b70:	f002 fcf2 	bl	8007558 <__aeabi_dcmpeq>
 8004b74:	2800      	cmp	r0, #0
 8004b76:	f47f adf4 	bne.w	8004762 <_dtoa_r+0x16a>
 8004b7a:	9e04      	ldr	r6, [sp, #16]
 8004b7c:	3e01      	subs	r6, #1
 8004b7e:	9604      	str	r6, [sp, #16]
 8004b80:	e5ef      	b.n	8004762 <_dtoa_r+0x16a>
 8004b82:	9e04      	ldr	r6, [sp, #16]
 8004b84:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004b86:	1bad      	subs	r5, r5, r6
 8004b88:	950a      	str	r5, [sp, #40]	; 0x28
 8004b8a:	4275      	negs	r5, r6
 8004b8c:	2600      	movs	r6, #0
 8004b8e:	950c      	str	r5, [sp, #48]	; 0x30
 8004b90:	960f      	str	r6, [sp, #60]	; 0x3c
 8004b92:	e616      	b.n	80047c2 <_dtoa_r+0x1ca>
 8004b94:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 8004b98:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8004b9c:	1b40      	subs	r0, r0, r5
 8004b9e:	fa0a f000 	lsl.w	r0, sl, r0
 8004ba2:	e5a8      	b.n	80046f6 <_dtoa_r+0xfe>
 8004ba4:	9014      	str	r0, [sp, #80]	; 0x50
 8004ba6:	e5f5      	b.n	8004794 <_dtoa_r+0x19c>
 8004ba8:	9e02      	ldr	r6, [sp, #8]
 8004baa:	2e01      	cmp	r6, #1
 8004bac:	f340 840f 	ble.w	80053ce <_dtoa_r+0xdd6>
 8004bb0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004bb2:	1e6e      	subs	r6, r5, #1
 8004bb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bb6:	42b5      	cmp	r5, r6
 8004bb8:	bfbf      	itttt	lt
 8004bba:	9d0c      	ldrlt	r5, [sp, #48]	; 0x30
 8004bbc:	960c      	strlt	r6, [sp, #48]	; 0x30
 8004bbe:	ebc5 0306 	rsblt	r3, r5, r6
 8004bc2:	9d0f      	ldrlt	r5, [sp, #60]	; 0x3c
 8004bc4:	bfb6      	itet	lt
 8004bc6:	18ed      	addlt	r5, r5, r3
 8004bc8:	ebc6 0605 	rsbge	r6, r6, r5
 8004bcc:	950f      	strlt	r5, [sp, #60]	; 0x3c
 8004bce:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004bd0:	bfb8      	it	lt
 8004bd2:	2600      	movlt	r6, #0
 8004bd4:	2d00      	cmp	r5, #0
 8004bd6:	bfb3      	iteet	lt
 8004bd8:	f8dd e028 	ldrlt.w	lr, [sp, #40]	; 0x28
 8004bdc:	9d0a      	ldrge	r5, [sp, #40]	; 0x28
 8004bde:	9b09      	ldrge	r3, [sp, #36]	; 0x24
 8004be0:	ebc5 050e 	rsblt	r5, r5, lr
 8004be4:	bfb8      	it	lt
 8004be6:	2300      	movlt	r3, #0
 8004be8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bea:	f8dd e020 	ldr.w	lr, [sp, #32]
 8004bee:	441a      	add	r2, r3
 8004bf0:	449e      	add	lr, r3
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	920a      	str	r2, [sp, #40]	; 0x28
 8004bf8:	f8cd e020 	str.w	lr, [sp, #32]
 8004bfc:	f001 f87c 	bl	8005cf8 <__i2b>
 8004c00:	4680      	mov	r8, r0
 8004c02:	e6f0      	b.n	80049e6 <_dtoa_r+0x3ee>
 8004c04:	2600      	movs	r6, #0
 8004c06:	960d      	str	r6, [sp, #52]	; 0x34
 8004c08:	9e05      	ldr	r6, [sp, #20]
 8004c0a:	f8dd e010 	ldr.w	lr, [sp, #16]
 8004c0e:	4476      	add	r6, lr
 8004c10:	960e      	str	r6, [sp, #56]	; 0x38
 8004c12:	3601      	adds	r6, #1
 8004c14:	2e00      	cmp	r6, #0
 8004c16:	9609      	str	r6, [sp, #36]	; 0x24
 8004c18:	f340 8353 	ble.w	80052c2 <_dtoa_r+0xcca>
 8004c1c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004c1e:	2e0e      	cmp	r6, #14
 8004c20:	bf8c      	ite	hi
 8004c22:	2500      	movhi	r5, #0
 8004c24:	f005 0501 	andls.w	r5, r5, #1
 8004c28:	2100      	movs	r1, #0
 8004c2a:	2e17      	cmp	r6, #23
 8004c2c:	6461      	str	r1, [r4, #68]	; 0x44
 8004c2e:	d90a      	bls.n	8004c46 <_dtoa_r+0x64e>
 8004c30:	2201      	movs	r2, #1
 8004c32:	2304      	movs	r3, #4
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	f103 0014 	add.w	r0, r3, #20
 8004c3a:	42b0      	cmp	r0, r6
 8004c3c:	4611      	mov	r1, r2
 8004c3e:	f102 0201 	add.w	r2, r2, #1
 8004c42:	d9f7      	bls.n	8004c34 <_dtoa_r+0x63c>
 8004c44:	6461      	str	r1, [r4, #68]	; 0x44
 8004c46:	4620      	mov	r0, r4
 8004c48:	f000 ff8e 	bl	8005b68 <_Balloc>
 8004c4c:	9007      	str	r0, [sp, #28]
 8004c4e:	6420      	str	r0, [r4, #64]	; 0x40
 8004c50:	2d00      	cmp	r5, #0
 8004c52:	f43f ae01 	beq.w	8004858 <_dtoa_r+0x260>
 8004c56:	9d04      	ldr	r5, [sp, #16]
 8004c58:	2d00      	cmp	r5, #0
 8004c5a:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 8004c5e:	f340 81aa 	ble.w	8004fb6 <_dtoa_r+0x9be>
 8004c62:	f647 6320 	movw	r3, #32288	; 0x7e20
 8004c66:	f005 020f 	and.w	r2, r5, #15
 8004c6a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004c6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c72:	112d      	asrs	r5, r5, #4
 8004c74:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004c78:	06eb      	lsls	r3, r5, #27
 8004c7a:	f140 818e 	bpl.w	8004f9a <_dtoa_r+0x9a2>
 8004c7e:	f647 63e8 	movw	r3, #32488	; 0x7ee8
 8004c82:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004c86:	4650      	mov	r0, sl
 8004c88:	4659      	mov	r1, fp
 8004c8a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c8e:	f002 fb25 	bl	80072dc <__aeabi_ddiv>
 8004c92:	f005 050f 	and.w	r5, r5, #15
 8004c96:	4682      	mov	sl, r0
 8004c98:	468b      	mov	fp, r1
 8004c9a:	f04f 0803 	mov.w	r8, #3
 8004c9e:	b19d      	cbz	r5, 8004cc8 <_dtoa_r+0x6d0>
 8004ca0:	f647 69e8 	movw	r9, #32488	; 0x7ee8
 8004ca4:	f6c0 0900 	movt	r9, #2048	; 0x800
 8004ca8:	4630      	mov	r0, r6
 8004caa:	4639      	mov	r1, r7
 8004cac:	07ef      	lsls	r7, r5, #31
 8004cae:	d505      	bpl.n	8004cbc <_dtoa_r+0x6c4>
 8004cb0:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004cb4:	f002 f9e8 	bl	8007088 <__aeabi_dmul>
 8004cb8:	f108 0801 	add.w	r8, r8, #1
 8004cbc:	106d      	asrs	r5, r5, #1
 8004cbe:	f109 0908 	add.w	r9, r9, #8
 8004cc2:	d1f3      	bne.n	8004cac <_dtoa_r+0x6b4>
 8004cc4:	4606      	mov	r6, r0
 8004cc6:	460f      	mov	r7, r1
 8004cc8:	4632      	mov	r2, r6
 8004cca:	463b      	mov	r3, r7
 8004ccc:	4650      	mov	r0, sl
 8004cce:	4659      	mov	r1, fp
 8004cd0:	f002 fb04 	bl	80072dc <__aeabi_ddiv>
 8004cd4:	4606      	mov	r6, r0
 8004cd6:	460f      	mov	r7, r1
 8004cd8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8004cda:	b155      	cbz	r5, 8004cf2 <_dtoa_r+0x6fa>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	4630      	mov	r0, r6
 8004ce0:	4639      	mov	r1, r7
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8004ce8:	f002 fc40 	bl	800756c <__aeabi_dcmplt>
 8004cec:	2800      	cmp	r0, #0
 8004cee:	f040 8306 	bne.w	80052fe <_dtoa_r+0xd06>
 8004cf2:	4640      	mov	r0, r8
 8004cf4:	f002 f962 	bl	8006fbc <__aeabi_i2d>
 8004cf8:	4632      	mov	r2, r6
 8004cfa:	463b      	mov	r3, r7
 8004cfc:	f002 f9c4 	bl	8007088 <__aeabi_dmul>
 8004d00:	2300      	movs	r3, #0
 8004d02:	2200      	movs	r2, #0
 8004d04:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8004d08:	f002 f80c 	bl	8006d24 <__adddf3>
 8004d0c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004d0e:	4680      	mov	r8, r0
 8004d10:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8004d14:	2d00      	cmp	r5, #0
 8004d16:	f000 80ca 	beq.w	8004eae <_dtoa_r+0x8b6>
 8004d1a:	9d04      	ldr	r5, [sp, #16]
 8004d1c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8004d20:	9516      	str	r5, [sp, #88]	; 0x58
 8004d22:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004d24:	f647 6320 	movw	r3, #32288	; 0x7e20
 8004d28:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004d2c:	2d00      	cmp	r5, #0
 8004d2e:	f000 816f 	beq.w	8005010 <_dtoa_r+0xa18>
 8004d32:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8004d36:	2100      	movs	r1, #0
 8004d38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8004d42:	f8cd c004 	str.w	ip, [sp, #4]
 8004d46:	f002 fac9 	bl	80072dc <__aeabi_ddiv>
 8004d4a:	4642      	mov	r2, r8
 8004d4c:	464b      	mov	r3, r9
 8004d4e:	f001 ffe7 	bl	8006d20 <__aeabi_dsub>
 8004d52:	4682      	mov	sl, r0
 8004d54:	468b      	mov	fp, r1
 8004d56:	4630      	mov	r0, r6
 8004d58:	4639      	mov	r1, r7
 8004d5a:	f002 fc2f 	bl	80075bc <__aeabi_d2iz>
 8004d5e:	4605      	mov	r5, r0
 8004d60:	f002 f92c 	bl	8006fbc <__aeabi_i2d>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4630      	mov	r0, r6
 8004d6a:	4639      	mov	r1, r7
 8004d6c:	f001 ffd8 	bl	8006d20 <__aeabi_dsub>
 8004d70:	3530      	adds	r5, #48	; 0x30
 8004d72:	fa5f f885 	uxtb.w	r8, r5
 8004d76:	9d07      	ldr	r5, [sp, #28]
 8004d78:	4606      	mov	r6, r0
 8004d7a:	460f      	mov	r7, r1
 8004d7c:	f885 8000 	strb.w	r8, [r5]
 8004d80:	4650      	mov	r0, sl
 8004d82:	3501      	adds	r5, #1
 8004d84:	4659      	mov	r1, fp
 8004d86:	4632      	mov	r2, r6
 8004d88:	463b      	mov	r3, r7
 8004d8a:	9500      	str	r5, [sp, #0]
 8004d8c:	f002 fc0c 	bl	80075a8 <__aeabi_dcmpgt>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	d162      	bne.n	8004e5a <_dtoa_r+0x862>
 8004d94:	2100      	movs	r1, #0
 8004d96:	4632      	mov	r2, r6
 8004d98:	463b      	mov	r3, r7
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8004da0:	f001 ffbe 	bl	8006d20 <__aeabi_dsub>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4650      	mov	r0, sl
 8004daa:	4659      	mov	r1, fp
 8004dac:	f002 fbfc 	bl	80075a8 <__aeabi_dcmpgt>
 8004db0:	f8dd c004 	ldr.w	ip, [sp, #4]
 8004db4:	2800      	cmp	r0, #0
 8004db6:	f040 83b6 	bne.w	8005526 <_dtoa_r+0xf2e>
 8004dba:	f1bc 0f01 	cmp.w	ip, #1
 8004dbe:	f340 80f7 	ble.w	8004fb0 <_dtoa_r+0x9b8>
 8004dc2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8004dc6:	9417      	str	r4, [sp, #92]	; 0x5c
 8004dc8:	44e1      	add	r9, ip
 8004dca:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8004dce:	f8dd 9000 	ldr.w	r9, [sp]
 8004dd2:	e010      	b.n	8004df6 <_dtoa_r+0x7fe>
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8004ddc:	f001 ffa0 	bl	8006d20 <__aeabi_dsub>
 8004de0:	4652      	mov	r2, sl
 8004de2:	465b      	mov	r3, fp
 8004de4:	f002 fbc2 	bl	800756c <__aeabi_dcmplt>
 8004de8:	2800      	cmp	r0, #0
 8004dea:	f040 831c 	bne.w	8005426 <_dtoa_r+0xe2e>
 8004dee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004df0:	45a9      	cmp	r9, r5
 8004df2:	f000 80dc 	beq.w	8004fae <_dtoa_r+0x9b6>
 8004df6:	2300      	movs	r3, #0
 8004df8:	4650      	mov	r0, sl
 8004dfa:	4659      	mov	r1, fp
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004e02:	f002 f941 	bl	8007088 <__aeabi_dmul>
 8004e06:	2300      	movs	r3, #0
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004e0e:	4682      	mov	sl, r0
 8004e10:	468b      	mov	fp, r1
 8004e12:	4630      	mov	r0, r6
 8004e14:	4639      	mov	r1, r7
 8004e16:	f002 f937 	bl	8007088 <__aeabi_dmul>
 8004e1a:	460d      	mov	r5, r1
 8004e1c:	4604      	mov	r4, r0
 8004e1e:	f002 fbcd 	bl	80075bc <__aeabi_d2iz>
 8004e22:	4680      	mov	r8, r0
 8004e24:	f002 f8ca 	bl	8006fbc <__aeabi_i2d>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	4629      	mov	r1, r5
 8004e30:	f001 ff76 	bl	8006d20 <__aeabi_dsub>
 8004e34:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8004e38:	fa5f f888 	uxtb.w	r8, r8
 8004e3c:	4652      	mov	r2, sl
 8004e3e:	465b      	mov	r3, fp
 8004e40:	f809 8b01 	strb.w	r8, [r9], #1
 8004e44:	4606      	mov	r6, r0
 8004e46:	460f      	mov	r7, r1
 8004e48:	f002 fb90 	bl	800756c <__aeabi_dcmplt>
 8004e4c:	4632      	mov	r2, r6
 8004e4e:	463b      	mov	r3, r7
 8004e50:	2800      	cmp	r0, #0
 8004e52:	d0bf      	beq.n	8004dd4 <_dtoa_r+0x7dc>
 8004e54:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8004e56:	f8cd 9000 	str.w	r9, [sp]
 8004e5a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8004e5c:	9e00      	ldr	r6, [sp, #0]
 8004e5e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8004e62:	9504      	str	r5, [sp, #16]
 8004e64:	9607      	str	r6, [sp, #28]
 8004e66:	e668      	b.n	8004b3a <_dtoa_r+0x542>
 8004e68:	2600      	movs	r6, #0
 8004e6a:	960d      	str	r6, [sp, #52]	; 0x34
 8004e6c:	9e05      	ldr	r6, [sp, #20]
 8004e6e:	2e00      	cmp	r6, #0
 8004e70:	f340 822f 	ble.w	80052d2 <_dtoa_r+0xcda>
 8004e74:	2e0e      	cmp	r6, #14
 8004e76:	bf8c      	ite	hi
 8004e78:	2500      	movhi	r5, #0
 8004e7a:	f005 0501 	andls.w	r5, r5, #1
 8004e7e:	960e      	str	r6, [sp, #56]	; 0x38
 8004e80:	9609      	str	r6, [sp, #36]	; 0x24
 8004e82:	e6d1      	b.n	8004c28 <_dtoa_r+0x630>
 8004e84:	2601      	movs	r6, #1
 8004e86:	960d      	str	r6, [sp, #52]	; 0x34
 8004e88:	e7f0      	b.n	8004e6c <_dtoa_r+0x874>
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	f002 f896 	bl	8006fbc <__aeabi_i2d>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4630      	mov	r0, r6
 8004e96:	4639      	mov	r1, r7
 8004e98:	f002 f8f6 	bl	8007088 <__aeabi_dmul>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8004ea4:	f001 ff3e 	bl	8006d24 <__adddf3>
 8004ea8:	4680      	mov	r8, r0
 8004eaa:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8004eae:	2300      	movs	r3, #0
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8004eb8:	4639      	mov	r1, r7
 8004eba:	f001 ff31 	bl	8006d20 <__aeabi_dsub>
 8004ebe:	4642      	mov	r2, r8
 8004ec0:	464b      	mov	r3, r9
 8004ec2:	4682      	mov	sl, r0
 8004ec4:	468b      	mov	fp, r1
 8004ec6:	f002 fb6f 	bl	80075a8 <__aeabi_dcmpgt>
 8004eca:	4606      	mov	r6, r0
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	f040 80ff 	bne.w	80050d0 <_dtoa_r+0xad8>
 8004ed2:	4642      	mov	r2, r8
 8004ed4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004ed8:	4650      	mov	r0, sl
 8004eda:	4659      	mov	r1, fp
 8004edc:	f002 fb46 	bl	800756c <__aeabi_dcmplt>
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	d065      	beq.n	8004fb0 <_dtoa_r+0x9b8>
 8004ee4:	46b0      	mov	r8, r6
 8004ee6:	9d05      	ldr	r5, [sp, #20]
 8004ee8:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8004eec:	43ed      	mvns	r5, r5
 8004eee:	9504      	str	r5, [sp, #16]
 8004ef0:	2500      	movs	r5, #0
 8004ef2:	e612      	b.n	8004b1a <_dtoa_r+0x522>
 8004ef4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004ef6:	2a00      	cmp	r2, #0
 8004ef8:	f040 815f 	bne.w	80051ba <_dtoa_r+0xbc2>
 8004efc:	2500      	movs	r5, #0
 8004efe:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8004f02:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004f06:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8004f0a:	e006      	b.n	8004f1a <_dtoa_r+0x922>
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	4620      	mov	r0, r4
 8004f10:	220a      	movs	r2, #10
 8004f12:	2300      	movs	r3, #0
 8004f14:	f000 fe58 	bl	8005bc8 <__multadd>
 8004f18:	4681      	mov	r9, r0
 8004f1a:	4648      	mov	r0, r9
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	f7ff fad3 	bl	80044c8 <quorem>
 8004f22:	3030      	adds	r0, #48	; 0x30
 8004f24:	f80b 0005 	strb.w	r0, [fp, r5]
 8004f28:	3501      	adds	r5, #1
 8004f2a:	4555      	cmp	r5, sl
 8004f2c:	dbee      	blt.n	8004f0c <_dtoa_r+0x914>
 8004f2e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004f30:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8004f34:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8004f38:	2d01      	cmp	r5, #1
 8004f3a:	bfac      	ite	ge
 8004f3c:	44ab      	addge	fp, r5
 8004f3e:	f10b 0b01 	addlt.w	fp, fp, #1
 8004f42:	4607      	mov	r7, r0
 8004f44:	2500      	movs	r5, #0
 8004f46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f48:	2201      	movs	r2, #1
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f000 ffd8 	bl	8005f00 <__lshift>
 8004f50:	4631      	mov	r1, r6
 8004f52:	900b      	str	r0, [sp, #44]	; 0x2c
 8004f54:	f001 f832 	bl	8005fbc <__mcmp>
 8004f58:	2800      	cmp	r0, #0
 8004f5a:	f340 826e 	ble.w	800543a <_dtoa_r+0xe42>
 8004f5e:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 8004f62:	9907      	ldr	r1, [sp, #28]
 8004f64:	e005      	b.n	8004f72 <_dtoa_r+0x97a>
 8004f66:	4299      	cmp	r1, r3
 8004f68:	f000 8223 	beq.w	80053b2 <_dtoa_r+0xdba>
 8004f6c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8004f70:	469b      	mov	fp, r3
 8004f72:	2a39      	cmp	r2, #57	; 0x39
 8004f74:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8004f78:	d0f5      	beq.n	8004f66 <_dtoa_r+0x96e>
 8004f7a:	3201      	adds	r2, #1
 8004f7c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8004f80:	701a      	strb	r2, [r3, #0]
 8004f82:	f8cd b01c 	str.w	fp, [sp, #28]
 8004f86:	e5c8      	b.n	8004b1a <_dtoa_r+0x522>
 8004f88:	231c      	movs	r3, #28
 8004f8a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004f8c:	9a08      	ldr	r2, [sp, #32]
 8004f8e:	4419      	add	r1, r3
 8004f90:	441a      	add	r2, r3
 8004f92:	910a      	str	r1, [sp, #40]	; 0x28
 8004f94:	441d      	add	r5, r3
 8004f96:	9208      	str	r2, [sp, #32]
 8004f98:	e580      	b.n	8004a9c <_dtoa_r+0x4a4>
 8004f9a:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 8004f9e:	f04f 0802 	mov.w	r8, #2
 8004fa2:	e67c      	b.n	8004c9e <_dtoa_r+0x6a6>
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	f000 fe04 	bl	8005bb4 <_Bfree>
 8004fac:	e5c1      	b.n	8004b32 <_dtoa_r+0x53a>
 8004fae:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8004fb0:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 8004fb4:	e450      	b.n	8004858 <_dtoa_r+0x260>
 8004fb6:	9e04      	ldr	r6, [sp, #16]
 8004fb8:	4275      	negs	r5, r6
 8004fba:	2d00      	cmp	r5, #0
 8004fbc:	f000 819a 	beq.w	80052f4 <_dtoa_r+0xcfc>
 8004fc0:	f647 6320 	movw	r3, #32288	; 0x7e20
 8004fc4:	f005 020f 	and.w	r2, r5, #15
 8004fc8:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004fcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004fd8:	f002 f856 	bl	8007088 <__aeabi_dmul>
 8004fdc:	112d      	asrs	r5, r5, #4
 8004fde:	4606      	mov	r6, r0
 8004fe0:	460f      	mov	r7, r1
 8004fe2:	f000 829c 	beq.w	800551e <_dtoa_r+0xf26>
 8004fe6:	f647 69e8 	movw	r9, #32488	; 0x7ee8
 8004fea:	f6c0 0900 	movt	r9, #2048	; 0x800
 8004fee:	f04f 0802 	mov.w	r8, #2
 8004ff2:	07ee      	lsls	r6, r5, #31
 8004ff4:	d505      	bpl.n	8005002 <_dtoa_r+0xa0a>
 8004ff6:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004ffa:	f002 f845 	bl	8007088 <__aeabi_dmul>
 8004ffe:	f108 0801 	add.w	r8, r8, #1
 8005002:	106d      	asrs	r5, r5, #1
 8005004:	f109 0908 	add.w	r9, r9, #8
 8005008:	d1f3      	bne.n	8004ff2 <_dtoa_r+0x9fa>
 800500a:	4606      	mov	r6, r0
 800500c:	460f      	mov	r7, r1
 800500e:	e663      	b.n	8004cd8 <_dtoa_r+0x6e0>
 8005010:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
 8005014:	eb03 01cb 	add.w	r1, r3, fp, lsl #3
 8005018:	4642      	mov	r2, r8
 800501a:	464b      	mov	r3, r9
 800501c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005020:	f8cd c004 	str.w	ip, [sp, #4]
 8005024:	f002 f830 	bl	8007088 <__aeabi_dmul>
 8005028:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800502c:	4639      	mov	r1, r7
 800502e:	4630      	mov	r0, r6
 8005030:	f002 fac4 	bl	80075bc <__aeabi_d2iz>
 8005034:	4605      	mov	r5, r0
 8005036:	f001 ffc1 	bl	8006fbc <__aeabi_i2d>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4630      	mov	r0, r6
 8005040:	4639      	mov	r1, r7
 8005042:	f001 fe6d 	bl	8006d20 <__aeabi_dsub>
 8005046:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800504a:	3530      	adds	r5, #48	; 0x30
 800504c:	f88e 5000 	strb.w	r5, [lr]
 8005050:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005054:	f1bc 0f01 	cmp.w	ip, #1
 8005058:	4606      	mov	r6, r0
 800505a:	460f      	mov	r7, r1
 800505c:	f10e 0a01 	add.w	sl, lr, #1
 8005060:	d01f      	beq.n	80050a2 <_dtoa_r+0xaaa>
 8005062:	9d07      	ldr	r5, [sp, #28]
 8005064:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8005068:	44e1      	add	r9, ip
 800506a:	2300      	movs	r3, #0
 800506c:	2200      	movs	r2, #0
 800506e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005072:	f002 f809 	bl	8007088 <__aeabi_dmul>
 8005076:	460f      	mov	r7, r1
 8005078:	4606      	mov	r6, r0
 800507a:	f002 fa9f 	bl	80075bc <__aeabi_d2iz>
 800507e:	4680      	mov	r8, r0
 8005080:	f001 ff9c 	bl	8006fbc <__aeabi_i2d>
 8005084:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4630      	mov	r0, r6
 800508e:	4639      	mov	r1, r7
 8005090:	f001 fe46 	bl	8006d20 <__aeabi_dsub>
 8005094:	f805 8f01 	strb.w	r8, [r5, #1]!
 8005098:	454d      	cmp	r5, r9
 800509a:	d1e6      	bne.n	800506a <_dtoa_r+0xa72>
 800509c:	4606      	mov	r6, r0
 800509e:	460f      	mov	r7, r1
 80050a0:	44da      	add	sl, fp
 80050a2:	2300      	movs	r3, #0
 80050a4:	2200      	movs	r2, #0
 80050a6:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 80050aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050ae:	f001 fe39 	bl	8006d24 <__adddf3>
 80050b2:	4632      	mov	r2, r6
 80050b4:	463b      	mov	r3, r7
 80050b6:	f002 fa59 	bl	800756c <__aeabi_dcmplt>
 80050ba:	2800      	cmp	r0, #0
 80050bc:	f000 815c 	beq.w	8005378 <_dtoa_r+0xd80>
 80050c0:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80050c4:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
 80050c8:	f8cd a01c 	str.w	sl, [sp, #28]
 80050cc:	4652      	mov	r2, sl
 80050ce:	e475      	b.n	80049bc <_dtoa_r+0x3c4>
 80050d0:	2600      	movs	r6, #0
 80050d2:	46b0      	mov	r8, r6
 80050d4:	e516      	b.n	8004b04 <_dtoa_r+0x50c>
 80050d6:	6933      	ldr	r3, [r6, #16]
 80050d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80050dc:	6918      	ldr	r0, [r3, #16]
 80050de:	f000 fdbf 	bl	8005c60 <__hi0bits>
 80050e2:	f1c0 0020 	rsb	r0, r0, #32
 80050e6:	e4c3      	b.n	8004a70 <_dtoa_r+0x478>
 80050e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80050ea:	4631      	mov	r1, r6
 80050ec:	f000 ff66 	bl	8005fbc <__mcmp>
 80050f0:	2800      	cmp	r0, #0
 80050f2:	f6bf ace9 	bge.w	8004ac8 <_dtoa_r+0x4d0>
 80050f6:	f8dd e010 	ldr.w	lr, [sp, #16]
 80050fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050fc:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005100:	4620      	mov	r0, r4
 8005102:	220a      	movs	r2, #10
 8005104:	2300      	movs	r3, #0
 8005106:	f8cd e010 	str.w	lr, [sp, #16]
 800510a:	f000 fd5d 	bl	8005bc8 <__multadd>
 800510e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005110:	900b      	str	r0, [sp, #44]	; 0x2c
 8005112:	2900      	cmp	r1, #0
 8005114:	d13b      	bne.n	800518e <_dtoa_r+0xb96>
 8005116:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005118:	2d00      	cmp	r5, #0
 800511a:	dc03      	bgt.n	8005124 <_dtoa_r+0xb2c>
 800511c:	9d02      	ldr	r5, [sp, #8]
 800511e:	2d02      	cmp	r5, #2
 8005120:	f300 8208 	bgt.w	8005534 <_dtoa_r+0xf3c>
 8005124:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005126:	9509      	str	r5, [sp, #36]	; 0x24
 8005128:	e6e8      	b.n	8004efc <_dtoa_r+0x904>
 800512a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800512c:	2d00      	cmp	r5, #0
 800512e:	f040 8194 	bne.w	800545a <_dtoa_r+0xe62>
 8005132:	2300      	movs	r3, #0
 8005134:	2200      	movs	r2, #0
 8005136:	f2c4 0314 	movt	r3, #16404	; 0x4014
 800513a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800513e:	f001 ffa3 	bl	8007088 <__aeabi_dmul>
 8005142:	4652      	mov	r2, sl
 8005144:	465b      	mov	r3, fp
 8005146:	f002 fa25 	bl	8007594 <__aeabi_dcmpge>
 800514a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800514c:	46b0      	mov	r8, r6
 800514e:	2800      	cmp	r0, #0
 8005150:	f47f aec9 	bne.w	8004ee6 <_dtoa_r+0x8ee>
 8005154:	e4d6      	b.n	8004b04 <_dtoa_r+0x50c>
 8005156:	f1ba 0f00 	cmp.w	sl, #0
 800515a:	f47f ac83 	bne.w	8004a64 <_dtoa_r+0x46c>
 800515e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005162:	4657      	mov	r7, sl
 8005164:	2b00      	cmp	r3, #0
 8005166:	f47f ac7e 	bne.w	8004a66 <_dtoa_r+0x46e>
 800516a:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800516e:	0d3f      	lsrs	r7, r7, #20
 8005170:	053f      	lsls	r7, r7, #20
 8005172:	2f00      	cmp	r7, #0
 8005174:	f43f ac77 	beq.w	8004a66 <_dtoa_r+0x46e>
 8005178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800517a:	f8dd e020 	ldr.w	lr, [sp, #32]
 800517e:	3301      	adds	r3, #1
 8005180:	f10e 0e01 	add.w	lr, lr, #1
 8005184:	930a      	str	r3, [sp, #40]	; 0x28
 8005186:	f8cd e020 	str.w	lr, [sp, #32]
 800518a:	2701      	movs	r7, #1
 800518c:	e46b      	b.n	8004a66 <_dtoa_r+0x46e>
 800518e:	2300      	movs	r3, #0
 8005190:	4641      	mov	r1, r8
 8005192:	220a      	movs	r2, #10
 8005194:	4620      	mov	r0, r4
 8005196:	f000 fd17 	bl	8005bc8 <__multadd>
 800519a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800519c:	f8dd e008 	ldr.w	lr, [sp, #8]
 80051a0:	2a00      	cmp	r2, #0
 80051a2:	bfcc      	ite	gt
 80051a4:	2300      	movgt	r3, #0
 80051a6:	2301      	movle	r3, #1
 80051a8:	f1be 0f02 	cmp.w	lr, #2
 80051ac:	bfd8      	it	le
 80051ae:	2300      	movle	r3, #0
 80051b0:	4680      	mov	r8, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f040 81be 	bne.w	8005534 <_dtoa_r+0xf3c>
 80051b8:	9209      	str	r2, [sp, #36]	; 0x24
 80051ba:	2d00      	cmp	r5, #0
 80051bc:	dd05      	ble.n	80051ca <_dtoa_r+0xbd2>
 80051be:	4641      	mov	r1, r8
 80051c0:	462a      	mov	r2, r5
 80051c2:	4620      	mov	r0, r4
 80051c4:	f000 fe9c 	bl	8005f00 <__lshift>
 80051c8:	4680      	mov	r8, r0
 80051ca:	46c4      	mov	ip, r8
 80051cc:	2f00      	cmp	r7, #0
 80051ce:	f040 8157 	bne.w	8005480 <_dtoa_r+0xe88>
 80051d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80051d4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80051d8:	9907      	ldr	r1, [sp, #28]
 80051da:	44ae      	add	lr, r5
 80051dc:	f00a 0501 	and.w	r5, sl, #1
 80051e0:	9509      	str	r5, [sp, #36]	; 0x24
 80051e2:	4637      	mov	r7, r6
 80051e4:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 80051e8:	1c4d      	adds	r5, r1, #1
 80051ea:	46e1      	mov	r9, ip
 80051ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80051ee:	e00a      	b.n	8005206 <_dtoa_r+0xc0e>
 80051f0:	f000 fcea 	bl	8005bc8 <__multadd>
 80051f4:	4649      	mov	r1, r9
 80051f6:	4680      	mov	r8, r0
 80051f8:	220a      	movs	r2, #10
 80051fa:	4620      	mov	r0, r4
 80051fc:	2300      	movs	r3, #0
 80051fe:	f000 fce3 	bl	8005bc8 <__multadd>
 8005202:	4681      	mov	r9, r0
 8005204:	3501      	adds	r5, #1
 8005206:	4639      	mov	r1, r7
 8005208:	4630      	mov	r0, r6
 800520a:	f7ff f95d 	bl	80044c8 <quorem>
 800520e:	4641      	mov	r1, r8
 8005210:	4682      	mov	sl, r0
 8005212:	4630      	mov	r0, r6
 8005214:	f000 fed2 	bl	8005fbc <__mcmp>
 8005218:	464a      	mov	r2, r9
 800521a:	4683      	mov	fp, r0
 800521c:	4639      	mov	r1, r7
 800521e:	4620      	mov	r0, r4
 8005220:	f000 feee 	bl	8006000 <__mdiff>
 8005224:	f10a 0230 	add.w	r2, sl, #48	; 0x30
 8005228:	9205      	str	r2, [sp, #20]
 800522a:	68c2      	ldr	r2, [r0, #12]
 800522c:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
 8005230:	4603      	mov	r3, r0
 8005232:	f8cd e020 	str.w	lr, [sp, #32]
 8005236:	2a00      	cmp	r2, #0
 8005238:	d13e      	bne.n	80052b8 <_dtoa_r+0xcc0>
 800523a:	4619      	mov	r1, r3
 800523c:	4630      	mov	r0, r6
 800523e:	9301      	str	r3, [sp, #4]
 8005240:	f000 febc 	bl	8005fbc <__mcmp>
 8005244:	9b01      	ldr	r3, [sp, #4]
 8005246:	4602      	mov	r2, r0
 8005248:	4619      	mov	r1, r3
 800524a:	4620      	mov	r0, r4
 800524c:	9201      	str	r2, [sp, #4]
 800524e:	f000 fcb1 	bl	8005bb4 <_Bfree>
 8005252:	9a01      	ldr	r2, [sp, #4]
 8005254:	9902      	ldr	r1, [sp, #8]
 8005256:	4311      	orrs	r1, r2
 8005258:	d103      	bne.n	8005262 <_dtoa_r+0xc6a>
 800525a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 814d 	beq.w	80054fc <_dtoa_r+0xf04>
 8005262:	f1bb 0f00 	cmp.w	fp, #0
 8005266:	f2c0 80ba 	blt.w	80053de <_dtoa_r+0xde6>
 800526a:	9b02      	ldr	r3, [sp, #8]
 800526c:	ea5b 0303 	orrs.w	r3, fp, r3
 8005270:	d103      	bne.n	800527a <_dtoa_r+0xc82>
 8005272:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005274:	2900      	cmp	r1, #0
 8005276:	f000 80b2 	beq.w	80053de <_dtoa_r+0xde6>
 800527a:	2a00      	cmp	r2, #0
 800527c:	f300 811d 	bgt.w	80054ba <_dtoa_r+0xec2>
 8005280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005282:	9a05      	ldr	r2, [sp, #20]
 8005284:	429d      	cmp	r5, r3
 8005286:	f805 2c01 	strb.w	r2, [r5, #-1]
 800528a:	46ab      	mov	fp, r5
 800528c:	f000 8127 	beq.w	80054de <_dtoa_r+0xee6>
 8005290:	4631      	mov	r1, r6
 8005292:	220a      	movs	r2, #10
 8005294:	2300      	movs	r3, #0
 8005296:	4620      	mov	r0, r4
 8005298:	f000 fc96 	bl	8005bc8 <__multadd>
 800529c:	45c8      	cmp	r8, r9
 800529e:	4606      	mov	r6, r0
 80052a0:	4641      	mov	r1, r8
 80052a2:	4620      	mov	r0, r4
 80052a4:	f04f 020a 	mov.w	r2, #10
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	d1a0      	bne.n	80051f0 <_dtoa_r+0xbf8>
 80052ae:	f000 fc8b 	bl	8005bc8 <__multadd>
 80052b2:	4680      	mov	r8, r0
 80052b4:	4681      	mov	r9, r0
 80052b6:	e7a5      	b.n	8005204 <_dtoa_r+0xc0c>
 80052b8:	2201      	movs	r2, #1
 80052ba:	e7c5      	b.n	8005248 <_dtoa_r+0xc50>
 80052bc:	2601      	movs	r6, #1
 80052be:	960d      	str	r6, [sp, #52]	; 0x34
 80052c0:	e4a2      	b.n	8004c08 <_dtoa_r+0x610>
 80052c2:	2e0e      	cmp	r6, #14
 80052c4:	bf8c      	ite	hi
 80052c6:	2300      	movhi	r3, #0
 80052c8:	2301      	movls	r3, #1
 80052ca:	2100      	movs	r1, #0
 80052cc:	401d      	ands	r5, r3
 80052ce:	6461      	str	r1, [r4, #68]	; 0x44
 80052d0:	e4b9      	b.n	8004c46 <_dtoa_r+0x64e>
 80052d2:	2301      	movs	r3, #1
 80052d4:	930e      	str	r3, [sp, #56]	; 0x38
 80052d6:	9309      	str	r3, [sp, #36]	; 0x24
 80052d8:	9305      	str	r3, [sp, #20]
 80052da:	e7f6      	b.n	80052ca <_dtoa_r+0xcd2>
 80052dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052e0:	4620      	mov	r0, r4
 80052e2:	f000 fdbd 	bl	8005e60 <__pow5mult>
 80052e6:	900b      	str	r0, [sp, #44]	; 0x2c
 80052e8:	f7ff bbaa 	b.w	8004a40 <_dtoa_r+0x448>
 80052ec:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80052f0:	9507      	str	r5, [sp, #28]
 80052f2:	e422      	b.n	8004b3a <_dtoa_r+0x542>
 80052f4:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80052f8:	f04f 0802 	mov.w	r8, #2
 80052fc:	e4ec      	b.n	8004cd8 <_dtoa_r+0x6e0>
 80052fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005300:	2d00      	cmp	r5, #0
 8005302:	f43f adc2 	beq.w	8004e8a <_dtoa_r+0x892>
 8005306:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005308:	2d00      	cmp	r5, #0
 800530a:	f77f ae51 	ble.w	8004fb0 <_dtoa_r+0x9b8>
 800530e:	2300      	movs	r3, #0
 8005310:	2200      	movs	r2, #0
 8005312:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005316:	4630      	mov	r0, r6
 8005318:	4639      	mov	r1, r7
 800531a:	f001 feb5 	bl	8007088 <__aeabi_dmul>
 800531e:	4606      	mov	r6, r0
 8005320:	f108 0001 	add.w	r0, r8, #1
 8005324:	460f      	mov	r7, r1
 8005326:	f001 fe49 	bl	8006fbc <__aeabi_i2d>
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	4630      	mov	r0, r6
 8005330:	4639      	mov	r1, r7
 8005332:	f001 fea9 	bl	8007088 <__aeabi_dmul>
 8005336:	2300      	movs	r3, #0
 8005338:	2200      	movs	r2, #0
 800533a:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800533e:	f001 fcf1 	bl	8006d24 <__adddf3>
 8005342:	9d04      	ldr	r5, [sp, #16]
 8005344:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8005348:	3d01      	subs	r5, #1
 800534a:	4680      	mov	r8, r0
 800534c:	9516      	str	r5, [sp, #88]	; 0x58
 800534e:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8005352:	e4e6      	b.n	8004d22 <_dtoa_r+0x72a>
 8005354:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8005356:	9207      	str	r2, [sp, #28]
 8005358:	2230      	movs	r2, #48	; 0x30
 800535a:	f889 2000 	strb.w	r2, [r9]
 800535e:	3501      	adds	r5, #1
 8005360:	2231      	movs	r2, #49	; 0x31
 8005362:	9504      	str	r5, [sp, #16]
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	f7ff bbe8 	b.w	8004b3a <_dtoa_r+0x542>
 800536a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800536c:	4620      	mov	r0, r4
 800536e:	f000 fd77 	bl	8005e60 <__pow5mult>
 8005372:	900b      	str	r0, [sp, #44]	; 0x2c
 8005374:	f7ff bb64 	b.w	8004a40 <_dtoa_r+0x448>
 8005378:	2100      	movs	r1, #0
 800537a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800537e:	2000      	movs	r0, #0
 8005380:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8005384:	f001 fccc 	bl	8006d20 <__aeabi_dsub>
 8005388:	4632      	mov	r2, r6
 800538a:	463b      	mov	r3, r7
 800538c:	f002 f90c 	bl	80075a8 <__aeabi_dcmpgt>
 8005390:	2800      	cmp	r0, #0
 8005392:	f43f ae0d 	beq.w	8004fb0 <_dtoa_r+0x9b8>
 8005396:	4653      	mov	r3, sl
 8005398:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800539c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80053a0:	2a30      	cmp	r2, #48	; 0x30
 80053a2:	d0f8      	beq.n	8005396 <_dtoa_r+0xd9e>
 80053a4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80053a6:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80053aa:	9504      	str	r5, [sp, #16]
 80053ac:	9307      	str	r3, [sp, #28]
 80053ae:	f7ff bbc4 	b.w	8004b3a <_dtoa_r+0x542>
 80053b2:	f8dd e010 	ldr.w	lr, [sp, #16]
 80053b6:	9907      	ldr	r1, [sp, #28]
 80053b8:	f8cd b01c 	str.w	fp, [sp, #28]
 80053bc:	2331      	movs	r3, #49	; 0x31
 80053be:	f10e 0e01 	add.w	lr, lr, #1
 80053c2:	f8cd e010 	str.w	lr, [sp, #16]
 80053c6:	700b      	strb	r3, [r1, #0]
 80053c8:	4689      	mov	r9, r1
 80053ca:	f7ff bba6 	b.w	8004b1a <_dtoa_r+0x522>
 80053ce:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80053d0:	2d00      	cmp	r5, #0
 80053d2:	d06b      	beq.n	80054ac <_dtoa_r+0xeb4>
 80053d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80053da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80053dc:	e404      	b.n	8004be8 <_dtoa_r+0x5f0>
 80053de:	2a00      	cmp	r2, #0
 80053e0:	960b      	str	r6, [sp, #44]	; 0x2c
 80053e2:	46cc      	mov	ip, r9
 80053e4:	463e      	mov	r6, r7
 80053e6:	9f05      	ldr	r7, [sp, #20]
 80053e8:	dd13      	ble.n	8005412 <_dtoa_r+0xe1a>
 80053ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	4620      	mov	r0, r4
 80053f4:	f000 fd84 	bl	8005f00 <__lshift>
 80053f8:	4631      	mov	r1, r6
 80053fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80053fc:	f000 fdde 	bl	8005fbc <__mcmp>
 8005400:	2800      	cmp	r0, #0
 8005402:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005406:	f340 8084 	ble.w	8005512 <_dtoa_r+0xf1a>
 800540a:	2f39      	cmp	r7, #57	; 0x39
 800540c:	d06d      	beq.n	80054ea <_dtoa_r+0xef2>
 800540e:	f10a 0731 	add.w	r7, sl, #49	; 0x31
 8005412:	9b08      	ldr	r3, [sp, #32]
 8005414:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8005418:	701f      	strb	r7, [r3, #0]
 800541a:	1c59      	adds	r1, r3, #1
 800541c:	4645      	mov	r5, r8
 800541e:	9107      	str	r1, [sp, #28]
 8005420:	46e0      	mov	r8, ip
 8005422:	f7ff bb7a 	b.w	8004b1a <_dtoa_r+0x522>
 8005426:	f8cd 9000 	str.w	r9, [sp]
 800542a:	9d00      	ldr	r5, [sp, #0]
 800542c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8005430:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005432:	9507      	str	r5, [sp, #28]
 8005434:	462a      	mov	r2, r5
 8005436:	f7ff bac1 	b.w	80049bc <_dtoa_r+0x3c4>
 800543a:	d102      	bne.n	8005442 <_dtoa_r+0xe4a>
 800543c:	07fb      	lsls	r3, r7, #31
 800543e:	f53f ad8e 	bmi.w	8004f5e <_dtoa_r+0x966>
 8005442:	465b      	mov	r3, fp
 8005444:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005448:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800544c:	2a30      	cmp	r2, #48	; 0x30
 800544e:	d0f8      	beq.n	8005442 <_dtoa_r+0xe4a>
 8005450:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8005454:	9307      	str	r3, [sp, #28]
 8005456:	f7ff bb60 	b.w	8004b1a <_dtoa_r+0x522>
 800545a:	2600      	movs	r6, #0
 800545c:	e542      	b.n	8004ee4 <_dtoa_r+0x8ec>
 800545e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005462:	4632      	mov	r2, r6
 8005464:	463b      	mov	r3, r7
 8005466:	f002 f877 	bl	8007558 <__aeabi_dcmpeq>
 800546a:	2800      	cmp	r0, #0
 800546c:	f43f af3e 	beq.w	80052ec <_dtoa_r+0xcf4>
 8005470:	f018 0f01 	tst.w	r8, #1
 8005474:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8005478:	f43f af3a 	beq.w	80052f0 <_dtoa_r+0xcf8>
 800547c:	f7ff ba91 	b.w	80049a2 <_dtoa_r+0x3aa>
 8005480:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005484:	4620      	mov	r0, r4
 8005486:	f000 fb6f 	bl	8005b68 <_Balloc>
 800548a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800548e:	1c9a      	adds	r2, r3, #2
 8005490:	4605      	mov	r5, r0
 8005492:	0092      	lsls	r2, r2, #2
 8005494:	f108 010c 	add.w	r1, r8, #12
 8005498:	300c      	adds	r0, #12
 800549a:	f7fd f9c1 	bl	8002820 <memcpy>
 800549e:	4620      	mov	r0, r4
 80054a0:	4629      	mov	r1, r5
 80054a2:	2201      	movs	r2, #1
 80054a4:	f000 fd2c 	bl	8005f00 <__lshift>
 80054a8:	4684      	mov	ip, r0
 80054aa:	e692      	b.n	80051d2 <_dtoa_r+0xbda>
 80054ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80054ae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80054b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80054b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80054b6:	f7ff bb97 	b.w	8004be8 <_dtoa_r+0x5f0>
 80054ba:	960b      	str	r6, [sp, #44]	; 0x2c
 80054bc:	463e      	mov	r6, r7
 80054be:	9f05      	ldr	r7, [sp, #20]
 80054c0:	2f39      	cmp	r7, #57	; 0x39
 80054c2:	46cc      	mov	ip, r9
 80054c4:	d011      	beq.n	80054ea <_dtoa_r+0xef2>
 80054c6:	9908      	ldr	r1, [sp, #32]
 80054c8:	9d08      	ldr	r5, [sp, #32]
 80054ca:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80054ce:	3701      	adds	r7, #1
 80054d0:	3101      	adds	r1, #1
 80054d2:	702f      	strb	r7, [r5, #0]
 80054d4:	9107      	str	r1, [sp, #28]
 80054d6:	4645      	mov	r5, r8
 80054d8:	46e0      	mov	r8, ip
 80054da:	f7ff bb1e 	b.w	8004b1a <_dtoa_r+0x522>
 80054de:	960b      	str	r6, [sp, #44]	; 0x2c
 80054e0:	4645      	mov	r5, r8
 80054e2:	463e      	mov	r6, r7
 80054e4:	46c8      	mov	r8, r9
 80054e6:	9f05      	ldr	r7, [sp, #20]
 80054e8:	e52d      	b.n	8004f46 <_dtoa_r+0x94e>
 80054ea:	9b08      	ldr	r3, [sp, #32]
 80054ec:	9907      	ldr	r1, [sp, #28]
 80054ee:	2239      	movs	r2, #57	; 0x39
 80054f0:	4645      	mov	r5, r8
 80054f2:	701a      	strb	r2, [r3, #0]
 80054f4:	46e0      	mov	r8, ip
 80054f6:	f103 0b01 	add.w	fp, r3, #1
 80054fa:	e53a      	b.n	8004f72 <_dtoa_r+0x97a>
 80054fc:	960b      	str	r6, [sp, #44]	; 0x2c
 80054fe:	463e      	mov	r6, r7
 8005500:	9f05      	ldr	r7, [sp, #20]
 8005502:	2f39      	cmp	r7, #57	; 0x39
 8005504:	46cc      	mov	ip, r9
 8005506:	d0f0      	beq.n	80054ea <_dtoa_r+0xef2>
 8005508:	f1bb 0f00 	cmp.w	fp, #0
 800550c:	f73f af7f 	bgt.w	800540e <_dtoa_r+0xe16>
 8005510:	e77f      	b.n	8005412 <_dtoa_r+0xe1a>
 8005512:	f47f af7e 	bne.w	8005412 <_dtoa_r+0xe1a>
 8005516:	07fa      	lsls	r2, r7, #31
 8005518:	f57f af7b 	bpl.w	8005412 <_dtoa_r+0xe1a>
 800551c:	e775      	b.n	800540a <_dtoa_r+0xe12>
 800551e:	f04f 0802 	mov.w	r8, #2
 8005522:	f7ff bbd9 	b.w	8004cd8 <_dtoa_r+0x6e0>
 8005526:	9e00      	ldr	r6, [sp, #0]
 8005528:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800552c:	9607      	str	r6, [sp, #28]
 800552e:	4632      	mov	r2, r6
 8005530:	f7ff ba44 	b.w	80049bc <_dtoa_r+0x3c4>
 8005534:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005536:	9509      	str	r5, [sp, #36]	; 0x24
 8005538:	f7ff bad2 	b.w	8004ae0 <_dtoa_r+0x4e8>
 800553c:	f43f aaae 	beq.w	8004a9c <_dtoa_r+0x4a4>
 8005540:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8005544:	e521      	b.n	8004f8a <_dtoa_r+0x992>
 8005546:	bf00      	nop

08005548 <_fclose_r>:
 8005548:	b570      	push	{r4, r5, r6, lr}
 800554a:	460c      	mov	r4, r1
 800554c:	4605      	mov	r5, r0
 800554e:	b131      	cbz	r1, 800555e <_fclose_r+0x16>
 8005550:	b110      	cbz	r0, 8005558 <_fclose_r+0x10>
 8005552:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005554:	2b00      	cmp	r3, #0
 8005556:	d030      	beq.n	80055ba <_fclose_r+0x72>
 8005558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800555c:	b90b      	cbnz	r3, 8005562 <_fclose_r+0x1a>
 800555e:	2000      	movs	r0, #0
 8005560:	bd70      	pop	{r4, r5, r6, pc}
 8005562:	4628      	mov	r0, r5
 8005564:	4621      	mov	r1, r4
 8005566:	f000 f8e7 	bl	8005738 <_fflush_r>
 800556a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800556c:	4606      	mov	r6, r0
 800556e:	b13b      	cbz	r3, 8005580 <_fclose_r+0x38>
 8005570:	4628      	mov	r0, r5
 8005572:	69e1      	ldr	r1, [r4, #28]
 8005574:	4798      	blx	r3
 8005576:	ea36 0620 	bics.w	r6, r6, r0, asr #32
 800557a:	bf28      	it	cs
 800557c:	f04f 36ff 	movcs.w	r6, #4294967295	; 0xffffffff
 8005580:	89a3      	ldrh	r3, [r4, #12]
 8005582:	061b      	lsls	r3, r3, #24
 8005584:	d41c      	bmi.n	80055c0 <_fclose_r+0x78>
 8005586:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005588:	b141      	cbz	r1, 800559c <_fclose_r+0x54>
 800558a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800558e:	4299      	cmp	r1, r3
 8005590:	d002      	beq.n	8005598 <_fclose_r+0x50>
 8005592:	4628      	mov	r0, r5
 8005594:	f000 f938 	bl	8005808 <_free_r>
 8005598:	2300      	movs	r3, #0
 800559a:	6323      	str	r3, [r4, #48]	; 0x30
 800559c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800559e:	b121      	cbz	r1, 80055aa <_fclose_r+0x62>
 80055a0:	4628      	mov	r0, r5
 80055a2:	f000 f931 	bl	8005808 <_free_r>
 80055a6:	2300      	movs	r3, #0
 80055a8:	6463      	str	r3, [r4, #68]	; 0x44
 80055aa:	f7fc fe55 	bl	8002258 <__sfp_lock_acquire>
 80055ae:	2300      	movs	r3, #0
 80055b0:	81a3      	strh	r3, [r4, #12]
 80055b2:	f7fc fe53 	bl	800225c <__sfp_lock_release>
 80055b6:	4630      	mov	r0, r6
 80055b8:	bd70      	pop	{r4, r5, r6, pc}
 80055ba:	f7fc fdd1 	bl	8002160 <__sinit>
 80055be:	e7cb      	b.n	8005558 <_fclose_r+0x10>
 80055c0:	4628      	mov	r0, r5
 80055c2:	6921      	ldr	r1, [r4, #16]
 80055c4:	f000 f920 	bl	8005808 <_free_r>
 80055c8:	e7dd      	b.n	8005586 <_fclose_r+0x3e>
 80055ca:	bf00      	nop

080055cc <fclose>:
 80055cc:	f240 4350 	movw	r3, #1104	; 0x450
 80055d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80055d4:	4601      	mov	r1, r0
 80055d6:	6818      	ldr	r0, [r3, #0]
 80055d8:	f7ff bfb6 	b.w	8005548 <_fclose_r>

080055dc <__sflush_r>:
 80055dc:	898b      	ldrh	r3, [r1, #12]
 80055de:	b29a      	uxth	r2, r3
 80055e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e4:	460d      	mov	r5, r1
 80055e6:	0711      	lsls	r1, r2, #28
 80055e8:	4680      	mov	r8, r0
 80055ea:	d43c      	bmi.n	8005666 <__sflush_r+0x8a>
 80055ec:	686a      	ldr	r2, [r5, #4]
 80055ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055f2:	2a00      	cmp	r2, #0
 80055f4:	81ab      	strh	r3, [r5, #12]
 80055f6:	dd5a      	ble.n	80056ae <__sflush_r+0xd2>
 80055f8:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80055fa:	2c00      	cmp	r4, #0
 80055fc:	d04c      	beq.n	8005698 <__sflush_r+0xbc>
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f403 5680 	and.w	r6, r3, #4096	; 0x1000
 8005604:	2200      	movs	r2, #0
 8005606:	b2b6      	uxth	r6, r6
 8005608:	f8d8 7000 	ldr.w	r7, [r8]
 800560c:	f8c8 2000 	str.w	r2, [r8]
 8005610:	2e00      	cmp	r6, #0
 8005612:	d050      	beq.n	80056b6 <__sflush_r+0xda>
 8005614:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8005616:	075e      	lsls	r6, r3, #29
 8005618:	d505      	bpl.n	8005626 <__sflush_r+0x4a>
 800561a:	6869      	ldr	r1, [r5, #4]
 800561c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800561e:	1a52      	subs	r2, r2, r1
 8005620:	b10b      	cbz	r3, 8005626 <__sflush_r+0x4a>
 8005622:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005624:	1ad2      	subs	r2, r2, r3
 8005626:	4640      	mov	r0, r8
 8005628:	69e9      	ldr	r1, [r5, #28]
 800562a:	2300      	movs	r3, #0
 800562c:	47a0      	blx	r4
 800562e:	1c44      	adds	r4, r0, #1
 8005630:	d04c      	beq.n	80056cc <__sflush_r+0xf0>
 8005632:	89ab      	ldrh	r3, [r5, #12]
 8005634:	692a      	ldr	r2, [r5, #16]
 8005636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800563a:	b29b      	uxth	r3, r3
 800563c:	2100      	movs	r1, #0
 800563e:	602a      	str	r2, [r5, #0]
 8005640:	04da      	lsls	r2, r3, #19
 8005642:	81ab      	strh	r3, [r5, #12]
 8005644:	6069      	str	r1, [r5, #4]
 8005646:	d44e      	bmi.n	80056e6 <__sflush_r+0x10a>
 8005648:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800564a:	f8c8 7000 	str.w	r7, [r8]
 800564e:	b319      	cbz	r1, 8005698 <__sflush_r+0xbc>
 8005650:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8005654:	4299      	cmp	r1, r3
 8005656:	d002      	beq.n	800565e <__sflush_r+0x82>
 8005658:	4640      	mov	r0, r8
 800565a:	f000 f8d5 	bl	8005808 <_free_r>
 800565e:	2000      	movs	r0, #0
 8005660:	6328      	str	r0, [r5, #48]	; 0x30
 8005662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005666:	692e      	ldr	r6, [r5, #16]
 8005668:	b1b6      	cbz	r6, 8005698 <__sflush_r+0xbc>
 800566a:	0791      	lsls	r1, r2, #30
 800566c:	682c      	ldr	r4, [r5, #0]
 800566e:	bf08      	it	eq
 8005670:	696b      	ldreq	r3, [r5, #20]
 8005672:	602e      	str	r6, [r5, #0]
 8005674:	bf18      	it	ne
 8005676:	2300      	movne	r3, #0
 8005678:	1ba4      	subs	r4, r4, r6
 800567a:	60ab      	str	r3, [r5, #8]
 800567c:	e00a      	b.n	8005694 <__sflush_r+0xb8>
 800567e:	4632      	mov	r2, r6
 8005680:	4623      	mov	r3, r4
 8005682:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8005684:	69e9      	ldr	r1, [r5, #28]
 8005686:	4640      	mov	r0, r8
 8005688:	47b8      	blx	r7
 800568a:	2800      	cmp	r0, #0
 800568c:	ebc0 0404 	rsb	r4, r0, r4
 8005690:	4406      	add	r6, r0
 8005692:	dd04      	ble.n	800569e <__sflush_r+0xc2>
 8005694:	2c00      	cmp	r4, #0
 8005696:	dcf2      	bgt.n	800567e <__sflush_r+0xa2>
 8005698:	2000      	movs	r0, #0
 800569a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800569e:	89ab      	ldrh	r3, [r5, #12]
 80056a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056a4:	81ab      	strh	r3, [r5, #12]
 80056a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056ae:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80056b0:	2a00      	cmp	r2, #0
 80056b2:	dca1      	bgt.n	80055f8 <__sflush_r+0x1c>
 80056b4:	e7f0      	b.n	8005698 <__sflush_r+0xbc>
 80056b6:	4632      	mov	r2, r6
 80056b8:	2301      	movs	r3, #1
 80056ba:	4640      	mov	r0, r8
 80056bc:	69e9      	ldr	r1, [r5, #28]
 80056be:	47a0      	blx	r4
 80056c0:	1c43      	adds	r3, r0, #1
 80056c2:	4602      	mov	r2, r0
 80056c4:	d01e      	beq.n	8005704 <__sflush_r+0x128>
 80056c6:	89ab      	ldrh	r3, [r5, #12]
 80056c8:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80056ca:	e7a4      	b.n	8005616 <__sflush_r+0x3a>
 80056cc:	f8d8 3000 	ldr.w	r3, [r8]
 80056d0:	b95b      	cbnz	r3, 80056ea <__sflush_r+0x10e>
 80056d2:	89a9      	ldrh	r1, [r5, #12]
 80056d4:	606b      	str	r3, [r5, #4]
 80056d6:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
 80056da:	b29b      	uxth	r3, r3
 80056dc:	692a      	ldr	r2, [r5, #16]
 80056de:	81ab      	strh	r3, [r5, #12]
 80056e0:	04db      	lsls	r3, r3, #19
 80056e2:	602a      	str	r2, [r5, #0]
 80056e4:	d5b0      	bpl.n	8005648 <__sflush_r+0x6c>
 80056e6:	6528      	str	r0, [r5, #80]	; 0x50
 80056e8:	e7ae      	b.n	8005648 <__sflush_r+0x6c>
 80056ea:	2b1d      	cmp	r3, #29
 80056ec:	d001      	beq.n	80056f2 <__sflush_r+0x116>
 80056ee:	2b16      	cmp	r3, #22
 80056f0:	d11b      	bne.n	800572a <__sflush_r+0x14e>
 80056f2:	89a9      	ldrh	r1, [r5, #12]
 80056f4:	692b      	ldr	r3, [r5, #16]
 80056f6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80056fa:	2200      	movs	r2, #0
 80056fc:	81a9      	strh	r1, [r5, #12]
 80056fe:	602b      	str	r3, [r5, #0]
 8005700:	606a      	str	r2, [r5, #4]
 8005702:	e7a1      	b.n	8005648 <__sflush_r+0x6c>
 8005704:	f8d8 3000 	ldr.w	r3, [r8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0dc      	beq.n	80056c6 <__sflush_r+0xea>
 800570c:	2b1d      	cmp	r3, #29
 800570e:	bf18      	it	ne
 8005710:	2b16      	cmpne	r3, #22
 8005712:	bf15      	itete	ne
 8005714:	89ab      	ldrhne	r3, [r5, #12]
 8005716:	f8c8 7000 	streq.w	r7, [r8]
 800571a:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800571e:	4630      	moveq	r0, r6
 8005720:	bf1c      	itt	ne
 8005722:	81ab      	strhne	r3, [r5, #12]
 8005724:	4610      	movne	r0, r2
 8005726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800572a:	89ab      	ldrh	r3, [r5, #12]
 800572c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005730:	81ab      	strh	r3, [r5, #12]
 8005732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005736:	bf00      	nop

08005738 <_fflush_r>:
 8005738:	b510      	push	{r4, lr}
 800573a:	4604      	mov	r4, r0
 800573c:	b082      	sub	sp, #8
 800573e:	b108      	cbz	r0, 8005744 <_fflush_r+0xc>
 8005740:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005742:	b153      	cbz	r3, 800575a <_fflush_r+0x22>
 8005744:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8005748:	b908      	cbnz	r0, 800574e <_fflush_r+0x16>
 800574a:	b002      	add	sp, #8
 800574c:	bd10      	pop	{r4, pc}
 800574e:	4620      	mov	r0, r4
 8005750:	b002      	add	sp, #8
 8005752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005756:	f7ff bf41 	b.w	80055dc <__sflush_r>
 800575a:	9101      	str	r1, [sp, #4]
 800575c:	f7fc fd00 	bl	8002160 <__sinit>
 8005760:	9901      	ldr	r1, [sp, #4]
 8005762:	e7ef      	b.n	8005744 <_fflush_r+0xc>

08005764 <_malloc_trim_r>:
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	f240 4454 	movw	r4, #1108	; 0x454
 800576a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800576e:	460f      	mov	r7, r1
 8005770:	4605      	mov	r5, r0
 8005772:	f7fd f939 	bl	80029e8 <__malloc_lock>
 8005776:	68a3      	ldr	r3, [r4, #8]
 8005778:	685e      	ldr	r6, [r3, #4]
 800577a:	f026 0603 	bic.w	r6, r6, #3
 800577e:	1bf7      	subs	r7, r6, r7
 8005780:	f607 77ef 	addw	r7, r7, #4079	; 0xfef
 8005784:	0b3f      	lsrs	r7, r7, #12
 8005786:	3f01      	subs	r7, #1
 8005788:	033f      	lsls	r7, r7, #12
 800578a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800578e:	db07      	blt.n	80057a0 <_malloc_trim_r+0x3c>
 8005790:	4628      	mov	r0, r5
 8005792:	2100      	movs	r1, #0
 8005794:	f7fd f940 	bl	8002a18 <_sbrk_r>
 8005798:	68a3      	ldr	r3, [r4, #8]
 800579a:	4433      	add	r3, r6
 800579c:	4298      	cmp	r0, r3
 800579e:	d004      	beq.n	80057aa <_malloc_trim_r+0x46>
 80057a0:	4628      	mov	r0, r5
 80057a2:	f7fd f923 	bl	80029ec <__malloc_unlock>
 80057a6:	2000      	movs	r0, #0
 80057a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057aa:	4628      	mov	r0, r5
 80057ac:	4279      	negs	r1, r7
 80057ae:	f7fd f933 	bl	8002a18 <_sbrk_r>
 80057b2:	3001      	adds	r0, #1
 80057b4:	d010      	beq.n	80057d8 <_malloc_trim_r+0x74>
 80057b6:	f648 23f4 	movw	r3, #35572	; 0x8af4
 80057ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80057be:	68a1      	ldr	r1, [r4, #8]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	1bf6      	subs	r6, r6, r7
 80057c4:	f046 0601 	orr.w	r6, r6, #1
 80057c8:	4628      	mov	r0, r5
 80057ca:	1bd7      	subs	r7, r2, r7
 80057cc:	604e      	str	r6, [r1, #4]
 80057ce:	601f      	str	r7, [r3, #0]
 80057d0:	f7fd f90c 	bl	80029ec <__malloc_unlock>
 80057d4:	2001      	movs	r0, #1
 80057d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057d8:	4628      	mov	r0, r5
 80057da:	2100      	movs	r1, #0
 80057dc:	f7fd f91c 	bl	8002a18 <_sbrk_r>
 80057e0:	68a3      	ldr	r3, [r4, #8]
 80057e2:	1ac2      	subs	r2, r0, r3
 80057e4:	2a0f      	cmp	r2, #15
 80057e6:	dddb      	ble.n	80057a0 <_malloc_trim_r+0x3c>
 80057e8:	f640 0460 	movw	r4, #2144	; 0x860
 80057ec:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80057f0:	f648 21f4 	movw	r1, #35572	; 0x8af4
 80057f4:	6824      	ldr	r4, [r4, #0]
 80057f6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80057fa:	f042 0201 	orr.w	r2, r2, #1
 80057fe:	1b00      	subs	r0, r0, r4
 8005800:	605a      	str	r2, [r3, #4]
 8005802:	6008      	str	r0, [r1, #0]
 8005804:	e7cc      	b.n	80057a0 <_malloc_trim_r+0x3c>
 8005806:	bf00      	nop

08005808 <_free_r>:
 8005808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800580c:	460e      	mov	r6, r1
 800580e:	4681      	mov	r9, r0
 8005810:	2900      	cmp	r1, #0
 8005812:	d060      	beq.n	80058d6 <_free_r+0xce>
 8005814:	f7fd f8e8 	bl	80029e8 <__malloc_lock>
 8005818:	f856 1c04 	ldr.w	r1, [r6, #-4]
 800581c:	f1a6 0408 	sub.w	r4, r6, #8
 8005820:	f021 0301 	bic.w	r3, r1, #1
 8005824:	18e2      	adds	r2, r4, r3
 8005826:	f240 4554 	movw	r5, #1108	; 0x454
 800582a:	6857      	ldr	r7, [r2, #4]
 800582c:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8005830:	f027 0003 	bic.w	r0, r7, #3
 8005834:	68af      	ldr	r7, [r5, #8]
 8005836:	4297      	cmp	r7, r2
 8005838:	d063      	beq.n	8005902 <_free_r+0xfa>
 800583a:	f011 0c01 	ands.w	ip, r1, #1
 800583e:	6050      	str	r0, [r2, #4]
 8005840:	bf18      	it	ne
 8005842:	2100      	movne	r1, #0
 8005844:	d111      	bne.n	800586a <_free_r+0x62>
 8005846:	f856 1c08 	ldr.w	r1, [r6, #-8]
 800584a:	1a64      	subs	r4, r4, r1
 800584c:	f105 0808 	add.w	r8, r5, #8
 8005850:	68a6      	ldr	r6, [r4, #8]
 8005852:	4546      	cmp	r6, r8
 8005854:	bf18      	it	ne
 8005856:	f8d4 800c 	ldrne.w	r8, [r4, #12]
 800585a:	440b      	add	r3, r1
 800585c:	bf1d      	ittte	ne
 800585e:	f8c6 800c 	strne.w	r8, [r6, #12]
 8005862:	4661      	movne	r1, ip
 8005864:	f8c8 6008 	strne.w	r6, [r8, #8]
 8005868:	2101      	moveq	r1, #1
 800586a:	1816      	adds	r6, r2, r0
 800586c:	6876      	ldr	r6, [r6, #4]
 800586e:	07f6      	lsls	r6, r6, #31
 8005870:	d408      	bmi.n	8005884 <_free_r+0x7c>
 8005872:	4403      	add	r3, r0
 8005874:	6890      	ldr	r0, [r2, #8]
 8005876:	b911      	cbnz	r1, 800587e <_free_r+0x76>
 8005878:	4e49      	ldr	r6, [pc, #292]	; (80059a0 <_free_r+0x198>)
 800587a:	42b0      	cmp	r0, r6
 800587c:	d060      	beq.n	8005940 <_free_r+0x138>
 800587e:	68d2      	ldr	r2, [r2, #12]
 8005880:	60c2      	str	r2, [r0, #12]
 8005882:	6090      	str	r0, [r2, #8]
 8005884:	f043 0201 	orr.w	r2, r3, #1
 8005888:	6062      	str	r2, [r4, #4]
 800588a:	50e3      	str	r3, [r4, r3]
 800588c:	b9f1      	cbnz	r1, 80058cc <_free_r+0xc4>
 800588e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005892:	d322      	bcc.n	80058da <_free_r+0xd2>
 8005894:	0a5a      	lsrs	r2, r3, #9
 8005896:	2a04      	cmp	r2, #4
 8005898:	d85b      	bhi.n	8005952 <_free_r+0x14a>
 800589a:	0998      	lsrs	r0, r3, #6
 800589c:	3038      	adds	r0, #56	; 0x38
 800589e:	0041      	lsls	r1, r0, #1
 80058a0:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 80058a4:	f240 4154 	movw	r1, #1108	; 0x454
 80058a8:	68aa      	ldr	r2, [r5, #8]
 80058aa:	42aa      	cmp	r2, r5
 80058ac:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80058b0:	d05b      	beq.n	800596a <_free_r+0x162>
 80058b2:	6851      	ldr	r1, [r2, #4]
 80058b4:	f021 0103 	bic.w	r1, r1, #3
 80058b8:	428b      	cmp	r3, r1
 80058ba:	d202      	bcs.n	80058c2 <_free_r+0xba>
 80058bc:	6892      	ldr	r2, [r2, #8]
 80058be:	4295      	cmp	r5, r2
 80058c0:	d1f7      	bne.n	80058b2 <_free_r+0xaa>
 80058c2:	68d3      	ldr	r3, [r2, #12]
 80058c4:	60e3      	str	r3, [r4, #12]
 80058c6:	60a2      	str	r2, [r4, #8]
 80058c8:	609c      	str	r4, [r3, #8]
 80058ca:	60d4      	str	r4, [r2, #12]
 80058cc:	4648      	mov	r0, r9
 80058ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058d2:	f7fd b88b 	b.w	80029ec <__malloc_unlock>
 80058d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058da:	08db      	lsrs	r3, r3, #3
 80058dc:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80058e0:	6868      	ldr	r0, [r5, #4]
 80058e2:	6891      	ldr	r1, [r2, #8]
 80058e4:	60e2      	str	r2, [r4, #12]
 80058e6:	2601      	movs	r6, #1
 80058e8:	109b      	asrs	r3, r3, #2
 80058ea:	fa06 f303 	lsl.w	r3, r6, r3
 80058ee:	4318      	orrs	r0, r3
 80058f0:	60a1      	str	r1, [r4, #8]
 80058f2:	6068      	str	r0, [r5, #4]
 80058f4:	6094      	str	r4, [r2, #8]
 80058f6:	4648      	mov	r0, r9
 80058f8:	60cc      	str	r4, [r1, #12]
 80058fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058fe:	f7fd b875 	b.w	80029ec <__malloc_unlock>
 8005902:	07cf      	lsls	r7, r1, #31
 8005904:	4418      	add	r0, r3
 8005906:	d407      	bmi.n	8005918 <_free_r+0x110>
 8005908:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800590c:	1ae4      	subs	r4, r4, r3
 800590e:	4418      	add	r0, r3
 8005910:	68a2      	ldr	r2, [r4, #8]
 8005912:	68e3      	ldr	r3, [r4, #12]
 8005914:	60d3      	str	r3, [r2, #12]
 8005916:	609a      	str	r2, [r3, #8]
 8005918:	f640 025c 	movw	r2, #2140	; 0x85c
 800591c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005920:	f040 0101 	orr.w	r1, r0, #1
 8005924:	6813      	ldr	r3, [r2, #0]
 8005926:	6061      	str	r1, [r4, #4]
 8005928:	4298      	cmp	r0, r3
 800592a:	60ac      	str	r4, [r5, #8]
 800592c:	d3ce      	bcc.n	80058cc <_free_r+0xc4>
 800592e:	f648 23f0 	movw	r3, #35568	; 0x8af0
 8005932:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005936:	4648      	mov	r0, r9
 8005938:	6819      	ldr	r1, [r3, #0]
 800593a:	f7ff ff13 	bl	8005764 <_malloc_trim_r>
 800593e:	e7c5      	b.n	80058cc <_free_r+0xc4>
 8005940:	f043 0201 	orr.w	r2, r3, #1
 8005944:	616c      	str	r4, [r5, #20]
 8005946:	612c      	str	r4, [r5, #16]
 8005948:	60e0      	str	r0, [r4, #12]
 800594a:	60a0      	str	r0, [r4, #8]
 800594c:	6062      	str	r2, [r4, #4]
 800594e:	50e3      	str	r3, [r4, r3]
 8005950:	e7bc      	b.n	80058cc <_free_r+0xc4>
 8005952:	2a14      	cmp	r2, #20
 8005954:	bf9c      	itt	ls
 8005956:	f102 005b 	addls.w	r0, r2, #91	; 0x5b
 800595a:	0041      	lslls	r1, r0, #1
 800595c:	d9a0      	bls.n	80058a0 <_free_r+0x98>
 800595e:	2a54      	cmp	r2, #84	; 0x54
 8005960:	d80c      	bhi.n	800597c <_free_r+0x174>
 8005962:	0b18      	lsrs	r0, r3, #12
 8005964:	306e      	adds	r0, #110	; 0x6e
 8005966:	0041      	lsls	r1, r0, #1
 8005968:	e79a      	b.n	80058a0 <_free_r+0x98>
 800596a:	684b      	ldr	r3, [r1, #4]
 800596c:	1080      	asrs	r0, r0, #2
 800596e:	2501      	movs	r5, #1
 8005970:	fa05 f000 	lsl.w	r0, r5, r0
 8005974:	4303      	orrs	r3, r0
 8005976:	604b      	str	r3, [r1, #4]
 8005978:	4613      	mov	r3, r2
 800597a:	e7a3      	b.n	80058c4 <_free_r+0xbc>
 800597c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005980:	d803      	bhi.n	800598a <_free_r+0x182>
 8005982:	0bd8      	lsrs	r0, r3, #15
 8005984:	3077      	adds	r0, #119	; 0x77
 8005986:	0041      	lsls	r1, r0, #1
 8005988:	e78a      	b.n	80058a0 <_free_r+0x98>
 800598a:	f240 5154 	movw	r1, #1364	; 0x554
 800598e:	428a      	cmp	r2, r1
 8005990:	bf9d      	ittte	ls
 8005992:	0c98      	lsrls	r0, r3, #18
 8005994:	307c      	addls	r0, #124	; 0x7c
 8005996:	0041      	lslls	r1, r0, #1
 8005998:	21fc      	movhi	r1, #252	; 0xfc
 800599a:	bf88      	it	hi
 800599c:	207e      	movhi	r0, #126	; 0x7e
 800599e:	e77f      	b.n	80058a0 <_free_r+0x98>
 80059a0:	2000045c 	.word	0x2000045c

080059a4 <__locale_charset>:
 80059a4:	f640 009c 	movw	r0, #2204	; 0x89c
 80059a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop

080059b0 <__locale_mb_cur_max>:
 80059b0:	f640 03bc 	movw	r3, #2236	; 0x8bc
 80059b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80059b8:	6818      	ldr	r0, [r3, #0]
 80059ba:	4770      	bx	lr

080059bc <_localeconv_r>:
 80059bc:	f640 0064 	movw	r0, #2148	; 0x864
 80059c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop

080059c8 <_lseek_r>:
 80059c8:	b570      	push	{r4, r5, r6, lr}
 80059ca:	f648 341c 	movw	r4, #35612	; 0x8b1c
 80059ce:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80059d2:	4606      	mov	r6, r0
 80059d4:	2500      	movs	r5, #0
 80059d6:	4608      	mov	r0, r1
 80059d8:	4611      	mov	r1, r2
 80059da:	461a      	mov	r2, r3
 80059dc:	6025      	str	r5, [r4, #0]
 80059de:	f7fa fefd 	bl	80007dc <_lseek>
 80059e2:	1c43      	adds	r3, r0, #1
 80059e4:	d000      	beq.n	80059e8 <_lseek_r+0x20>
 80059e6:	bd70      	pop	{r4, r5, r6, pc}
 80059e8:	6823      	ldr	r3, [r4, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0fb      	beq.n	80059e6 <_lseek_r+0x1e>
 80059ee:	6033      	str	r3, [r6, #0]
 80059f0:	bd70      	pop	{r4, r5, r6, pc}
 80059f2:	bf00      	nop

080059f4 <__smakebuf_r>:
 80059f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059f6:	898b      	ldrh	r3, [r1, #12]
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	0796      	lsls	r6, r2, #30
 80059fc:	b091      	sub	sp, #68	; 0x44
 80059fe:	460c      	mov	r4, r1
 8005a00:	4605      	mov	r5, r0
 8005a02:	d43a      	bmi.n	8005a7a <__smakebuf_r+0x86>
 8005a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a08:	2900      	cmp	r1, #0
 8005a0a:	db17      	blt.n	8005a3c <__smakebuf_r+0x48>
 8005a0c:	aa01      	add	r2, sp, #4
 8005a0e:	f000 fcd5 	bl	80063bc <_fstat_r>
 8005a12:	2800      	cmp	r0, #0
 8005a14:	db10      	blt.n	8005a38 <__smakebuf_r+0x44>
 8005a16:	9b02      	ldr	r3, [sp, #8]
 8005a18:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005a1c:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
 8005a20:	424f      	negs	r7, r1
 8005a22:	414f      	adcs	r7, r1
 8005a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a28:	d02f      	beq.n	8005a8a <__smakebuf_r+0x96>
 8005a2a:	89a3      	ldrh	r3, [r4, #12]
 8005a2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a30:	81a3      	strh	r3, [r4, #12]
 8005a32:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8005a36:	e00b      	b.n	8005a50 <__smakebuf_r+0x5c>
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005a40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a44:	81a3      	strh	r3, [r4, #12]
 8005a46:	bf14      	ite	ne
 8005a48:	2640      	movne	r6, #64	; 0x40
 8005a4a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8005a4e:	2700      	movs	r7, #0
 8005a50:	4628      	mov	r0, r5
 8005a52:	4631      	mov	r1, r6
 8005a54:	f7fc fc32 	bl	80022bc <_malloc_r>
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	d030      	beq.n	8005abe <__smakebuf_r+0xca>
 8005a5c:	89a2      	ldrh	r2, [r4, #12]
 8005a5e:	f242 1355 	movw	r3, #8533	; 0x2155
 8005a62:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005a66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a6a:	63eb      	str	r3, [r5, #60]	; 0x3c
 8005a6c:	6020      	str	r0, [r4, #0]
 8005a6e:	6120      	str	r0, [r4, #16]
 8005a70:	6166      	str	r6, [r4, #20]
 8005a72:	81a2      	strh	r2, [r4, #12]
 8005a74:	b9bf      	cbnz	r7, 8005aa6 <__smakebuf_r+0xb2>
 8005a76:	b011      	add	sp, #68	; 0x44
 8005a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a7a:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8005a7e:	2201      	movs	r2, #1
 8005a80:	600b      	str	r3, [r1, #0]
 8005a82:	610b      	str	r3, [r1, #16]
 8005a84:	614a      	str	r2, [r1, #20]
 8005a86:	b011      	add	sp, #68	; 0x44
 8005a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a8a:	f642 3331 	movw	r3, #11057	; 0x2b31
 8005a8e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005a90:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d1c8      	bne.n	8005a2a <__smakebuf_r+0x36>
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8005a9e:	4333      	orrs	r3, r6
 8005aa0:	81a3      	strh	r3, [r4, #12]
 8005aa2:	64e6      	str	r6, [r4, #76]	; 0x4c
 8005aa4:	e7d4      	b.n	8005a50 <__smakebuf_r+0x5c>
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aac:	f000 fe24 	bl	80066f8 <_isatty_r>
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	d0e0      	beq.n	8005a76 <__smakebuf_r+0x82>
 8005ab4:	89a3      	ldrh	r3, [r4, #12]
 8005ab6:	f043 0301 	orr.w	r3, r3, #1
 8005aba:	81a3      	strh	r3, [r4, #12]
 8005abc:	e7db      	b.n	8005a76 <__smakebuf_r+0x82>
 8005abe:	89a3      	ldrh	r3, [r4, #12]
 8005ac0:	059a      	lsls	r2, r3, #22
 8005ac2:	d4d8      	bmi.n	8005a76 <__smakebuf_r+0x82>
 8005ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ac8:	f043 0302 	orr.w	r3, r3, #2
 8005acc:	2101      	movs	r1, #1
 8005ace:	81a3      	strh	r3, [r4, #12]
 8005ad0:	6022      	str	r2, [r4, #0]
 8005ad2:	6122      	str	r2, [r4, #16]
 8005ad4:	6161      	str	r1, [r4, #20]
 8005ad6:	e7ce      	b.n	8005a76 <__smakebuf_r+0x82>

08005ad8 <memchr>:
 8005ad8:	0783      	lsls	r3, r0, #30
 8005ada:	b470      	push	{r4, r5, r6}
 8005adc:	b2c9      	uxtb	r1, r1
 8005ade:	d03f      	beq.n	8005b60 <memchr+0x88>
 8005ae0:	1e54      	subs	r4, r2, #1
 8005ae2:	b32a      	cbz	r2, 8005b30 <memchr+0x58>
 8005ae4:	7803      	ldrb	r3, [r0, #0]
 8005ae6:	428b      	cmp	r3, r1
 8005ae8:	d023      	beq.n	8005b32 <memchr+0x5a>
 8005aea:	1c43      	adds	r3, r0, #1
 8005aec:	e004      	b.n	8005af8 <memchr+0x20>
 8005aee:	b1fc      	cbz	r4, 8005b30 <memchr+0x58>
 8005af0:	7804      	ldrb	r4, [r0, #0]
 8005af2:	428c      	cmp	r4, r1
 8005af4:	d01d      	beq.n	8005b32 <memchr+0x5a>
 8005af6:	4614      	mov	r4, r2
 8005af8:	f013 0f03 	tst.w	r3, #3
 8005afc:	4618      	mov	r0, r3
 8005afe:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
 8005b02:	f103 0301 	add.w	r3, r3, #1
 8005b06:	d1f2      	bne.n	8005aee <memchr+0x16>
 8005b08:	2c03      	cmp	r4, #3
 8005b0a:	d814      	bhi.n	8005b36 <memchr+0x5e>
 8005b0c:	1e65      	subs	r5, r4, #1
 8005b0e:	b34c      	cbz	r4, 8005b64 <memchr+0x8c>
 8005b10:	7803      	ldrb	r3, [r0, #0]
 8005b12:	428b      	cmp	r3, r1
 8005b14:	d00d      	beq.n	8005b32 <memchr+0x5a>
 8005b16:	1c42      	adds	r2, r0, #1
 8005b18:	2300      	movs	r3, #0
 8005b1a:	e002      	b.n	8005b22 <memchr+0x4a>
 8005b1c:	7804      	ldrb	r4, [r0, #0]
 8005b1e:	428c      	cmp	r4, r1
 8005b20:	d007      	beq.n	8005b32 <memchr+0x5a>
 8005b22:	42ab      	cmp	r3, r5
 8005b24:	4610      	mov	r0, r2
 8005b26:	f103 0301 	add.w	r3, r3, #1
 8005b2a:	f102 0201 	add.w	r2, r2, #1
 8005b2e:	d1f5      	bne.n	8005b1c <memchr+0x44>
 8005b30:	2000      	movs	r0, #0
 8005b32:	bc70      	pop	{r4, r5, r6}
 8005b34:	4770      	bx	lr
 8005b36:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8005b40:	4618      	mov	r0, r3
 8005b42:	3304      	adds	r3, #4
 8005b44:	6802      	ldr	r2, [r0, #0]
 8005b46:	4072      	eors	r2, r6
 8005b48:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 8005b4c:	ea25 0202 	bic.w	r2, r5, r2
 8005b50:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8005b54:	d1da      	bne.n	8005b0c <memchr+0x34>
 8005b56:	3c04      	subs	r4, #4
 8005b58:	2c03      	cmp	r4, #3
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	d8f0      	bhi.n	8005b40 <memchr+0x68>
 8005b5e:	e7d5      	b.n	8005b0c <memchr+0x34>
 8005b60:	4614      	mov	r4, r2
 8005b62:	e7d1      	b.n	8005b08 <memchr+0x30>
 8005b64:	4620      	mov	r0, r4
 8005b66:	e7e4      	b.n	8005b32 <memchr+0x5a>

08005b68 <_Balloc>:
 8005b68:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8005b6a:	b570      	push	{r4, r5, r6, lr}
 8005b6c:	4605      	mov	r5, r0
 8005b6e:	460c      	mov	r4, r1
 8005b70:	b14a      	cbz	r2, 8005b86 <_Balloc+0x1e>
 8005b72:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8005b76:	b180      	cbz	r0, 8005b9a <_Balloc+0x32>
 8005b78:	6801      	ldr	r1, [r0, #0]
 8005b7a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	6102      	str	r2, [r0, #16]
 8005b82:	60c2      	str	r2, [r0, #12]
 8005b84:	bd70      	pop	{r4, r5, r6, pc}
 8005b86:	2221      	movs	r2, #33	; 0x21
 8005b88:	2104      	movs	r1, #4
 8005b8a:	f000 fb87 	bl	800629c <_calloc_r>
 8005b8e:	64e8      	str	r0, [r5, #76]	; 0x4c
 8005b90:	4602      	mov	r2, r0
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d1ed      	bne.n	8005b72 <_Balloc+0xa>
 8005b96:	2000      	movs	r0, #0
 8005b98:	bd70      	pop	{r4, r5, r6, pc}
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	fa01 f604 	lsl.w	r6, r1, r4
 8005ba0:	1d72      	adds	r2, r6, #5
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	0092      	lsls	r2, r2, #2
 8005ba6:	f000 fb79 	bl	800629c <_calloc_r>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	d0f3      	beq.n	8005b96 <_Balloc+0x2e>
 8005bae:	6044      	str	r4, [r0, #4]
 8005bb0:	6086      	str	r6, [r0, #8]
 8005bb2:	e7e4      	b.n	8005b7e <_Balloc+0x16>

08005bb4 <_Bfree>:
 8005bb4:	b131      	cbz	r1, 8005bc4 <_Bfree+0x10>
 8005bb6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005bb8:	684a      	ldr	r2, [r1, #4]
 8005bba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005bbe:	6008      	str	r0, [r1, #0]
 8005bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop

08005bc8 <__multadd>:
 8005bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bcc:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	4689      	mov	r9, r1
 8005bd4:	4682      	mov	sl, r0
 8005bd6:	f101 0514 	add.w	r5, r1, #20
 8005bda:	2400      	movs	r4, #0
 8005bdc:	682f      	ldr	r7, [r5, #0]
 8005bde:	b2be      	uxth	r6, r7
 8005be0:	0c3f      	lsrs	r7, r7, #16
 8005be2:	fb02 3606 	mla	r6, r2, r6, r3
 8005be6:	fb02 f307 	mul.w	r3, r2, r7
 8005bea:	eb03 4316 	add.w	r3, r3, r6, lsr #16
 8005bee:	3401      	adds	r4, #1
 8005bf0:	b2b6      	uxth	r6, r6
 8005bf2:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 8005bf6:	45a0      	cmp	r8, r4
 8005bf8:	f845 6b04 	str.w	r6, [r5], #4
 8005bfc:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8005c00:	dcec      	bgt.n	8005bdc <__multadd+0x14>
 8005c02:	b153      	cbz	r3, 8005c1a <__multadd+0x52>
 8005c04:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8005c08:	4590      	cmp	r8, r2
 8005c0a:	da0a      	bge.n	8005c22 <__multadd+0x5a>
 8005c0c:	eb09 0188 	add.w	r1, r9, r8, lsl #2
 8005c10:	f108 0201 	add.w	r2, r8, #1
 8005c14:	614b      	str	r3, [r1, #20]
 8005c16:	f8c9 2010 	str.w	r2, [r9, #16]
 8005c1a:	4648      	mov	r0, r9
 8005c1c:	b002      	add	sp, #8
 8005c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c22:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005c26:	9301      	str	r3, [sp, #4]
 8005c28:	3101      	adds	r1, #1
 8005c2a:	4650      	mov	r0, sl
 8005c2c:	f7ff ff9c 	bl	8005b68 <_Balloc>
 8005c30:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8005c34:	3202      	adds	r2, #2
 8005c36:	f109 010c 	add.w	r1, r9, #12
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	0092      	lsls	r2, r2, #2
 8005c3e:	300c      	adds	r0, #12
 8005c40:	f7fc fdee 	bl	8002820 <memcpy>
 8005c44:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
 8005c48:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005c4c:	9b01      	ldr	r3, [sp, #4]
 8005c4e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8005c52:	f8c9 0000 	str.w	r0, [r9]
 8005c56:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
 8005c5a:	46a1      	mov	r9, r4
 8005c5c:	e7d6      	b.n	8005c0c <__multadd+0x44>
 8005c5e:	bf00      	nop

08005c60 <__hi0bits>:
 8005c60:	0c03      	lsrs	r3, r0, #16
 8005c62:	bf06      	itte	eq
 8005c64:	0400      	lsleq	r0, r0, #16
 8005c66:	2310      	moveq	r3, #16
 8005c68:	2300      	movne	r3, #0
 8005c6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005c6e:	bf04      	itt	eq
 8005c70:	0200      	lsleq	r0, r0, #8
 8005c72:	3308      	addeq	r3, #8
 8005c74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005c78:	bf04      	itt	eq
 8005c7a:	0100      	lsleq	r0, r0, #4
 8005c7c:	3304      	addeq	r3, #4
 8005c7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005c82:	bf04      	itt	eq
 8005c84:	0080      	lsleq	r0, r0, #2
 8005c86:	3302      	addeq	r3, #2
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	db05      	blt.n	8005c98 <__hi0bits+0x38>
 8005c8c:	0042      	lsls	r2, r0, #1
 8005c8e:	d401      	bmi.n	8005c94 <__hi0bits+0x34>
 8005c90:	2020      	movs	r0, #32
 8005c92:	4770      	bx	lr
 8005c94:	1c58      	adds	r0, r3, #1
 8005c96:	4770      	bx	lr
 8005c98:	4618      	mov	r0, r3
 8005c9a:	4770      	bx	lr

08005c9c <__lo0bits>:
 8005c9c:	6803      	ldr	r3, [r0, #0]
 8005c9e:	f013 0207 	ands.w	r2, r3, #7
 8005ca2:	d00b      	beq.n	8005cbc <__lo0bits+0x20>
 8005ca4:	07d9      	lsls	r1, r3, #31
 8005ca6:	d424      	bmi.n	8005cf2 <__lo0bits+0x56>
 8005ca8:	079a      	lsls	r2, r3, #30
 8005caa:	bf4b      	itete	mi
 8005cac:	085b      	lsrmi	r3, r3, #1
 8005cae:	089b      	lsrpl	r3, r3, #2
 8005cb0:	6003      	strmi	r3, [r0, #0]
 8005cb2:	6003      	strpl	r3, [r0, #0]
 8005cb4:	bf4c      	ite	mi
 8005cb6:	2001      	movmi	r0, #1
 8005cb8:	2002      	movpl	r0, #2
 8005cba:	4770      	bx	lr
 8005cbc:	b299      	uxth	r1, r3
 8005cbe:	b909      	cbnz	r1, 8005cc4 <__lo0bits+0x28>
 8005cc0:	0c1b      	lsrs	r3, r3, #16
 8005cc2:	2210      	movs	r2, #16
 8005cc4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005cc8:	bf04      	itt	eq
 8005cca:	0a1b      	lsreq	r3, r3, #8
 8005ccc:	3208      	addeq	r2, #8
 8005cce:	0719      	lsls	r1, r3, #28
 8005cd0:	bf04      	itt	eq
 8005cd2:	091b      	lsreq	r3, r3, #4
 8005cd4:	3204      	addeq	r2, #4
 8005cd6:	0799      	lsls	r1, r3, #30
 8005cd8:	bf04      	itt	eq
 8005cda:	089b      	lsreq	r3, r3, #2
 8005cdc:	3202      	addeq	r2, #2
 8005cde:	07d9      	lsls	r1, r3, #31
 8005ce0:	d404      	bmi.n	8005cec <__lo0bits+0x50>
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	d101      	bne.n	8005cea <__lo0bits+0x4e>
 8005ce6:	2020      	movs	r0, #32
 8005ce8:	4770      	bx	lr
 8005cea:	3201      	adds	r2, #1
 8005cec:	6003      	str	r3, [r0, #0]
 8005cee:	4610      	mov	r0, r2
 8005cf0:	4770      	bx	lr
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop

08005cf8 <__i2b>:
 8005cf8:	b510      	push	{r4, lr}
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	f7ff ff33 	bl	8005b68 <_Balloc>
 8005d02:	2201      	movs	r2, #1
 8005d04:	6144      	str	r4, [r0, #20]
 8005d06:	6102      	str	r2, [r0, #16]
 8005d08:	bd10      	pop	{r4, pc}
 8005d0a:	bf00      	nop

08005d0c <__multiply>:
 8005d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d10:	690c      	ldr	r4, [r1, #16]
 8005d12:	6917      	ldr	r7, [r2, #16]
 8005d14:	42bc      	cmp	r4, r7
 8005d16:	b085      	sub	sp, #20
 8005d18:	4688      	mov	r8, r1
 8005d1a:	4691      	mov	r9, r2
 8005d1c:	da04      	bge.n	8005d28 <__multiply+0x1c>
 8005d1e:	4622      	mov	r2, r4
 8005d20:	46c8      	mov	r8, r9
 8005d22:	463c      	mov	r4, r7
 8005d24:	4689      	mov	r9, r1
 8005d26:	4617      	mov	r7, r2
 8005d28:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005d2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005d30:	19e6      	adds	r6, r4, r7
 8005d32:	429e      	cmp	r6, r3
 8005d34:	bfc8      	it	gt
 8005d36:	3101      	addgt	r1, #1
 8005d38:	f7ff ff16 	bl	8005b68 <_Balloc>
 8005d3c:	f100 0514 	add.w	r5, r0, #20
 8005d40:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8005d44:	4565      	cmp	r5, ip
 8005d46:	9001      	str	r0, [sp, #4]
 8005d48:	bf3c      	itt	cc
 8005d4a:	462b      	movcc	r3, r5
 8005d4c:	2000      	movcc	r0, #0
 8005d4e:	d203      	bcs.n	8005d58 <__multiply+0x4c>
 8005d50:	f843 0b04 	str.w	r0, [r3], #4
 8005d54:	459c      	cmp	ip, r3
 8005d56:	d8fb      	bhi.n	8005d50 <__multiply+0x44>
 8005d58:	f109 0914 	add.w	r9, r9, #20
 8005d5c:	eb09 0387 	add.w	r3, r9, r7, lsl #2
 8005d60:	4599      	cmp	r9, r3
 8005d62:	f108 0814 	add.w	r8, r8, #20
 8005d66:	bf38      	it	cc
 8005d68:	f8cd c008 	strcc.w	ip, [sp, #8]
 8005d6c:	f8cd 8000 	str.w	r8, [sp]
 8005d70:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 8005d74:	bf3e      	ittt	cc
 8005d76:	464f      	movcc	r7, r9
 8005d78:	469c      	movcc	ip, r3
 8005d7a:	9603      	strcc	r6, [sp, #12]
 8005d7c:	d25c      	bcs.n	8005e38 <__multiply+0x12c>
 8005d7e:	f857 3b04 	ldr.w	r3, [r7], #4
 8005d82:	fa1f f883 	uxth.w	r8, r3
 8005d86:	f1b8 0f00 	cmp.w	r8, #0
 8005d8a:	d024      	beq.n	8005dd6 <__multiply+0xca>
 8005d8c:	9a00      	ldr	r2, [sp, #0]
 8005d8e:	462b      	mov	r3, r5
 8005d90:	f04f 0900 	mov.w	r9, #0
 8005d94:	e000      	b.n	8005d98 <__multiply+0x8c>
 8005d96:	460b      	mov	r3, r1
 8005d98:	f852 6b04 	ldr.w	r6, [r2], #4
 8005d9c:	6819      	ldr	r1, [r3, #0]
 8005d9e:	fa1f fb86 	uxth.w	fp, r6
 8005da2:	fa1f fa81 	uxth.w	sl, r1
 8005da6:	0c30      	lsrs	r0, r6, #16
 8005da8:	0c09      	lsrs	r1, r1, #16
 8005daa:	fb08 a60b 	mla	r6, r8, fp, sl
 8005dae:	44b1      	add	r9, r6
 8005db0:	fb08 1000 	mla	r0, r8, r0, r1
 8005db4:	eb00 4019 	add.w	r0, r0, r9, lsr #16
 8005db8:	4619      	mov	r1, r3
 8005dba:	fa1f f989 	uxth.w	r9, r9
 8005dbe:	ea49 4600 	orr.w	r6, r9, r0, lsl #16
 8005dc2:	4294      	cmp	r4, r2
 8005dc4:	ea4f 4910 	mov.w	r9, r0, lsr #16
 8005dc8:	f841 6b04 	str.w	r6, [r1], #4
 8005dcc:	d8e3      	bhi.n	8005d96 <__multiply+0x8a>
 8005dce:	f8c3 9004 	str.w	r9, [r3, #4]
 8005dd2:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8005dd6:	ea5f 4913 	movs.w	r9, r3, lsr #16
 8005dda:	d026      	beq.n	8005e2a <__multiply+0x11e>
 8005ddc:	f8d5 a000 	ldr.w	sl, [r5]
 8005de0:	9b00      	ldr	r3, [sp, #0]
 8005de2:	f04f 0b00 	mov.w	fp, #0
 8005de6:	4629      	mov	r1, r5
 8005de8:	465e      	mov	r6, fp
 8005dea:	4650      	mov	r0, sl
 8005dec:	e000      	b.n	8005df0 <__multiply+0xe4>
 8005dee:	4611      	mov	r1, r2
 8005df0:	f8b3 b000 	ldrh.w	fp, [r3]
 8005df4:	0c00      	lsrs	r0, r0, #16
 8005df6:	fb09 0b0b 	mla	fp, r9, fp, r0
 8005dfa:	44b3      	add	fp, r6
 8005dfc:	fa1f f08a 	uxth.w	r0, sl
 8005e00:	460a      	mov	r2, r1
 8005e02:	ea40 400b 	orr.w	r0, r0, fp, lsl #16
 8005e06:	f842 0b04 	str.w	r0, [r2], #4
 8005e0a:	f853 ab04 	ldr.w	sl, [r3], #4
 8005e0e:	6848      	ldr	r0, [r1, #4]
 8005e10:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
 8005e14:	b286      	uxth	r6, r0
 8005e16:	fb09 6a0a 	mla	sl, r9, sl, r6
 8005e1a:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
 8005e1e:	429c      	cmp	r4, r3
 8005e20:	ea4f 461a 	mov.w	r6, sl, lsr #16
 8005e24:	d8e3      	bhi.n	8005dee <__multiply+0xe2>
 8005e26:	f8c1 a004 	str.w	sl, [r1, #4]
 8005e2a:	45bc      	cmp	ip, r7
 8005e2c:	f105 0504 	add.w	r5, r5, #4
 8005e30:	d8a5      	bhi.n	8005d7e <__multiply+0x72>
 8005e32:	f8dd c008 	ldr.w	ip, [sp, #8]
 8005e36:	9e03      	ldr	r6, [sp, #12]
 8005e38:	2e00      	cmp	r6, #0
 8005e3a:	dd0a      	ble.n	8005e52 <__multiply+0x146>
 8005e3c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8005e40:	f1ac 0c04 	sub.w	ip, ip, #4
 8005e44:	b11b      	cbz	r3, 8005e4e <__multiply+0x142>
 8005e46:	e004      	b.n	8005e52 <__multiply+0x146>
 8005e48:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8005e4c:	b90b      	cbnz	r3, 8005e52 <__multiply+0x146>
 8005e4e:	3e01      	subs	r6, #1
 8005e50:	d1fa      	bne.n	8005e48 <__multiply+0x13c>
 8005e52:	9a01      	ldr	r2, [sp, #4]
 8005e54:	4610      	mov	r0, r2
 8005e56:	6116      	str	r6, [r2, #16]
 8005e58:	b005      	add	sp, #20
 8005e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e5e:	bf00      	nop

08005e60 <__pow5mult>:
 8005e60:	f012 0303 	ands.w	r3, r2, #3
 8005e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e68:	4614      	mov	r4, r2
 8005e6a:	4607      	mov	r7, r0
 8005e6c:	460e      	mov	r6, r1
 8005e6e:	d12c      	bne.n	8005eca <__pow5mult+0x6a>
 8005e70:	10a4      	asrs	r4, r4, #2
 8005e72:	d01c      	beq.n	8005eae <__pow5mult+0x4e>
 8005e74:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8005e76:	2d00      	cmp	r5, #0
 8005e78:	d033      	beq.n	8005ee2 <__pow5mult+0x82>
 8005e7a:	f04f 0800 	mov.w	r8, #0
 8005e7e:	e004      	b.n	8005e8a <__pow5mult+0x2a>
 8005e80:	1064      	asrs	r4, r4, #1
 8005e82:	d014      	beq.n	8005eae <__pow5mult+0x4e>
 8005e84:	6828      	ldr	r0, [r5, #0]
 8005e86:	b1a8      	cbz	r0, 8005eb4 <__pow5mult+0x54>
 8005e88:	4605      	mov	r5, r0
 8005e8a:	07e0      	lsls	r0, r4, #31
 8005e8c:	d5f8      	bpl.n	8005e80 <__pow5mult+0x20>
 8005e8e:	4638      	mov	r0, r7
 8005e90:	4631      	mov	r1, r6
 8005e92:	462a      	mov	r2, r5
 8005e94:	f7ff ff3a 	bl	8005d0c <__multiply>
 8005e98:	b1ae      	cbz	r6, 8005ec6 <__pow5mult+0x66>
 8005e9a:	6872      	ldr	r2, [r6, #4]
 8005e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ea2:	1064      	asrs	r4, r4, #1
 8005ea4:	6031      	str	r1, [r6, #0]
 8005ea6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8005eaa:	4606      	mov	r6, r0
 8005eac:	d1ea      	bne.n	8005e84 <__pow5mult+0x24>
 8005eae:	4630      	mov	r0, r6
 8005eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eb4:	4638      	mov	r0, r7
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	462a      	mov	r2, r5
 8005eba:	f7ff ff27 	bl	8005d0c <__multiply>
 8005ebe:	6028      	str	r0, [r5, #0]
 8005ec0:	f8c0 8000 	str.w	r8, [r0]
 8005ec4:	e7e0      	b.n	8005e88 <__pow5mult+0x28>
 8005ec6:	4606      	mov	r6, r0
 8005ec8:	e7da      	b.n	8005e80 <__pow5mult+0x20>
 8005eca:	f647 7210 	movw	r2, #32528	; 0x7f10
 8005ece:	1e5d      	subs	r5, r3, #1
 8005ed0:	f6c0 0200 	movt	r2, #2048	; 0x800
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8005eda:	f7ff fe75 	bl	8005bc8 <__multadd>
 8005ede:	4606      	mov	r6, r0
 8005ee0:	e7c6      	b.n	8005e70 <__pow5mult+0x10>
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	4638      	mov	r0, r7
 8005ee6:	f7ff fe3f 	bl	8005b68 <_Balloc>
 8005eea:	f240 2171 	movw	r1, #625	; 0x271
 8005eee:	2201      	movs	r2, #1
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	6141      	str	r1, [r0, #20]
 8005ef4:	6102      	str	r2, [r0, #16]
 8005ef6:	4605      	mov	r5, r0
 8005ef8:	64b8      	str	r0, [r7, #72]	; 0x48
 8005efa:	6003      	str	r3, [r0, #0]
 8005efc:	e7bd      	b.n	8005e7a <__pow5mult+0x1a>
 8005efe:	bf00      	nop

08005f00 <__lshift>:
 8005f00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f04:	4693      	mov	fp, r2
 8005f06:	690a      	ldr	r2, [r1, #16]
 8005f08:	688b      	ldr	r3, [r1, #8]
 8005f0a:	ea4f 1a6b 	mov.w	sl, fp, asr #5
 8005f0e:	eb0a 0902 	add.w	r9, sl, r2
 8005f12:	f109 0601 	add.w	r6, r9, #1
 8005f16:	429e      	cmp	r6, r3
 8005f18:	460f      	mov	r7, r1
 8005f1a:	4680      	mov	r8, r0
 8005f1c:	6849      	ldr	r1, [r1, #4]
 8005f1e:	dd04      	ble.n	8005f2a <__lshift+0x2a>
 8005f20:	005b      	lsls	r3, r3, #1
 8005f22:	429e      	cmp	r6, r3
 8005f24:	f101 0101 	add.w	r1, r1, #1
 8005f28:	dcfa      	bgt.n	8005f20 <__lshift+0x20>
 8005f2a:	4640      	mov	r0, r8
 8005f2c:	f7ff fe1c 	bl	8005b68 <_Balloc>
 8005f30:	f1ba 0f00 	cmp.w	sl, #0
 8005f34:	f100 0414 	add.w	r4, r0, #20
 8005f38:	dd09      	ble.n	8005f4e <__lshift+0x4e>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	4625      	mov	r5, r4
 8005f40:	3301      	adds	r3, #1
 8005f42:	4553      	cmp	r3, sl
 8005f44:	f845 2b04 	str.w	r2, [r5], #4
 8005f48:	d1fa      	bne.n	8005f40 <__lshift+0x40>
 8005f4a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	f107 0314 	add.w	r3, r7, #20
 8005f54:	f01b 0b1f 	ands.w	fp, fp, #31
 8005f58:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 8005f5c:	d021      	beq.n	8005fa2 <__lshift+0xa2>
 8005f5e:	f1cb 0a20 	rsb	sl, fp, #32
 8005f62:	2200      	movs	r2, #0
 8005f64:	e000      	b.n	8005f68 <__lshift+0x68>
 8005f66:	462c      	mov	r4, r5
 8005f68:	6819      	ldr	r1, [r3, #0]
 8005f6a:	4625      	mov	r5, r4
 8005f6c:	fa01 f10b 	lsl.w	r1, r1, fp
 8005f70:	430a      	orrs	r2, r1
 8005f72:	f845 2b04 	str.w	r2, [r5], #4
 8005f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f7a:	4563      	cmp	r3, ip
 8005f7c:	fa22 f20a 	lsr.w	r2, r2, sl
 8005f80:	d3f1      	bcc.n	8005f66 <__lshift+0x66>
 8005f82:	6062      	str	r2, [r4, #4]
 8005f84:	b10a      	cbz	r2, 8005f8a <__lshift+0x8a>
 8005f86:	f109 0602 	add.w	r6, r9, #2
 8005f8a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f94:	3e01      	subs	r6, #1
 8005f96:	6106      	str	r6, [r0, #16]
 8005f98:	6039      	str	r1, [r7, #0]
 8005f9a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 8005f9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fa6:	459c      	cmp	ip, r3
 8005fa8:	f844 2b04 	str.w	r2, [r4], #4
 8005fac:	d9ed      	bls.n	8005f8a <__lshift+0x8a>
 8005fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fb2:	459c      	cmp	ip, r3
 8005fb4:	f844 2b04 	str.w	r2, [r4], #4
 8005fb8:	d8f3      	bhi.n	8005fa2 <__lshift+0xa2>
 8005fba:	e7e6      	b.n	8005f8a <__lshift+0x8a>

08005fbc <__mcmp>:
 8005fbc:	6902      	ldr	r2, [r0, #16]
 8005fbe:	690b      	ldr	r3, [r1, #16]
 8005fc0:	1ad2      	subs	r2, r2, r3
 8005fc2:	b410      	push	{r4}
 8005fc4:	bf18      	it	ne
 8005fc6:	4610      	movne	r0, r2
 8005fc8:	d112      	bne.n	8005ff0 <__mcmp+0x34>
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	3014      	adds	r0, #20
 8005fce:	3114      	adds	r1, #20
 8005fd0:	4419      	add	r1, r3
 8005fd2:	4403      	add	r3, r0
 8005fd4:	e001      	b.n	8005fda <__mcmp+0x1e>
 8005fd6:	4298      	cmp	r0, r3
 8005fd8:	d20d      	bcs.n	8005ff6 <__mcmp+0x3a>
 8005fda:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005fde:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005fe2:	42a2      	cmp	r2, r4
 8005fe4:	d0f7      	beq.n	8005fd6 <__mcmp+0x1a>
 8005fe6:	4294      	cmp	r4, r2
 8005fe8:	bf94      	ite	ls
 8005fea:	2001      	movls	r0, #1
 8005fec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	2000      	movs	r0, #0
 8005ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop

08006000 <__mdiff>:
 8006000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006004:	460c      	mov	r4, r1
 8006006:	4606      	mov	r6, r0
 8006008:	4611      	mov	r1, r2
 800600a:	4620      	mov	r0, r4
 800600c:	4615      	mov	r5, r2
 800600e:	f7ff ffd5 	bl	8005fbc <__mcmp>
 8006012:	1e07      	subs	r7, r0, #0
 8006014:	d054      	beq.n	80060c0 <__mdiff+0xc0>
 8006016:	bfbc      	itt	lt
 8006018:	4623      	movlt	r3, r4
 800601a:	462c      	movlt	r4, r5
 800601c:	4630      	mov	r0, r6
 800601e:	bfb8      	it	lt
 8006020:	461d      	movlt	r5, r3
 8006022:	6861      	ldr	r1, [r4, #4]
 8006024:	bfac      	ite	ge
 8006026:	2700      	movge	r7, #0
 8006028:	2701      	movlt	r7, #1
 800602a:	f7ff fd9d 	bl	8005b68 <_Balloc>
 800602e:	692a      	ldr	r2, [r5, #16]
 8006030:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8006034:	60c7      	str	r7, [r0, #12]
 8006036:	3414      	adds	r4, #20
 8006038:	3514      	adds	r5, #20
 800603a:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 800603e:	f100 0314 	add.w	r3, r0, #20
 8006042:	eb04 088c 	add.w	r8, r4, ip, lsl #2
 8006046:	2200      	movs	r2, #0
 8006048:	f854 6b04 	ldr.w	r6, [r4], #4
 800604c:	f855 7b04 	ldr.w	r7, [r5], #4
 8006050:	fa12 f286 	uxtah	r2, r2, r6
 8006054:	b2b9      	uxth	r1, r7
 8006056:	0c3f      	lsrs	r7, r7, #16
 8006058:	1a51      	subs	r1, r2, r1
 800605a:	ebc7 4216 	rsb	r2, r7, r6, lsr #16
 800605e:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8006062:	b289      	uxth	r1, r1
 8006064:	ea41 4602 	orr.w	r6, r1, r2, lsl #16
 8006068:	45a9      	cmp	r9, r5
 800606a:	f843 6b04 	str.w	r6, [r3], #4
 800606e:	ea4f 4222 	mov.w	r2, r2, asr #16
 8006072:	4621      	mov	r1, r4
 8006074:	d8e8      	bhi.n	8006048 <__mdiff+0x48>
 8006076:	45a0      	cmp	r8, r4
 8006078:	461f      	mov	r7, r3
 800607a:	d915      	bls.n	80060a8 <__mdiff+0xa8>
 800607c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006080:	fa12 f285 	uxtah	r2, r2, r5
 8006084:	0c2d      	lsrs	r5, r5, #16
 8006086:	eb05 4522 	add.w	r5, r5, r2, asr #16
 800608a:	b292      	uxth	r2, r2
 800608c:	ea42 4605 	orr.w	r6, r2, r5, lsl #16
 8006090:	4588      	cmp	r8, r1
 8006092:	f843 6b04 	str.w	r6, [r3], #4
 8006096:	ea4f 4225 	mov.w	r2, r5, asr #16
 800609a:	d8ef      	bhi.n	800607c <__mdiff+0x7c>
 800609c:	43e3      	mvns	r3, r4
 800609e:	4443      	add	r3, r8
 80060a0:	f023 0303 	bic.w	r3, r3, #3
 80060a4:	3304      	adds	r3, #4
 80060a6:	443b      	add	r3, r7
 80060a8:	3b04      	subs	r3, #4
 80060aa:	b92e      	cbnz	r6, 80060b8 <__mdiff+0xb8>
 80060ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80060b0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80060b4:	2a00      	cmp	r2, #0
 80060b6:	d0f9      	beq.n	80060ac <__mdiff+0xac>
 80060b8:	f8c0 c010 	str.w	ip, [r0, #16]
 80060bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060c0:	4630      	mov	r0, r6
 80060c2:	4639      	mov	r1, r7
 80060c4:	f7ff fd50 	bl	8005b68 <_Balloc>
 80060c8:	2301      	movs	r3, #1
 80060ca:	6147      	str	r7, [r0, #20]
 80060cc:	6103      	str	r3, [r0, #16]
 80060ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060d2:	bf00      	nop

080060d4 <__d2b>:
 80060d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060d8:	4689      	mov	r9, r1
 80060da:	b083      	sub	sp, #12
 80060dc:	2101      	movs	r1, #1
 80060de:	ec55 4b10 	vmov	r4, r5, d0
 80060e2:	4690      	mov	r8, r2
 80060e4:	f7ff fd40 	bl	8005b68 <_Balloc>
 80060e8:	f3c5 570a 	ubfx	r7, r5, #20, #11
 80060ec:	4606      	mov	r6, r0
 80060ee:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80060f2:	b10f      	cbz	r7, 80060f8 <__d2b+0x24>
 80060f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060f8:	9301      	str	r3, [sp, #4]
 80060fa:	b314      	cbz	r4, 8006142 <__d2b+0x6e>
 80060fc:	a802      	add	r0, sp, #8
 80060fe:	f840 4d08 	str.w	r4, [r0, #-8]!
 8006102:	4668      	mov	r0, sp
 8006104:	f7ff fdca 	bl	8005c9c <__lo0bits>
 8006108:	2800      	cmp	r0, #0
 800610a:	d131      	bne.n	8006170 <__d2b+0x9c>
 800610c:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8006110:	6172      	str	r2, [r6, #20]
 8006112:	2b00      	cmp	r3, #0
 8006114:	bf0c      	ite	eq
 8006116:	2401      	moveq	r4, #1
 8006118:	2402      	movne	r4, #2
 800611a:	61b3      	str	r3, [r6, #24]
 800611c:	6134      	str	r4, [r6, #16]
 800611e:	b9d7      	cbnz	r7, 8006156 <__d2b+0x82>
 8006120:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006124:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006128:	f8c9 0000 	str.w	r0, [r9]
 800612c:	6918      	ldr	r0, [r3, #16]
 800612e:	f7ff fd97 	bl	8005c60 <__hi0bits>
 8006132:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8006136:	f8c8 0000 	str.w	r0, [r8]
 800613a:	4630      	mov	r0, r6
 800613c:	b003      	add	sp, #12
 800613e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006142:	a801      	add	r0, sp, #4
 8006144:	f7ff fdaa 	bl	8005c9c <__lo0bits>
 8006148:	9b01      	ldr	r3, [sp, #4]
 800614a:	2401      	movs	r4, #1
 800614c:	3020      	adds	r0, #32
 800614e:	6173      	str	r3, [r6, #20]
 8006150:	6134      	str	r4, [r6, #16]
 8006152:	2f00      	cmp	r7, #0
 8006154:	d0e4      	beq.n	8006120 <__d2b+0x4c>
 8006156:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 800615a:	4407      	add	r7, r0
 800615c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006160:	f8c9 7000 	str.w	r7, [r9]
 8006164:	f8c8 0000 	str.w	r0, [r8]
 8006168:	4630      	mov	r0, r6
 800616a:	b003      	add	sp, #12
 800616c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006170:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8006174:	f1c0 0120 	rsb	r1, r0, #32
 8006178:	fa03 f101 	lsl.w	r1, r3, r1
 800617c:	430a      	orrs	r2, r1
 800617e:	40c3      	lsrs	r3, r0
 8006180:	9301      	str	r3, [sp, #4]
 8006182:	6172      	str	r2, [r6, #20]
 8006184:	e7c5      	b.n	8006112 <__d2b+0x3e>
 8006186:	bf00      	nop

08006188 <_read_r>:
 8006188:	b570      	push	{r4, r5, r6, lr}
 800618a:	f648 341c 	movw	r4, #35612	; 0x8b1c
 800618e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8006192:	4606      	mov	r6, r0
 8006194:	2500      	movs	r5, #0
 8006196:	4608      	mov	r0, r1
 8006198:	4611      	mov	r1, r2
 800619a:	461a      	mov	r2, r3
 800619c:	6025      	str	r5, [r4, #0]
 800619e:	f7fa fa95 	bl	80006cc <_read>
 80061a2:	1c43      	adds	r3, r0, #1
 80061a4:	d000      	beq.n	80061a8 <_read_r+0x20>
 80061a6:	bd70      	pop	{r4, r5, r6, pc}
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0fb      	beq.n	80061a6 <_read_r+0x1e>
 80061ae:	6033      	str	r3, [r6, #0]
 80061b0:	bd70      	pop	{r4, r5, r6, pc}
 80061b2:	bf00      	nop

080061b4 <__fpclassifyd>:
 80061b4:	ec53 2b10 	vmov	r2, r3, d0
 80061b8:	ea52 0103 	orrs.w	r1, r2, r3
 80061bc:	d101      	bne.n	80061c2 <__fpclassifyd+0xe>
 80061be:	2002      	movs	r0, #2
 80061c0:	4770      	bx	lr
 80061c2:	f1d2 0101 	rsbs	r1, r2, #1
 80061c6:	bf38      	it	cc
 80061c8:	2100      	movcc	r1, #0
 80061ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061ce:	bf08      	it	eq
 80061d0:	2a00      	cmpeq	r2, #0
 80061d2:	d0f4      	beq.n	80061be <__fpclassifyd+0xa>
 80061d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80061d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061dc:	f5a2 1080 	sub.w	r0, r2, #1048576	; 0x100000
 80061e0:	f6c7 73df 	movt	r3, #32735	; 0x7fdf
 80061e4:	4298      	cmp	r0, r3
 80061e6:	d801      	bhi.n	80061ec <__fpclassifyd+0x38>
 80061e8:	2004      	movs	r0, #4
 80061ea:	4770      	bx	lr
 80061ec:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80061f0:	d201      	bcs.n	80061f6 <__fpclassifyd+0x42>
 80061f2:	2003      	movs	r0, #3
 80061f4:	4770      	bx	lr
 80061f6:	2000      	movs	r0, #0
 80061f8:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 80061fc:	4282      	cmp	r2, r0
 80061fe:	bf14      	ite	ne
 8006200:	2000      	movne	r0, #0
 8006202:	f001 0001 	andeq.w	r0, r1, #1
 8006206:	4770      	bx	lr

08006208 <__sprint_r.part.0>:
 8006208:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800620a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800620e:	049c      	lsls	r4, r3, #18
 8006210:	460e      	mov	r6, r1
 8006212:	4680      	mov	r8, r0
 8006214:	4691      	mov	r9, r2
 8006216:	d52b      	bpl.n	8006270 <__sprint_r.part.0+0x68>
 8006218:	6893      	ldr	r3, [r2, #8]
 800621a:	6812      	ldr	r2, [r2, #0]
 800621c:	f102 0a08 	add.w	sl, r2, #8
 8006220:	b323      	cbz	r3, 800626c <__sprint_r.part.0+0x64>
 8006222:	e91a 00a0 	ldmdb	sl, {r5, r7}
 8006226:	08bf      	lsrs	r7, r7, #2
 8006228:	bf1c      	itt	ne
 800622a:	3d04      	subne	r5, #4
 800622c:	2400      	movne	r4, #0
 800622e:	d102      	bne.n	8006236 <__sprint_r.part.0+0x2e>
 8006230:	e014      	b.n	800625c <__sprint_r.part.0+0x54>
 8006232:	42a7      	cmp	r7, r4
 8006234:	d010      	beq.n	8006258 <__sprint_r.part.0+0x50>
 8006236:	4640      	mov	r0, r8
 8006238:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800623c:	4632      	mov	r2, r6
 800623e:	f000 f85d 	bl	80062fc <_fputwc_r>
 8006242:	1c43      	adds	r3, r0, #1
 8006244:	f104 0401 	add.w	r4, r4, #1
 8006248:	d1f3      	bne.n	8006232 <__sprint_r.part.0+0x2a>
 800624a:	2300      	movs	r3, #0
 800624c:	f8c9 3008 	str.w	r3, [r9, #8]
 8006250:	f8c9 3004 	str.w	r3, [r9, #4]
 8006254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006258:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800625c:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
 8006260:	f8c9 3008 	str.w	r3, [r9, #8]
 8006264:	f10a 0a08 	add.w	sl, sl, #8
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1da      	bne.n	8006222 <__sprint_r.part.0+0x1a>
 800626c:	2000      	movs	r0, #0
 800626e:	e7ec      	b.n	800624a <__sprint_r.part.0+0x42>
 8006270:	f000 f8b8 	bl	80063e4 <__sfvwrite_r>
 8006274:	2300      	movs	r3, #0
 8006276:	f8c9 3008 	str.w	r3, [r9, #8]
 800627a:	f8c9 3004 	str.w	r3, [r9, #4]
 800627e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006282:	bf00      	nop

08006284 <__sprint_r>:
 8006284:	6893      	ldr	r3, [r2, #8]
 8006286:	b410      	push	{r4}
 8006288:	b11b      	cbz	r3, 8006292 <__sprint_r+0xe>
 800628a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800628e:	f7ff bfbb 	b.w	8006208 <__sprint_r.part.0>
 8006292:	4618      	mov	r0, r3
 8006294:	6053      	str	r3, [r2, #4]
 8006296:	f85d 4b04 	ldr.w	r4, [sp], #4
 800629a:	4770      	bx	lr

0800629c <_calloc_r>:
 800629c:	b510      	push	{r4, lr}
 800629e:	fb02 f101 	mul.w	r1, r2, r1
 80062a2:	f7fc f80b 	bl	80022bc <_malloc_r>
 80062a6:	4604      	mov	r4, r0
 80062a8:	b170      	cbz	r0, 80062c8 <_calloc_r+0x2c>
 80062aa:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80062ae:	f022 0203 	bic.w	r2, r2, #3
 80062b2:	3a04      	subs	r2, #4
 80062b4:	2a24      	cmp	r2, #36	; 0x24
 80062b6:	d81c      	bhi.n	80062f2 <_calloc_r+0x56>
 80062b8:	2a13      	cmp	r2, #19
 80062ba:	bf98      	it	ls
 80062bc:	4603      	movls	r3, r0
 80062be:	d805      	bhi.n	80062cc <_calloc_r+0x30>
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	605a      	str	r2, [r3, #4]
 80062c6:	609a      	str	r2, [r3, #8]
 80062c8:	4620      	mov	r0, r4
 80062ca:	bd10      	pop	{r4, pc}
 80062cc:	2300      	movs	r3, #0
 80062ce:	2a1b      	cmp	r2, #27
 80062d0:	6003      	str	r3, [r0, #0]
 80062d2:	6043      	str	r3, [r0, #4]
 80062d4:	bf98      	it	ls
 80062d6:	f100 0308 	addls.w	r3, r0, #8
 80062da:	d9f1      	bls.n	80062c0 <_calloc_r+0x24>
 80062dc:	2a24      	cmp	r2, #36	; 0x24
 80062de:	6083      	str	r3, [r0, #8]
 80062e0:	60c3      	str	r3, [r0, #12]
 80062e2:	bf05      	ittet	eq
 80062e4:	6103      	streq	r3, [r0, #16]
 80062e6:	6143      	streq	r3, [r0, #20]
 80062e8:	f100 0310 	addne.w	r3, r0, #16
 80062ec:	f100 0318 	addeq.w	r3, r0, #24
 80062f0:	e7e6      	b.n	80062c0 <_calloc_r+0x24>
 80062f2:	2100      	movs	r1, #0
 80062f4:	f7fc fb2e 	bl	8002954 <memset>
 80062f8:	4620      	mov	r0, r4
 80062fa:	bd10      	pop	{r4, pc}

080062fc <_fputwc_r>:
 80062fc:	8993      	ldrh	r3, [r2, #12]
 80062fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006302:	460f      	mov	r7, r1
 8006304:	0499      	lsls	r1, r3, #18
 8006306:	4614      	mov	r4, r2
 8006308:	bf5f      	itttt	pl
 800630a:	6e52      	ldrpl	r2, [r2, #100]	; 0x64
 800630c:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 8006310:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8006314:	81a3      	strhpl	r3, [r4, #12]
 8006316:	bf58      	it	pl
 8006318:	6662      	strpl	r2, [r4, #100]	; 0x64
 800631a:	b082      	sub	sp, #8
 800631c:	4680      	mov	r8, r0
 800631e:	f7ff fb47 	bl	80059b0 <__locale_mb_cur_max>
 8006322:	2801      	cmp	r0, #1
 8006324:	d03d      	beq.n	80063a2 <_fputwc_r+0xa6>
 8006326:	463a      	mov	r2, r7
 8006328:	4640      	mov	r0, r8
 800632a:	a901      	add	r1, sp, #4
 800632c:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8006330:	f000 fc9a 	bl	8006c68 <_wcrtomb_r>
 8006334:	1c42      	adds	r2, r0, #1
 8006336:	4606      	mov	r6, r0
 8006338:	d02c      	beq.n	8006394 <_fputwc_r+0x98>
 800633a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800633e:	2800      	cmp	r0, #0
 8006340:	d037      	beq.n	80063b2 <_fputwc_r+0xb6>
 8006342:	2500      	movs	r5, #0
 8006344:	e009      	b.n	800635a <_fputwc_r+0x5e>
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	7019      	strb	r1, [r3, #0]
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	3301      	adds	r3, #1
 800634e:	6023      	str	r3, [r4, #0]
 8006350:	3501      	adds	r5, #1
 8006352:	42b5      	cmp	r5, r6
 8006354:	d22d      	bcs.n	80063b2 <_fputwc_r+0xb6>
 8006356:	ab01      	add	r3, sp, #4
 8006358:	5ce9      	ldrb	r1, [r5, r3]
 800635a:	68a3      	ldr	r3, [r4, #8]
 800635c:	3b01      	subs	r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	60a3      	str	r3, [r4, #8]
 8006362:	daf0      	bge.n	8006346 <_fputwc_r+0x4a>
 8006364:	69a2      	ldr	r2, [r4, #24]
 8006366:	4293      	cmp	r3, r2
 8006368:	db05      	blt.n	8006376 <_fputwc_r+0x7a>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	7019      	strb	r1, [r3, #0]
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	7819      	ldrb	r1, [r3, #0]
 8006372:	290a      	cmp	r1, #10
 8006374:	d1ea      	bne.n	800634c <_fputwc_r+0x50>
 8006376:	4640      	mov	r0, r8
 8006378:	4622      	mov	r2, r4
 800637a:	f000 fc23 	bl	8006bc4 <__swbuf_r>
 800637e:	f1b0 33ff 	subs.w	r3, r0, #4294967295	; 0xffffffff
 8006382:	4258      	negs	r0, r3
 8006384:	4158      	adcs	r0, r3
 8006386:	2800      	cmp	r0, #0
 8006388:	d0e2      	beq.n	8006350 <_fputwc_r+0x54>
 800638a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800638e:	b002      	add	sp, #8
 8006390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006394:	89a3      	ldrh	r3, [r4, #12]
 8006396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800639a:	81a3      	strh	r3, [r4, #12]
 800639c:	b002      	add	sp, #8
 800639e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063a2:	1e7b      	subs	r3, r7, #1
 80063a4:	2bfe      	cmp	r3, #254	; 0xfe
 80063a6:	d8be      	bhi.n	8006326 <_fputwc_r+0x2a>
 80063a8:	b2f9      	uxtb	r1, r7
 80063aa:	4606      	mov	r6, r0
 80063ac:	f88d 1004 	strb.w	r1, [sp, #4]
 80063b0:	e7c7      	b.n	8006342 <_fputwc_r+0x46>
 80063b2:	4638      	mov	r0, r7
 80063b4:	b002      	add	sp, #8
 80063b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063ba:	bf00      	nop

080063bc <_fstat_r>:
 80063bc:	b538      	push	{r3, r4, r5, lr}
 80063be:	f648 341c 	movw	r4, #35612	; 0x8b1c
 80063c2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80063c6:	2300      	movs	r3, #0
 80063c8:	4605      	mov	r5, r0
 80063ca:	4608      	mov	r0, r1
 80063cc:	4611      	mov	r1, r2
 80063ce:	6023      	str	r3, [r4, #0]
 80063d0:	f7fa f9ff 	bl	80007d2 <_fstat>
 80063d4:	1c43      	adds	r3, r0, #1
 80063d6:	d000      	beq.n	80063da <_fstat_r+0x1e>
 80063d8:	bd38      	pop	{r3, r4, r5, pc}
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0fb      	beq.n	80063d8 <_fstat_r+0x1c>
 80063e0:	602b      	str	r3, [r5, #0]
 80063e2:	bd38      	pop	{r3, r4, r5, pc}

080063e4 <__sfvwrite_r>:
 80063e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e8:	6893      	ldr	r3, [r2, #8]
 80063ea:	b083      	sub	sp, #12
 80063ec:	4616      	mov	r6, r2
 80063ee:	4681      	mov	r9, r0
 80063f0:	460c      	mov	r4, r1
 80063f2:	b33b      	cbz	r3, 8006444 <__sfvwrite_r+0x60>
 80063f4:	898b      	ldrh	r3, [r1, #12]
 80063f6:	0719      	lsls	r1, r3, #28
 80063f8:	d528      	bpl.n	800644c <__sfvwrite_r+0x68>
 80063fa:	6922      	ldr	r2, [r4, #16]
 80063fc:	b332      	cbz	r2, 800644c <__sfvwrite_r+0x68>
 80063fe:	f003 0202 	and.w	r2, r3, #2
 8006402:	b292      	uxth	r2, r2
 8006404:	6835      	ldr	r5, [r6, #0]
 8006406:	2a00      	cmp	r2, #0
 8006408:	d02e      	beq.n	8006468 <__sfvwrite_r+0x84>
 800640a:	f04f 0a00 	mov.w	sl, #0
 800640e:	f44f 4b7c 	mov.w	fp, #64512	; 0xfc00
 8006412:	46d0      	mov	r8, sl
 8006414:	f6c7 7bff 	movt	fp, #32767	; 0x7fff
 8006418:	45d8      	cmp	r8, fp
 800641a:	bf34      	ite	cc
 800641c:	4643      	movcc	r3, r8
 800641e:	465b      	movcs	r3, fp
 8006420:	4652      	mov	r2, sl
 8006422:	4648      	mov	r0, r9
 8006424:	f1b8 0f00 	cmp.w	r8, #0
 8006428:	d04f      	beq.n	80064ca <__sfvwrite_r+0xe6>
 800642a:	69e1      	ldr	r1, [r4, #28]
 800642c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800642e:	47b8      	blx	r7
 8006430:	2800      	cmp	r0, #0
 8006432:	dd56      	ble.n	80064e2 <__sfvwrite_r+0xfe>
 8006434:	68b3      	ldr	r3, [r6, #8]
 8006436:	1a1b      	subs	r3, r3, r0
 8006438:	4482      	add	sl, r0
 800643a:	ebc0 0808 	rsb	r8, r0, r8
 800643e:	60b3      	str	r3, [r6, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e9      	bne.n	8006418 <__sfvwrite_r+0x34>
 8006444:	2000      	movs	r0, #0
 8006446:	b003      	add	sp, #12
 8006448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644c:	4648      	mov	r0, r9
 800644e:	4621      	mov	r1, r4
 8006450:	f7fd ffc2 	bl	80043d8 <__swsetup_r>
 8006454:	2800      	cmp	r0, #0
 8006456:	f040 8147 	bne.w	80066e8 <__sfvwrite_r+0x304>
 800645a:	89a3      	ldrh	r3, [r4, #12]
 800645c:	6835      	ldr	r5, [r6, #0]
 800645e:	f003 0202 	and.w	r2, r3, #2
 8006462:	b292      	uxth	r2, r2
 8006464:	2a00      	cmp	r2, #0
 8006466:	d1d0      	bne.n	800640a <__sfvwrite_r+0x26>
 8006468:	f013 0a01 	ands.w	sl, r3, #1
 800646c:	d142      	bne.n	80064f4 <__sfvwrite_r+0x110>
 800646e:	46d0      	mov	r8, sl
 8006470:	f1b8 0f00 	cmp.w	r8, #0
 8006474:	d023      	beq.n	80064be <__sfvwrite_r+0xda>
 8006476:	059a      	lsls	r2, r3, #22
 8006478:	68a7      	ldr	r7, [r4, #8]
 800647a:	d576      	bpl.n	800656a <__sfvwrite_r+0x186>
 800647c:	45b8      	cmp	r8, r7
 800647e:	f0c0 80a4 	bcc.w	80065ca <__sfvwrite_r+0x1e6>
 8006482:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8006486:	f040 80b2 	bne.w	80065ee <__sfvwrite_r+0x20a>
 800648a:	6820      	ldr	r0, [r4, #0]
 800648c:	46bb      	mov	fp, r7
 800648e:	4651      	mov	r1, sl
 8006490:	465a      	mov	r2, fp
 8006492:	f000 f945 	bl	8006720 <memmove>
 8006496:	68a2      	ldr	r2, [r4, #8]
 8006498:	6821      	ldr	r1, [r4, #0]
 800649a:	1bd2      	subs	r2, r2, r7
 800649c:	eb01 030b 	add.w	r3, r1, fp
 80064a0:	60a2      	str	r2, [r4, #8]
 80064a2:	6023      	str	r3, [r4, #0]
 80064a4:	4642      	mov	r2, r8
 80064a6:	68b3      	ldr	r3, [r6, #8]
 80064a8:	1a9b      	subs	r3, r3, r2
 80064aa:	4492      	add	sl, r2
 80064ac:	ebc2 0808 	rsb	r8, r2, r8
 80064b0:	60b3      	str	r3, [r6, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d0c6      	beq.n	8006444 <__sfvwrite_r+0x60>
 80064b6:	89a3      	ldrh	r3, [r4, #12]
 80064b8:	f1b8 0f00 	cmp.w	r8, #0
 80064bc:	d1db      	bne.n	8006476 <__sfvwrite_r+0x92>
 80064be:	f8d5 a000 	ldr.w	sl, [r5]
 80064c2:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80064c6:	3508      	adds	r5, #8
 80064c8:	e7d2      	b.n	8006470 <__sfvwrite_r+0x8c>
 80064ca:	f8d5 a000 	ldr.w	sl, [r5]
 80064ce:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80064d2:	3508      	adds	r5, #8
 80064d4:	e7a0      	b.n	8006418 <__sfvwrite_r+0x34>
 80064d6:	4648      	mov	r0, r9
 80064d8:	4621      	mov	r1, r4
 80064da:	f7ff f92d 	bl	8005738 <_fflush_r>
 80064de:	2800      	cmp	r0, #0
 80064e0:	d059      	beq.n	8006596 <__sfvwrite_r+0x1b2>
 80064e2:	89a3      	ldrh	r3, [r4, #12]
 80064e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064ec:	81a3      	strh	r3, [r4, #12]
 80064ee:	b003      	add	sp, #12
 80064f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f4:	4692      	mov	sl, r2
 80064f6:	9201      	str	r2, [sp, #4]
 80064f8:	4693      	mov	fp, r2
 80064fa:	4690      	mov	r8, r2
 80064fc:	f1b8 0f00 	cmp.w	r8, #0
 8006500:	d02b      	beq.n	800655a <__sfvwrite_r+0x176>
 8006502:	9f01      	ldr	r7, [sp, #4]
 8006504:	2f00      	cmp	r7, #0
 8006506:	d064      	beq.n	80065d2 <__sfvwrite_r+0x1ee>
 8006508:	6820      	ldr	r0, [r4, #0]
 800650a:	6921      	ldr	r1, [r4, #16]
 800650c:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8006510:	6962      	ldr	r2, [r4, #20]
 8006512:	45c2      	cmp	sl, r8
 8006514:	bf34      	ite	cc
 8006516:	4653      	movcc	r3, sl
 8006518:	4643      	movcs	r3, r8
 800651a:	4288      	cmp	r0, r1
 800651c:	461f      	mov	r7, r3
 800651e:	d903      	bls.n	8006528 <__sfvwrite_r+0x144>
 8006520:	4494      	add	ip, r2
 8006522:	4563      	cmp	r3, ip
 8006524:	f300 80ae 	bgt.w	8006684 <__sfvwrite_r+0x2a0>
 8006528:	4293      	cmp	r3, r2
 800652a:	db36      	blt.n	800659a <__sfvwrite_r+0x1b6>
 800652c:	4613      	mov	r3, r2
 800652e:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006530:	69e1      	ldr	r1, [r4, #28]
 8006532:	4648      	mov	r0, r9
 8006534:	465a      	mov	r2, fp
 8006536:	47b8      	blx	r7
 8006538:	1e07      	subs	r7, r0, #0
 800653a:	ddd2      	ble.n	80064e2 <__sfvwrite_r+0xfe>
 800653c:	ebba 0a07 	subs.w	sl, sl, r7
 8006540:	d03a      	beq.n	80065b8 <__sfvwrite_r+0x1d4>
 8006542:	68b3      	ldr	r3, [r6, #8]
 8006544:	1bdb      	subs	r3, r3, r7
 8006546:	44bb      	add	fp, r7
 8006548:	ebc7 0808 	rsb	r8, r7, r8
 800654c:	60b3      	str	r3, [r6, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	f43f af78 	beq.w	8006444 <__sfvwrite_r+0x60>
 8006554:	f1b8 0f00 	cmp.w	r8, #0
 8006558:	d1d3      	bne.n	8006502 <__sfvwrite_r+0x11e>
 800655a:	2700      	movs	r7, #0
 800655c:	f8d5 b000 	ldr.w	fp, [r5]
 8006560:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8006564:	9701      	str	r7, [sp, #4]
 8006566:	3508      	adds	r5, #8
 8006568:	e7c8      	b.n	80064fc <__sfvwrite_r+0x118>
 800656a:	6820      	ldr	r0, [r4, #0]
 800656c:	6923      	ldr	r3, [r4, #16]
 800656e:	4298      	cmp	r0, r3
 8006570:	d802      	bhi.n	8006578 <__sfvwrite_r+0x194>
 8006572:	6963      	ldr	r3, [r4, #20]
 8006574:	4598      	cmp	r8, r3
 8006576:	d272      	bcs.n	800665e <__sfvwrite_r+0x27a>
 8006578:	45b8      	cmp	r8, r7
 800657a:	bf38      	it	cc
 800657c:	4647      	movcc	r7, r8
 800657e:	463a      	mov	r2, r7
 8006580:	4651      	mov	r1, sl
 8006582:	f000 f8cd 	bl	8006720 <memmove>
 8006586:	68a3      	ldr	r3, [r4, #8]
 8006588:	6822      	ldr	r2, [r4, #0]
 800658a:	1bdb      	subs	r3, r3, r7
 800658c:	443a      	add	r2, r7
 800658e:	60a3      	str	r3, [r4, #8]
 8006590:	6022      	str	r2, [r4, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d09f      	beq.n	80064d6 <__sfvwrite_r+0xf2>
 8006596:	463a      	mov	r2, r7
 8006598:	e785      	b.n	80064a6 <__sfvwrite_r+0xc2>
 800659a:	461a      	mov	r2, r3
 800659c:	4659      	mov	r1, fp
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	f000 f8be 	bl	8006720 <memmove>
 80065a4:	9b00      	ldr	r3, [sp, #0]
 80065a6:	68a1      	ldr	r1, [r4, #8]
 80065a8:	6822      	ldr	r2, [r4, #0]
 80065aa:	1ac9      	subs	r1, r1, r3
 80065ac:	ebba 0a07 	subs.w	sl, sl, r7
 80065b0:	4413      	add	r3, r2
 80065b2:	60a1      	str	r1, [r4, #8]
 80065b4:	6023      	str	r3, [r4, #0]
 80065b6:	d1c4      	bne.n	8006542 <__sfvwrite_r+0x15e>
 80065b8:	4648      	mov	r0, r9
 80065ba:	4621      	mov	r1, r4
 80065bc:	f7ff f8bc 	bl	8005738 <_fflush_r>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d18e      	bne.n	80064e2 <__sfvwrite_r+0xfe>
 80065c4:	f8cd a004 	str.w	sl, [sp, #4]
 80065c8:	e7bb      	b.n	8006542 <__sfvwrite_r+0x15e>
 80065ca:	6820      	ldr	r0, [r4, #0]
 80065cc:	4647      	mov	r7, r8
 80065ce:	46c3      	mov	fp, r8
 80065d0:	e75d      	b.n	800648e <__sfvwrite_r+0xaa>
 80065d2:	4658      	mov	r0, fp
 80065d4:	210a      	movs	r1, #10
 80065d6:	4642      	mov	r2, r8
 80065d8:	f7ff fa7e 	bl	8005ad8 <memchr>
 80065dc:	2800      	cmp	r0, #0
 80065de:	d07e      	beq.n	80066de <__sfvwrite_r+0x2fa>
 80065e0:	f100 0a01 	add.w	sl, r0, #1
 80065e4:	2701      	movs	r7, #1
 80065e6:	ebcb 0a0a 	rsb	sl, fp, sl
 80065ea:	9701      	str	r7, [sp, #4]
 80065ec:	e78c      	b.n	8006508 <__sfvwrite_r+0x124>
 80065ee:	6822      	ldr	r2, [r4, #0]
 80065f0:	6921      	ldr	r1, [r4, #16]
 80065f2:	6967      	ldr	r7, [r4, #20]
 80065f4:	ebc1 0c02 	rsb	ip, r1, r2
 80065f8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80065fc:	f10c 0201 	add.w	r2, ip, #1
 8006600:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8006604:	4442      	add	r2, r8
 8006606:	107f      	asrs	r7, r7, #1
 8006608:	4297      	cmp	r7, r2
 800660a:	bf34      	ite	cc
 800660c:	4617      	movcc	r7, r2
 800660e:	463a      	movcs	r2, r7
 8006610:	055b      	lsls	r3, r3, #21
 8006612:	d54d      	bpl.n	80066b0 <__sfvwrite_r+0x2cc>
 8006614:	4611      	mov	r1, r2
 8006616:	4648      	mov	r0, r9
 8006618:	f8cd c000 	str.w	ip, [sp]
 800661c:	f7fb fe4e 	bl	80022bc <_malloc_r>
 8006620:	f8dd c000 	ldr.w	ip, [sp]
 8006624:	4683      	mov	fp, r0
 8006626:	2800      	cmp	r0, #0
 8006628:	d061      	beq.n	80066ee <__sfvwrite_r+0x30a>
 800662a:	4662      	mov	r2, ip
 800662c:	6921      	ldr	r1, [r4, #16]
 800662e:	f8cd c000 	str.w	ip, [sp]
 8006632:	f7fc f8f5 	bl	8002820 <memcpy>
 8006636:	89a2      	ldrh	r2, [r4, #12]
 8006638:	f8dd c000 	ldr.w	ip, [sp]
 800663c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8006640:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006644:	81a2      	strh	r2, [r4, #12]
 8006646:	eb0b 000c 	add.w	r0, fp, ip
 800664a:	ebcc 0207 	rsb	r2, ip, r7
 800664e:	f8c4 b010 	str.w	fp, [r4, #16]
 8006652:	6167      	str	r7, [r4, #20]
 8006654:	6020      	str	r0, [r4, #0]
 8006656:	60a2      	str	r2, [r4, #8]
 8006658:	4647      	mov	r7, r8
 800665a:	46c3      	mov	fp, r8
 800665c:	e717      	b.n	800648e <__sfvwrite_r+0xaa>
 800665e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006662:	4590      	cmp	r8, r2
 8006664:	bf38      	it	cc
 8006666:	4642      	movcc	r2, r8
 8006668:	fb92 f2f3 	sdiv	r2, r2, r3
 800666c:	fb02 f303 	mul.w	r3, r2, r3
 8006670:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006672:	69e1      	ldr	r1, [r4, #28]
 8006674:	4648      	mov	r0, r9
 8006676:	4652      	mov	r2, sl
 8006678:	47b8      	blx	r7
 800667a:	2800      	cmp	r0, #0
 800667c:	f77f af31 	ble.w	80064e2 <__sfvwrite_r+0xfe>
 8006680:	4602      	mov	r2, r0
 8006682:	e710      	b.n	80064a6 <__sfvwrite_r+0xc2>
 8006684:	4662      	mov	r2, ip
 8006686:	4659      	mov	r1, fp
 8006688:	f8cd c000 	str.w	ip, [sp]
 800668c:	f000 f848 	bl	8006720 <memmove>
 8006690:	f8dd c000 	ldr.w	ip, [sp]
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	4463      	add	r3, ip
 8006698:	6023      	str	r3, [r4, #0]
 800669a:	4648      	mov	r0, r9
 800669c:	4621      	mov	r1, r4
 800669e:	f7ff f84b 	bl	8005738 <_fflush_r>
 80066a2:	f8dd c000 	ldr.w	ip, [sp]
 80066a6:	2800      	cmp	r0, #0
 80066a8:	f47f af1b 	bne.w	80064e2 <__sfvwrite_r+0xfe>
 80066ac:	4667      	mov	r7, ip
 80066ae:	e745      	b.n	800653c <__sfvwrite_r+0x158>
 80066b0:	4648      	mov	r0, r9
 80066b2:	f8cd c000 	str.w	ip, [sp]
 80066b6:	f000 f895 	bl	80067e4 <_realloc_r>
 80066ba:	f8dd c000 	ldr.w	ip, [sp]
 80066be:	4683      	mov	fp, r0
 80066c0:	2800      	cmp	r0, #0
 80066c2:	d1c0      	bne.n	8006646 <__sfvwrite_r+0x262>
 80066c4:	4648      	mov	r0, r9
 80066c6:	6921      	ldr	r1, [r4, #16]
 80066c8:	f7ff f89e 	bl	8005808 <_free_r>
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066d2:	041b      	lsls	r3, r3, #16
 80066d4:	220c      	movs	r2, #12
 80066d6:	0c1b      	lsrs	r3, r3, #16
 80066d8:	f8c9 2000 	str.w	r2, [r9]
 80066dc:	e702      	b.n	80064e4 <__sfvwrite_r+0x100>
 80066de:	2701      	movs	r7, #1
 80066e0:	f108 0a01 	add.w	sl, r8, #1
 80066e4:	9701      	str	r7, [sp, #4]
 80066e6:	e70f      	b.n	8006508 <__sfvwrite_r+0x124>
 80066e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066ec:	e6ab      	b.n	8006446 <__sfvwrite_r+0x62>
 80066ee:	230c      	movs	r3, #12
 80066f0:	f8c9 3000 	str.w	r3, [r9]
 80066f4:	89a3      	ldrh	r3, [r4, #12]
 80066f6:	e6f5      	b.n	80064e4 <__sfvwrite_r+0x100>

080066f8 <_isatty_r>:
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	f648 341c 	movw	r4, #35612	; 0x8b1c
 80066fe:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8006702:	2300      	movs	r3, #0
 8006704:	4605      	mov	r5, r0
 8006706:	4608      	mov	r0, r1
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	f000 faf1 	bl	8006cf0 <_isatty>
 800670e:	1c43      	adds	r3, r0, #1
 8006710:	d000      	beq.n	8006714 <_isatty_r+0x1c>
 8006712:	bd38      	pop	{r3, r4, r5, pc}
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d0fb      	beq.n	8006712 <_isatty_r+0x1a>
 800671a:	602b      	str	r3, [r5, #0]
 800671c:	bd38      	pop	{r3, r4, r5, pc}
 800671e:	bf00      	nop

08006720 <memmove>:
 8006720:	4288      	cmp	r0, r1
 8006722:	b4f0      	push	{r4, r5, r6, r7}
 8006724:	d910      	bls.n	8006748 <memmove+0x28>
 8006726:	188c      	adds	r4, r1, r2
 8006728:	42a0      	cmp	r0, r4
 800672a:	d20d      	bcs.n	8006748 <memmove+0x28>
 800672c:	1885      	adds	r5, r0, r2
 800672e:	1e53      	subs	r3, r2, #1
 8006730:	b142      	cbz	r2, 8006744 <memmove+0x24>
 8006732:	4621      	mov	r1, r4
 8006734:	462a      	mov	r2, r5
 8006736:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 800673a:	3b01      	subs	r3, #1
 800673c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006740:	1c5c      	adds	r4, r3, #1
 8006742:	d1f8      	bne.n	8006736 <memmove+0x16>
 8006744:	bcf0      	pop	{r4, r5, r6, r7}
 8006746:	4770      	bx	lr
 8006748:	2a0f      	cmp	r2, #15
 800674a:	d940      	bls.n	80067ce <memmove+0xae>
 800674c:	ea40 0301 	orr.w	r3, r0, r1
 8006750:	079b      	lsls	r3, r3, #30
 8006752:	d140      	bne.n	80067d6 <memmove+0xb6>
 8006754:	f1a2 0710 	sub.w	r7, r2, #16
 8006758:	093f      	lsrs	r7, r7, #4
 800675a:	eb00 1607 	add.w	r6, r0, r7, lsl #4
 800675e:	3610      	adds	r6, #16
 8006760:	460c      	mov	r4, r1
 8006762:	4603      	mov	r3, r0
 8006764:	6825      	ldr	r5, [r4, #0]
 8006766:	601d      	str	r5, [r3, #0]
 8006768:	6865      	ldr	r5, [r4, #4]
 800676a:	605d      	str	r5, [r3, #4]
 800676c:	68a5      	ldr	r5, [r4, #8]
 800676e:	609d      	str	r5, [r3, #8]
 8006770:	68e5      	ldr	r5, [r4, #12]
 8006772:	3310      	adds	r3, #16
 8006774:	f843 5c04 	str.w	r5, [r3, #-4]
 8006778:	42b3      	cmp	r3, r6
 800677a:	f104 0410 	add.w	r4, r4, #16
 800677e:	d1f1      	bne.n	8006764 <memmove+0x44>
 8006780:	1c7b      	adds	r3, r7, #1
 8006782:	f002 0c0f 	and.w	ip, r2, #15
 8006786:	011b      	lsls	r3, r3, #4
 8006788:	f1bc 0f03 	cmp.w	ip, #3
 800678c:	4419      	add	r1, r3
 800678e:	4403      	add	r3, r0
 8006790:	d923      	bls.n	80067da <memmove+0xba>
 8006792:	460e      	mov	r6, r1
 8006794:	461d      	mov	r5, r3
 8006796:	4664      	mov	r4, ip
 8006798:	f856 7b04 	ldr.w	r7, [r6], #4
 800679c:	3c04      	subs	r4, #4
 800679e:	2c03      	cmp	r4, #3
 80067a0:	f845 7b04 	str.w	r7, [r5], #4
 80067a4:	d8f8      	bhi.n	8006798 <memmove+0x78>
 80067a6:	f1ac 0404 	sub.w	r4, ip, #4
 80067aa:	f024 0403 	bic.w	r4, r4, #3
 80067ae:	3404      	adds	r4, #4
 80067b0:	f002 0203 	and.w	r2, r2, #3
 80067b4:	4423      	add	r3, r4
 80067b6:	4421      	add	r1, r4
 80067b8:	2a00      	cmp	r2, #0
 80067ba:	d0c3      	beq.n	8006744 <memmove+0x24>
 80067bc:	441a      	add	r2, r3
 80067be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067c2:	f803 4b01 	strb.w	r4, [r3], #1
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d1f9      	bne.n	80067be <memmove+0x9e>
 80067ca:	bcf0      	pop	{r4, r5, r6, r7}
 80067cc:	4770      	bx	lr
 80067ce:	4603      	mov	r3, r0
 80067d0:	2a00      	cmp	r2, #0
 80067d2:	d1f3      	bne.n	80067bc <memmove+0x9c>
 80067d4:	e7b6      	b.n	8006744 <memmove+0x24>
 80067d6:	4603      	mov	r3, r0
 80067d8:	e7f0      	b.n	80067bc <memmove+0x9c>
 80067da:	4662      	mov	r2, ip
 80067dc:	2a00      	cmp	r2, #0
 80067de:	d1ed      	bne.n	80067bc <memmove+0x9c>
 80067e0:	e7b0      	b.n	8006744 <memmove+0x24>
 80067e2:	bf00      	nop

080067e4 <_realloc_r>:
 80067e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e8:	460c      	mov	r4, r1
 80067ea:	b083      	sub	sp, #12
 80067ec:	4690      	mov	r8, r2
 80067ee:	4681      	mov	r9, r0
 80067f0:	2900      	cmp	r1, #0
 80067f2:	f000 8124 	beq.w	8006a3e <_realloc_r+0x25a>
 80067f6:	f7fc f8f7 	bl	80029e8 <__malloc_lock>
 80067fa:	f108 060b 	add.w	r6, r8, #11
 80067fe:	2e16      	cmp	r6, #22
 8006800:	bf8c      	ite	hi
 8006802:	f026 0607 	bichi.w	r6, r6, #7
 8006806:	2210      	movls	r2, #16
 8006808:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800680c:	bf8d      	iteet	hi
 800680e:	0ff3      	lsrhi	r3, r6, #31
 8006810:	4616      	movls	r6, r2
 8006812:	2300      	movls	r3, #0
 8006814:	4632      	movhi	r2, r6
 8006816:	4546      	cmp	r6, r8
 8006818:	bf38      	it	cc
 800681a:	f043 0301 	orrcc.w	r3, r3, #1
 800681e:	f02c 0503 	bic.w	r5, ip, #3
 8006822:	f1a4 0708 	sub.w	r7, r4, #8
 8006826:	2b00      	cmp	r3, #0
 8006828:	f040 810f 	bne.w	8006a4a <_realloc_r+0x266>
 800682c:	4295      	cmp	r5, r2
 800682e:	db15      	blt.n	800685c <_realloc_r+0x78>
 8006830:	4660      	mov	r0, ip
 8006832:	1bab      	subs	r3, r5, r6
 8006834:	2b0f      	cmp	r3, #15
 8006836:	f000 0c01 	and.w	ip, r0, #1
 800683a:	f200 80c6 	bhi.w	80069ca <_realloc_r+0x1e6>
 800683e:	ea4c 0305 	orr.w	r3, ip, r5
 8006842:	443d      	add	r5, r7
 8006844:	607b      	str	r3, [r7, #4]
 8006846:	686b      	ldr	r3, [r5, #4]
 8006848:	f043 0301 	orr.w	r3, r3, #1
 800684c:	606b      	str	r3, [r5, #4]
 800684e:	4648      	mov	r0, r9
 8006850:	f7fc f8cc 	bl	80029ec <__malloc_unlock>
 8006854:	4620      	mov	r0, r4
 8006856:	b003      	add	sp, #12
 8006858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800685c:	f240 4a54 	movw	sl, #1108	; 0x454
 8006860:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 8006864:	1979      	adds	r1, r7, r5
 8006866:	f8da 0008 	ldr.w	r0, [sl, #8]
 800686a:	4288      	cmp	r0, r1
 800686c:	f000 80f2 	beq.w	8006a54 <_realloc_r+0x270>
 8006870:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8006874:	f02e 0b01 	bic.w	fp, lr, #1
 8006878:	448b      	add	fp, r1
 800687a:	f8db b004 	ldr.w	fp, [fp, #4]
 800687e:	f01b 0f01 	tst.w	fp, #1
 8006882:	bf1c      	itt	ne
 8006884:	469e      	movne	lr, r3
 8006886:	4671      	movne	r1, lr
 8006888:	d054      	beq.n	8006934 <_realloc_r+0x150>
 800688a:	f01c 0f01 	tst.w	ip, #1
 800688e:	f040 80ad 	bne.w	80069ec <_realloc_r+0x208>
 8006892:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8006896:	ebc3 0b07 	rsb	fp, r3, r7
 800689a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800689e:	f023 0303 	bic.w	r3, r3, #3
 80068a2:	442b      	add	r3, r5
 80068a4:	2900      	cmp	r1, #0
 80068a6:	d052      	beq.n	800694e <_realloc_r+0x16a>
 80068a8:	4281      	cmp	r1, r0
 80068aa:	f000 811f 	beq.w	8006aec <_realloc_r+0x308>
 80068ae:	449e      	add	lr, r3
 80068b0:	4596      	cmp	lr, r2
 80068b2:	db4c      	blt.n	800694e <_realloc_r+0x16a>
 80068b4:	68cb      	ldr	r3, [r1, #12]
 80068b6:	688a      	ldr	r2, [r1, #8]
 80068b8:	465f      	mov	r7, fp
 80068ba:	60d3      	str	r3, [r2, #12]
 80068bc:	609a      	str	r2, [r3, #8]
 80068be:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80068c2:	f8db 300c 	ldr.w	r3, [fp, #12]
 80068c6:	1f2a      	subs	r2, r5, #4
 80068c8:	2a24      	cmp	r2, #36	; 0x24
 80068ca:	60cb      	str	r3, [r1, #12]
 80068cc:	6099      	str	r1, [r3, #8]
 80068ce:	f200 8165 	bhi.w	8006b9c <_realloc_r+0x3b8>
 80068d2:	2a13      	cmp	r2, #19
 80068d4:	bf98      	it	ls
 80068d6:	463b      	movls	r3, r7
 80068d8:	d920      	bls.n	800691c <_realloc_r+0x138>
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	f8cb 3008 	str.w	r3, [fp, #8]
 80068e0:	6863      	ldr	r3, [r4, #4]
 80068e2:	2a1b      	cmp	r2, #27
 80068e4:	f8cb 300c 	str.w	r3, [fp, #12]
 80068e8:	bf9c      	itt	ls
 80068ea:	3408      	addls	r4, #8
 80068ec:	f10b 0310 	addls.w	r3, fp, #16
 80068f0:	d914      	bls.n	800691c <_realloc_r+0x138>
 80068f2:	68a3      	ldr	r3, [r4, #8]
 80068f4:	f8cb 3010 	str.w	r3, [fp, #16]
 80068f8:	68e3      	ldr	r3, [r4, #12]
 80068fa:	2a24      	cmp	r2, #36	; 0x24
 80068fc:	f8cb 3014 	str.w	r3, [fp, #20]
 8006900:	bf03      	ittte	eq
 8006902:	6923      	ldreq	r3, [r4, #16]
 8006904:	f8cb 3018 	streq.w	r3, [fp, #24]
 8006908:	6962      	ldreq	r2, [r4, #20]
 800690a:	3410      	addne	r4, #16
 800690c:	bf11      	iteee	ne
 800690e:	f10b 0318 	addne.w	r3, fp, #24
 8006912:	f10b 0320 	addeq.w	r3, fp, #32
 8006916:	f8cb 201c 	streq.w	r2, [fp, #28]
 800691a:	3418      	addeq	r4, #24
 800691c:	6822      	ldr	r2, [r4, #0]
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	6862      	ldr	r2, [r4, #4]
 8006922:	605a      	str	r2, [r3, #4]
 8006924:	68a2      	ldr	r2, [r4, #8]
 8006926:	609a      	str	r2, [r3, #8]
 8006928:	463c      	mov	r4, r7
 800692a:	4675      	mov	r5, lr
 800692c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8006930:	465f      	mov	r7, fp
 8006932:	e77e      	b.n	8006832 <_realloc_r+0x4e>
 8006934:	f02e 0e03 	bic.w	lr, lr, #3
 8006938:	eb0e 0305 	add.w	r3, lr, r5
 800693c:	4293      	cmp	r3, r2
 800693e:	dba4      	blt.n	800688a <_realloc_r+0xa6>
 8006940:	68ca      	ldr	r2, [r1, #12]
 8006942:	6889      	ldr	r1, [r1, #8]
 8006944:	4660      	mov	r0, ip
 8006946:	60ca      	str	r2, [r1, #12]
 8006948:	461d      	mov	r5, r3
 800694a:	6091      	str	r1, [r2, #8]
 800694c:	e771      	b.n	8006832 <_realloc_r+0x4e>
 800694e:	4293      	cmp	r3, r2
 8006950:	db4c      	blt.n	80069ec <_realloc_r+0x208>
 8006952:	465f      	mov	r7, fp
 8006954:	f8db 100c 	ldr.w	r1, [fp, #12]
 8006958:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800695c:	1f2a      	subs	r2, r5, #4
 800695e:	2a24      	cmp	r2, #36	; 0x24
 8006960:	60c1      	str	r1, [r0, #12]
 8006962:	6088      	str	r0, [r1, #8]
 8006964:	f200 80b4 	bhi.w	8006ad0 <_realloc_r+0x2ec>
 8006968:	2a13      	cmp	r2, #19
 800696a:	bf98      	it	ls
 800696c:	463a      	movls	r2, r7
 800696e:	d920      	bls.n	80069b2 <_realloc_r+0x1ce>
 8006970:	6821      	ldr	r1, [r4, #0]
 8006972:	f8cb 1008 	str.w	r1, [fp, #8]
 8006976:	6861      	ldr	r1, [r4, #4]
 8006978:	2a1b      	cmp	r2, #27
 800697a:	f8cb 100c 	str.w	r1, [fp, #12]
 800697e:	bf9c      	itt	ls
 8006980:	3408      	addls	r4, #8
 8006982:	f10b 0210 	addls.w	r2, fp, #16
 8006986:	d914      	bls.n	80069b2 <_realloc_r+0x1ce>
 8006988:	68a1      	ldr	r1, [r4, #8]
 800698a:	f8cb 1010 	str.w	r1, [fp, #16]
 800698e:	68e1      	ldr	r1, [r4, #12]
 8006990:	2a24      	cmp	r2, #36	; 0x24
 8006992:	f8cb 1014 	str.w	r1, [fp, #20]
 8006996:	bf03      	ittte	eq
 8006998:	6922      	ldreq	r2, [r4, #16]
 800699a:	f8cb 2018 	streq.w	r2, [fp, #24]
 800699e:	6961      	ldreq	r1, [r4, #20]
 80069a0:	3410      	addne	r4, #16
 80069a2:	bf11      	iteee	ne
 80069a4:	f10b 0218 	addne.w	r2, fp, #24
 80069a8:	f10b 0220 	addeq.w	r2, fp, #32
 80069ac:	f8cb 101c 	streq.w	r1, [fp, #28]
 80069b0:	3418      	addeq	r4, #24
 80069b2:	6821      	ldr	r1, [r4, #0]
 80069b4:	6011      	str	r1, [r2, #0]
 80069b6:	6861      	ldr	r1, [r4, #4]
 80069b8:	6051      	str	r1, [r2, #4]
 80069ba:	68a1      	ldr	r1, [r4, #8]
 80069bc:	6091      	str	r1, [r2, #8]
 80069be:	463c      	mov	r4, r7
 80069c0:	461d      	mov	r5, r3
 80069c2:	f8db 0004 	ldr.w	r0, [fp, #4]
 80069c6:	465f      	mov	r7, fp
 80069c8:	e733      	b.n	8006832 <_realloc_r+0x4e>
 80069ca:	19b9      	adds	r1, r7, r6
 80069cc:	f043 0201 	orr.w	r2, r3, #1
 80069d0:	ea4c 0606 	orr.w	r6, ip, r6
 80069d4:	440b      	add	r3, r1
 80069d6:	607e      	str	r6, [r7, #4]
 80069d8:	604a      	str	r2, [r1, #4]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	f042 0201 	orr.w	r2, r2, #1
 80069e0:	3108      	adds	r1, #8
 80069e2:	605a      	str	r2, [r3, #4]
 80069e4:	4648      	mov	r0, r9
 80069e6:	f7fe ff0f 	bl	8005808 <_free_r>
 80069ea:	e730      	b.n	800684e <_realloc_r+0x6a>
 80069ec:	4641      	mov	r1, r8
 80069ee:	4648      	mov	r0, r9
 80069f0:	f7fb fc64 	bl	80022bc <_malloc_r>
 80069f4:	4680      	mov	r8, r0
 80069f6:	b1d8      	cbz	r0, 8006a30 <_realloc_r+0x24c>
 80069f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80069fc:	f023 0201 	bic.w	r2, r3, #1
 8006a00:	443a      	add	r2, r7
 8006a02:	f1a0 0108 	sub.w	r1, r0, #8
 8006a06:	4291      	cmp	r1, r2
 8006a08:	f000 80c1 	beq.w	8006b8e <_realloc_r+0x3aa>
 8006a0c:	1f2a      	subs	r2, r5, #4
 8006a0e:	2a24      	cmp	r2, #36	; 0x24
 8006a10:	d868      	bhi.n	8006ae4 <_realloc_r+0x300>
 8006a12:	2a13      	cmp	r2, #19
 8006a14:	bf9c      	itt	ls
 8006a16:	4603      	movls	r3, r0
 8006a18:	4622      	movls	r2, r4
 8006a1a:	d83a      	bhi.n	8006a92 <_realloc_r+0x2ae>
 8006a1c:	6811      	ldr	r1, [r2, #0]
 8006a1e:	6019      	str	r1, [r3, #0]
 8006a20:	6851      	ldr	r1, [r2, #4]
 8006a22:	6059      	str	r1, [r3, #4]
 8006a24:	6892      	ldr	r2, [r2, #8]
 8006a26:	609a      	str	r2, [r3, #8]
 8006a28:	4621      	mov	r1, r4
 8006a2a:	4648      	mov	r0, r9
 8006a2c:	f7fe feec 	bl	8005808 <_free_r>
 8006a30:	4648      	mov	r0, r9
 8006a32:	f7fb ffdb 	bl	80029ec <__malloc_unlock>
 8006a36:	4640      	mov	r0, r8
 8006a38:	b003      	add	sp, #12
 8006a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3e:	4611      	mov	r1, r2
 8006a40:	b003      	add	sp, #12
 8006a42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a46:	f7fb bc39 	b.w	80022bc <_malloc_r>
 8006a4a:	230c      	movs	r3, #12
 8006a4c:	f8c9 3000 	str.w	r3, [r9]
 8006a50:	2000      	movs	r0, #0
 8006a52:	e700      	b.n	8006856 <_realloc_r+0x72>
 8006a54:	6843      	ldr	r3, [r0, #4]
 8006a56:	f023 0e03 	bic.w	lr, r3, #3
 8006a5a:	f106 0110 	add.w	r1, r6, #16
 8006a5e:	eb0e 0305 	add.w	r3, lr, r5
 8006a62:	428b      	cmp	r3, r1
 8006a64:	bfb8      	it	lt
 8006a66:	4601      	movlt	r1, r0
 8006a68:	f6ff af0f 	blt.w	800688a <_realloc_r+0xa6>
 8006a6c:	4437      	add	r7, r6
 8006a6e:	1b9b      	subs	r3, r3, r6
 8006a70:	f043 0301 	orr.w	r3, r3, #1
 8006a74:	f8ca 7008 	str.w	r7, [sl, #8]
 8006a78:	607b      	str	r3, [r7, #4]
 8006a7a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	431e      	orrs	r6, r3
 8006a84:	4648      	mov	r0, r9
 8006a86:	f844 6c04 	str.w	r6, [r4, #-4]
 8006a8a:	f7fb ffaf 	bl	80029ec <__malloc_unlock>
 8006a8e:	4620      	mov	r0, r4
 8006a90:	e6e1      	b.n	8006856 <_realloc_r+0x72>
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	6003      	str	r3, [r0, #0]
 8006a96:	6863      	ldr	r3, [r4, #4]
 8006a98:	2a1b      	cmp	r2, #27
 8006a9a:	6043      	str	r3, [r0, #4]
 8006a9c:	bf9c      	itt	ls
 8006a9e:	f104 0208 	addls.w	r2, r4, #8
 8006aa2:	f100 0308 	addls.w	r3, r0, #8
 8006aa6:	d9b9      	bls.n	8006a1c <_realloc_r+0x238>
 8006aa8:	68a3      	ldr	r3, [r4, #8]
 8006aaa:	6083      	str	r3, [r0, #8]
 8006aac:	68e3      	ldr	r3, [r4, #12]
 8006aae:	2a24      	cmp	r2, #36	; 0x24
 8006ab0:	60c3      	str	r3, [r0, #12]
 8006ab2:	bf03      	ittte	eq
 8006ab4:	6923      	ldreq	r3, [r4, #16]
 8006ab6:	6103      	streq	r3, [r0, #16]
 8006ab8:	6962      	ldreq	r2, [r4, #20]
 8006aba:	f100 0310 	addne.w	r3, r0, #16
 8006abe:	bf09      	itett	eq
 8006ac0:	6142      	streq	r2, [r0, #20]
 8006ac2:	f104 0210 	addne.w	r2, r4, #16
 8006ac6:	f100 0318 	addeq.w	r3, r0, #24
 8006aca:	f104 0218 	addeq.w	r2, r4, #24
 8006ace:	e7a5      	b.n	8006a1c <_realloc_r+0x238>
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	461d      	mov	r5, r3
 8006ad6:	463c      	mov	r4, r7
 8006ad8:	f7ff fe22 	bl	8006720 <memmove>
 8006adc:	465f      	mov	r7, fp
 8006ade:	f8db 0004 	ldr.w	r0, [fp, #4]
 8006ae2:	e6a6      	b.n	8006832 <_realloc_r+0x4e>
 8006ae4:	4621      	mov	r1, r4
 8006ae6:	f7ff fe1b 	bl	8006720 <memmove>
 8006aea:	e79d      	b.n	8006a28 <_realloc_r+0x244>
 8006aec:	eb0e 0c03 	add.w	ip, lr, r3
 8006af0:	f106 0110 	add.w	r1, r6, #16
 8006af4:	458c      	cmp	ip, r1
 8006af6:	f6ff af2a 	blt.w	800694e <_realloc_r+0x16a>
 8006afa:	465f      	mov	r7, fp
 8006afc:	f8db 300c 	ldr.w	r3, [fp, #12]
 8006b00:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8006b04:	1f2a      	subs	r2, r5, #4
 8006b06:	2a24      	cmp	r2, #36	; 0x24
 8006b08:	60cb      	str	r3, [r1, #12]
 8006b0a:	6099      	str	r1, [r3, #8]
 8006b0c:	d850      	bhi.n	8006bb0 <_realloc_r+0x3cc>
 8006b0e:	2a13      	cmp	r2, #19
 8006b10:	bf98      	it	ls
 8006b12:	463b      	movls	r3, r7
 8006b14:	d920      	bls.n	8006b58 <_realloc_r+0x374>
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	f8cb 3008 	str.w	r3, [fp, #8]
 8006b1c:	6863      	ldr	r3, [r4, #4]
 8006b1e:	2a1b      	cmp	r2, #27
 8006b20:	f8cb 300c 	str.w	r3, [fp, #12]
 8006b24:	bf9c      	itt	ls
 8006b26:	3408      	addls	r4, #8
 8006b28:	f10b 0310 	addls.w	r3, fp, #16
 8006b2c:	d914      	bls.n	8006b58 <_realloc_r+0x374>
 8006b2e:	68a3      	ldr	r3, [r4, #8]
 8006b30:	f8cb 3010 	str.w	r3, [fp, #16]
 8006b34:	68e3      	ldr	r3, [r4, #12]
 8006b36:	2a24      	cmp	r2, #36	; 0x24
 8006b38:	f8cb 3014 	str.w	r3, [fp, #20]
 8006b3c:	bf03      	ittte	eq
 8006b3e:	6923      	ldreq	r3, [r4, #16]
 8006b40:	f8cb 3018 	streq.w	r3, [fp, #24]
 8006b44:	6962      	ldreq	r2, [r4, #20]
 8006b46:	3410      	addne	r4, #16
 8006b48:	bf11      	iteee	ne
 8006b4a:	f10b 0318 	addne.w	r3, fp, #24
 8006b4e:	f10b 0320 	addeq.w	r3, fp, #32
 8006b52:	f8cb 201c 	streq.w	r2, [fp, #28]
 8006b56:	3418      	addeq	r4, #24
 8006b58:	6822      	ldr	r2, [r4, #0]
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	6862      	ldr	r2, [r4, #4]
 8006b5e:	605a      	str	r2, [r3, #4]
 8006b60:	68a2      	ldr	r2, [r4, #8]
 8006b62:	609a      	str	r2, [r3, #8]
 8006b64:	eb0b 0306 	add.w	r3, fp, r6
 8006b68:	ebc6 020c 	rsb	r2, r6, ip
 8006b6c:	f042 0201 	orr.w	r2, r2, #1
 8006b70:	f8ca 3008 	str.w	r3, [sl, #8]
 8006b74:	605a      	str	r2, [r3, #4]
 8006b76:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	431e      	orrs	r6, r3
 8006b80:	4648      	mov	r0, r9
 8006b82:	f8cb 6004 	str.w	r6, [fp, #4]
 8006b86:	f7fb ff31 	bl	80029ec <__malloc_unlock>
 8006b8a:	4638      	mov	r0, r7
 8006b8c:	e663      	b.n	8006856 <_realloc_r+0x72>
 8006b8e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006b92:	f022 0203 	bic.w	r2, r2, #3
 8006b96:	4415      	add	r5, r2
 8006b98:	4618      	mov	r0, r3
 8006b9a:	e64a      	b.n	8006832 <_realloc_r+0x4e>
 8006b9c:	4621      	mov	r1, r4
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	4675      	mov	r5, lr
 8006ba2:	463c      	mov	r4, r7
 8006ba4:	f7ff fdbc 	bl	8006720 <memmove>
 8006ba8:	465f      	mov	r7, fp
 8006baa:	f8db 0004 	ldr.w	r0, [fp, #4]
 8006bae:	e640      	b.n	8006832 <_realloc_r+0x4e>
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	f8cd c004 	str.w	ip, [sp, #4]
 8006bb8:	f7ff fdb2 	bl	8006720 <memmove>
 8006bbc:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006bc0:	e7d0      	b.n	8006b64 <_realloc_r+0x380>
 8006bc2:	bf00      	nop

08006bc4 <__swbuf_r>:
 8006bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc6:	460d      	mov	r5, r1
 8006bc8:	4614      	mov	r4, r2
 8006bca:	4607      	mov	r7, r0
 8006bcc:	b110      	cbz	r0, 8006bd4 <__swbuf_r+0x10>
 8006bce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d046      	beq.n	8006c62 <__swbuf_r+0x9e>
 8006bd4:	89a2      	ldrh	r2, [r4, #12]
 8006bd6:	69a0      	ldr	r0, [r4, #24]
 8006bd8:	b293      	uxth	r3, r2
 8006bda:	60a0      	str	r0, [r4, #8]
 8006bdc:	0718      	lsls	r0, r3, #28
 8006bde:	d52d      	bpl.n	8006c3c <__swbuf_r+0x78>
 8006be0:	6926      	ldr	r6, [r4, #16]
 8006be2:	2e00      	cmp	r6, #0
 8006be4:	d02a      	beq.n	8006c3c <__swbuf_r+0x78>
 8006be6:	0499      	lsls	r1, r3, #18
 8006be8:	bf5f      	itttt	pl
 8006bea:	6e63      	ldrpl	r3, [r4, #100]	; 0x64
 8006bec:	f423 5300 	bicpl.w	r3, r3, #8192	; 0x2000
 8006bf0:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8006bf4:	6663      	strpl	r3, [r4, #100]	; 0x64
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	bf58      	it	pl
 8006bfa:	81a2      	strhpl	r2, [r4, #12]
 8006bfc:	6962      	ldr	r2, [r4, #20]
 8006bfe:	1b9e      	subs	r6, r3, r6
 8006c00:	4296      	cmp	r6, r2
 8006c02:	b2ed      	uxtb	r5, r5
 8006c04:	bfb8      	it	lt
 8006c06:	3601      	addlt	r6, #1
 8006c08:	da22      	bge.n	8006c50 <__swbuf_r+0x8c>
 8006c0a:	68a2      	ldr	r2, [r4, #8]
 8006c0c:	1c59      	adds	r1, r3, #1
 8006c0e:	3a01      	subs	r2, #1
 8006c10:	60a2      	str	r2, [r4, #8]
 8006c12:	6021      	str	r1, [r4, #0]
 8006c14:	701d      	strb	r5, [r3, #0]
 8006c16:	6963      	ldr	r3, [r4, #20]
 8006c18:	42b3      	cmp	r3, r6
 8006c1a:	d006      	beq.n	8006c2a <__swbuf_r+0x66>
 8006c1c:	89a3      	ldrh	r3, [r4, #12]
 8006c1e:	07db      	lsls	r3, r3, #31
 8006c20:	d501      	bpl.n	8006c26 <__swbuf_r+0x62>
 8006c22:	2d0a      	cmp	r5, #10
 8006c24:	d001      	beq.n	8006c2a <__swbuf_r+0x66>
 8006c26:	4628      	mov	r0, r5
 8006c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c2a:	4638      	mov	r0, r7
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	f7fe fd83 	bl	8005738 <_fflush_r>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d0f7      	beq.n	8006c26 <__swbuf_r+0x62>
 8006c36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c3c:	4638      	mov	r0, r7
 8006c3e:	4621      	mov	r1, r4
 8006c40:	f7fd fbca 	bl	80043d8 <__swsetup_r>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d1f6      	bne.n	8006c36 <__swbuf_r+0x72>
 8006c48:	89a2      	ldrh	r2, [r4, #12]
 8006c4a:	6926      	ldr	r6, [r4, #16]
 8006c4c:	b293      	uxth	r3, r2
 8006c4e:	e7ca      	b.n	8006be6 <__swbuf_r+0x22>
 8006c50:	4638      	mov	r0, r7
 8006c52:	4621      	mov	r1, r4
 8006c54:	f7fe fd70 	bl	8005738 <_fflush_r>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d1ec      	bne.n	8006c36 <__swbuf_r+0x72>
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	2601      	movs	r6, #1
 8006c60:	e7d3      	b.n	8006c0a <__swbuf_r+0x46>
 8006c62:	f7fb fa7d 	bl	8002160 <__sinit>
 8006c66:	e7b5      	b.n	8006bd4 <__swbuf_r+0x10>

08006c68 <_wcrtomb_r>:
 8006c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c6c:	460d      	mov	r5, r1
 8006c6e:	b086      	sub	sp, #24
 8006c70:	4606      	mov	r6, r0
 8006c72:	4690      	mov	r8, r2
 8006c74:	461f      	mov	r7, r3
 8006c76:	b1a9      	cbz	r1, 8006ca4 <_wcrtomb_r+0x3c>
 8006c78:	f640 04c0 	movw	r4, #2240	; 0x8c0
 8006c7c:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8006c80:	6824      	ldr	r4, [r4, #0]
 8006c82:	f7fe fe8f 	bl	80059a4 <__locale_charset>
 8006c86:	9700      	str	r7, [sp, #0]
 8006c88:	4603      	mov	r3, r0
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	4642      	mov	r2, r8
 8006c8e:	4630      	mov	r0, r6
 8006c90:	47a0      	blx	r4
 8006c92:	1c43      	adds	r3, r0, #1
 8006c94:	bf01      	itttt	eq
 8006c96:	2200      	moveq	r2, #0
 8006c98:	238a      	moveq	r3, #138	; 0x8a
 8006c9a:	603a      	streq	r2, [r7, #0]
 8006c9c:	6033      	streq	r3, [r6, #0]
 8006c9e:	b006      	add	sp, #24
 8006ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ca4:	f640 03c0 	movw	r3, #2240	; 0x8c0
 8006ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006cac:	681c      	ldr	r4, [r3, #0]
 8006cae:	f7fe fe79 	bl	80059a4 <__locale_charset>
 8006cb2:	9700      	str	r7, [sp, #0]
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	462a      	mov	r2, r5
 8006cb8:	4630      	mov	r0, r6
 8006cba:	a903      	add	r1, sp, #12
 8006cbc:	47a0      	blx	r4
 8006cbe:	e7e8      	b.n	8006c92 <_wcrtomb_r+0x2a>

08006cc0 <__ascii_wctomb>:
 8006cc0:	b149      	cbz	r1, 8006cd6 <__ascii_wctomb+0x16>
 8006cc2:	2aff      	cmp	r2, #255	; 0xff
 8006cc4:	bf85      	ittet	hi
 8006cc6:	238a      	movhi	r3, #138	; 0x8a
 8006cc8:	6003      	strhi	r3, [r0, #0]
 8006cca:	700a      	strbls	r2, [r1, #0]
 8006ccc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006cd0:	bf98      	it	ls
 8006cd2:	2001      	movls	r0, #1
 8006cd4:	4770      	bx	lr
 8006cd6:	4608      	mov	r0, r1
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop

08006cdc <_getpid>:
 8006cdc:	f648 331c 	movw	r3, #35612	; 0x8b1c
 8006ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006ce4:	2258      	movs	r2, #88	; 0x58
 8006ce6:	601a      	str	r2, [r3, #0]
 8006ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop

08006cf0 <_isatty>:
 8006cf0:	f648 331c 	movw	r3, #35612	; 0x8b1c
 8006cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006cf8:	2258      	movs	r2, #88	; 0x58
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	4770      	bx	lr

08006d00 <_kill>:
 8006d00:	f648 331c 	movw	r3, #35612	; 0x8b1c
 8006d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006d08:	2258      	movs	r2, #88	; 0x58
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop

08006d14 <_exit>:
 8006d14:	e7fe      	b.n	8006d14 <_exit>
 8006d16:	bf00      	nop

08006d18 <__aeabi_drsub>:
 8006d18:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006d1c:	e002      	b.n	8006d24 <__adddf3>
 8006d1e:	bf00      	nop

08006d20 <__aeabi_dsub>:
 8006d20:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006d24 <__adddf3>:
 8006d24:	b530      	push	{r4, r5, lr}
 8006d26:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006d2a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006d2e:	ea94 0f05 	teq	r4, r5
 8006d32:	bf08      	it	eq
 8006d34:	ea90 0f02 	teqeq	r0, r2
 8006d38:	bf1f      	itttt	ne
 8006d3a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006d3e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006d42:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006d46:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006d4a:	f000 80e2 	beq.w	8006f12 <__adddf3+0x1ee>
 8006d4e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006d52:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006d56:	bfb8      	it	lt
 8006d58:	426d      	neglt	r5, r5
 8006d5a:	dd0c      	ble.n	8006d76 <__adddf3+0x52>
 8006d5c:	442c      	add	r4, r5
 8006d5e:	ea80 0202 	eor.w	r2, r0, r2
 8006d62:	ea81 0303 	eor.w	r3, r1, r3
 8006d66:	ea82 0000 	eor.w	r0, r2, r0
 8006d6a:	ea83 0101 	eor.w	r1, r3, r1
 8006d6e:	ea80 0202 	eor.w	r2, r0, r2
 8006d72:	ea81 0303 	eor.w	r3, r1, r3
 8006d76:	2d36      	cmp	r5, #54	; 0x36
 8006d78:	bf88      	it	hi
 8006d7a:	bd30      	pophi	{r4, r5, pc}
 8006d7c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006d80:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006d84:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006d88:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006d8c:	d002      	beq.n	8006d94 <__adddf3+0x70>
 8006d8e:	4240      	negs	r0, r0
 8006d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006d94:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006d98:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006d9c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006da0:	d002      	beq.n	8006da8 <__adddf3+0x84>
 8006da2:	4252      	negs	r2, r2
 8006da4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006da8:	ea94 0f05 	teq	r4, r5
 8006dac:	f000 80a7 	beq.w	8006efe <__adddf3+0x1da>
 8006db0:	f1a4 0401 	sub.w	r4, r4, #1
 8006db4:	f1d5 0e20 	rsbs	lr, r5, #32
 8006db8:	db0d      	blt.n	8006dd6 <__adddf3+0xb2>
 8006dba:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006dbe:	fa22 f205 	lsr.w	r2, r2, r5
 8006dc2:	1880      	adds	r0, r0, r2
 8006dc4:	f141 0100 	adc.w	r1, r1, #0
 8006dc8:	fa03 f20e 	lsl.w	r2, r3, lr
 8006dcc:	1880      	adds	r0, r0, r2
 8006dce:	fa43 f305 	asr.w	r3, r3, r5
 8006dd2:	4159      	adcs	r1, r3
 8006dd4:	e00e      	b.n	8006df4 <__adddf3+0xd0>
 8006dd6:	f1a5 0520 	sub.w	r5, r5, #32
 8006dda:	f10e 0e20 	add.w	lr, lr, #32
 8006dde:	2a01      	cmp	r2, #1
 8006de0:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006de4:	bf28      	it	cs
 8006de6:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006dea:	fa43 f305 	asr.w	r3, r3, r5
 8006dee:	18c0      	adds	r0, r0, r3
 8006df0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006df4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006df8:	d507      	bpl.n	8006e0a <__adddf3+0xe6>
 8006dfa:	f04f 0e00 	mov.w	lr, #0
 8006dfe:	f1dc 0c00 	rsbs	ip, ip, #0
 8006e02:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006e06:	eb6e 0101 	sbc.w	r1, lr, r1
 8006e0a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006e0e:	d31b      	bcc.n	8006e48 <__adddf3+0x124>
 8006e10:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006e14:	d30c      	bcc.n	8006e30 <__adddf3+0x10c>
 8006e16:	0849      	lsrs	r1, r1, #1
 8006e18:	ea5f 0030 	movs.w	r0, r0, rrx
 8006e1c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006e20:	f104 0401 	add.w	r4, r4, #1
 8006e24:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006e28:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006e2c:	f080 809a 	bcs.w	8006f64 <__adddf3+0x240>
 8006e30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006e34:	bf08      	it	eq
 8006e36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006e3a:	f150 0000 	adcs.w	r0, r0, #0
 8006e3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006e42:	ea41 0105 	orr.w	r1, r1, r5
 8006e46:	bd30      	pop	{r4, r5, pc}
 8006e48:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006e4c:	4140      	adcs	r0, r0
 8006e4e:	eb41 0101 	adc.w	r1, r1, r1
 8006e52:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006e56:	f1a4 0401 	sub.w	r4, r4, #1
 8006e5a:	d1e9      	bne.n	8006e30 <__adddf3+0x10c>
 8006e5c:	f091 0f00 	teq	r1, #0
 8006e60:	bf04      	itt	eq
 8006e62:	4601      	moveq	r1, r0
 8006e64:	2000      	moveq	r0, #0
 8006e66:	fab1 f381 	clz	r3, r1
 8006e6a:	bf08      	it	eq
 8006e6c:	3320      	addeq	r3, #32
 8006e6e:	f1a3 030b 	sub.w	r3, r3, #11
 8006e72:	f1b3 0220 	subs.w	r2, r3, #32
 8006e76:	da0c      	bge.n	8006e92 <__adddf3+0x16e>
 8006e78:	320c      	adds	r2, #12
 8006e7a:	dd08      	ble.n	8006e8e <__adddf3+0x16a>
 8006e7c:	f102 0c14 	add.w	ip, r2, #20
 8006e80:	f1c2 020c 	rsb	r2, r2, #12
 8006e84:	fa01 f00c 	lsl.w	r0, r1, ip
 8006e88:	fa21 f102 	lsr.w	r1, r1, r2
 8006e8c:	e00c      	b.n	8006ea8 <__adddf3+0x184>
 8006e8e:	f102 0214 	add.w	r2, r2, #20
 8006e92:	bfd8      	it	le
 8006e94:	f1c2 0c20 	rsble	ip, r2, #32
 8006e98:	fa01 f102 	lsl.w	r1, r1, r2
 8006e9c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006ea0:	bfdc      	itt	le
 8006ea2:	ea41 010c 	orrle.w	r1, r1, ip
 8006ea6:	4090      	lslle	r0, r2
 8006ea8:	1ae4      	subs	r4, r4, r3
 8006eaa:	bfa2      	ittt	ge
 8006eac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006eb0:	4329      	orrge	r1, r5
 8006eb2:	bd30      	popge	{r4, r5, pc}
 8006eb4:	ea6f 0404 	mvn.w	r4, r4
 8006eb8:	3c1f      	subs	r4, #31
 8006eba:	da1c      	bge.n	8006ef6 <__adddf3+0x1d2>
 8006ebc:	340c      	adds	r4, #12
 8006ebe:	dc0e      	bgt.n	8006ede <__adddf3+0x1ba>
 8006ec0:	f104 0414 	add.w	r4, r4, #20
 8006ec4:	f1c4 0220 	rsb	r2, r4, #32
 8006ec8:	fa20 f004 	lsr.w	r0, r0, r4
 8006ecc:	fa01 f302 	lsl.w	r3, r1, r2
 8006ed0:	ea40 0003 	orr.w	r0, r0, r3
 8006ed4:	fa21 f304 	lsr.w	r3, r1, r4
 8006ed8:	ea45 0103 	orr.w	r1, r5, r3
 8006edc:	bd30      	pop	{r4, r5, pc}
 8006ede:	f1c4 040c 	rsb	r4, r4, #12
 8006ee2:	f1c4 0220 	rsb	r2, r4, #32
 8006ee6:	fa20 f002 	lsr.w	r0, r0, r2
 8006eea:	fa01 f304 	lsl.w	r3, r1, r4
 8006eee:	ea40 0003 	orr.w	r0, r0, r3
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	bd30      	pop	{r4, r5, pc}
 8006ef6:	fa21 f004 	lsr.w	r0, r1, r4
 8006efa:	4629      	mov	r1, r5
 8006efc:	bd30      	pop	{r4, r5, pc}
 8006efe:	f094 0f00 	teq	r4, #0
 8006f02:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006f06:	bf06      	itte	eq
 8006f08:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006f0c:	3401      	addeq	r4, #1
 8006f0e:	3d01      	subne	r5, #1
 8006f10:	e74e      	b.n	8006db0 <__adddf3+0x8c>
 8006f12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006f16:	bf18      	it	ne
 8006f18:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006f1c:	d029      	beq.n	8006f72 <__adddf3+0x24e>
 8006f1e:	ea94 0f05 	teq	r4, r5
 8006f22:	bf08      	it	eq
 8006f24:	ea90 0f02 	teqeq	r0, r2
 8006f28:	d005      	beq.n	8006f36 <__adddf3+0x212>
 8006f2a:	ea54 0c00 	orrs.w	ip, r4, r0
 8006f2e:	bf04      	itt	eq
 8006f30:	4619      	moveq	r1, r3
 8006f32:	4610      	moveq	r0, r2
 8006f34:	bd30      	pop	{r4, r5, pc}
 8006f36:	ea91 0f03 	teq	r1, r3
 8006f3a:	bf1e      	ittt	ne
 8006f3c:	2100      	movne	r1, #0
 8006f3e:	2000      	movne	r0, #0
 8006f40:	bd30      	popne	{r4, r5, pc}
 8006f42:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006f46:	d105      	bne.n	8006f54 <__adddf3+0x230>
 8006f48:	0040      	lsls	r0, r0, #1
 8006f4a:	4149      	adcs	r1, r1
 8006f4c:	bf28      	it	cs
 8006f4e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006f52:	bd30      	pop	{r4, r5, pc}
 8006f54:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006f58:	bf3c      	itt	cc
 8006f5a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006f5e:	bd30      	popcc	{r4, r5, pc}
 8006f60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006f64:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006f68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f6c:	f04f 0000 	mov.w	r0, #0
 8006f70:	bd30      	pop	{r4, r5, pc}
 8006f72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006f76:	bf1a      	itte	ne
 8006f78:	4619      	movne	r1, r3
 8006f7a:	4610      	movne	r0, r2
 8006f7c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006f80:	bf1c      	itt	ne
 8006f82:	460b      	movne	r3, r1
 8006f84:	4602      	movne	r2, r0
 8006f86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006f8a:	bf06      	itte	eq
 8006f8c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006f90:	ea91 0f03 	teqeq	r1, r3
 8006f94:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006f98:	bd30      	pop	{r4, r5, pc}
 8006f9a:	bf00      	nop

08006f9c <__aeabi_ui2d>:
 8006f9c:	f090 0f00 	teq	r0, #0
 8006fa0:	bf04      	itt	eq
 8006fa2:	2100      	moveq	r1, #0
 8006fa4:	4770      	bxeq	lr
 8006fa6:	b530      	push	{r4, r5, lr}
 8006fa8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006fac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006fb0:	f04f 0500 	mov.w	r5, #0
 8006fb4:	f04f 0100 	mov.w	r1, #0
 8006fb8:	e750      	b.n	8006e5c <__adddf3+0x138>
 8006fba:	bf00      	nop

08006fbc <__aeabi_i2d>:
 8006fbc:	f090 0f00 	teq	r0, #0
 8006fc0:	bf04      	itt	eq
 8006fc2:	2100      	moveq	r1, #0
 8006fc4:	4770      	bxeq	lr
 8006fc6:	b530      	push	{r4, r5, lr}
 8006fc8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006fcc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006fd0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006fd4:	bf48      	it	mi
 8006fd6:	4240      	negmi	r0, r0
 8006fd8:	f04f 0100 	mov.w	r1, #0
 8006fdc:	e73e      	b.n	8006e5c <__adddf3+0x138>
 8006fde:	bf00      	nop

08006fe0 <__aeabi_f2d>:
 8006fe0:	0042      	lsls	r2, r0, #1
 8006fe2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006fe6:	ea4f 0131 	mov.w	r1, r1, rrx
 8006fea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006fee:	bf1f      	itttt	ne
 8006ff0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006ff4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006ff8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006ffc:	4770      	bxne	lr
 8006ffe:	f092 0f00 	teq	r2, #0
 8007002:	bf14      	ite	ne
 8007004:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007008:	4770      	bxeq	lr
 800700a:	b530      	push	{r4, r5, lr}
 800700c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007010:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007014:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007018:	e720      	b.n	8006e5c <__adddf3+0x138>
 800701a:	bf00      	nop

0800701c <__aeabi_ul2d>:
 800701c:	ea50 0201 	orrs.w	r2, r0, r1
 8007020:	bf08      	it	eq
 8007022:	4770      	bxeq	lr
 8007024:	b530      	push	{r4, r5, lr}
 8007026:	f04f 0500 	mov.w	r5, #0
 800702a:	e00a      	b.n	8007042 <__aeabi_l2d+0x16>

0800702c <__aeabi_l2d>:
 800702c:	ea50 0201 	orrs.w	r2, r0, r1
 8007030:	bf08      	it	eq
 8007032:	4770      	bxeq	lr
 8007034:	b530      	push	{r4, r5, lr}
 8007036:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800703a:	d502      	bpl.n	8007042 <__aeabi_l2d+0x16>
 800703c:	4240      	negs	r0, r0
 800703e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007042:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007046:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800704a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800704e:	f43f aedc 	beq.w	8006e0a <__adddf3+0xe6>
 8007052:	f04f 0203 	mov.w	r2, #3
 8007056:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800705a:	bf18      	it	ne
 800705c:	3203      	addne	r2, #3
 800705e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007062:	bf18      	it	ne
 8007064:	3203      	addne	r2, #3
 8007066:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800706a:	f1c2 0320 	rsb	r3, r2, #32
 800706e:	fa00 fc03 	lsl.w	ip, r0, r3
 8007072:	fa20 f002 	lsr.w	r0, r0, r2
 8007076:	fa01 fe03 	lsl.w	lr, r1, r3
 800707a:	ea40 000e 	orr.w	r0, r0, lr
 800707e:	fa21 f102 	lsr.w	r1, r1, r2
 8007082:	4414      	add	r4, r2
 8007084:	e6c1      	b.n	8006e0a <__adddf3+0xe6>
 8007086:	bf00      	nop

08007088 <__aeabi_dmul>:
 8007088:	b570      	push	{r4, r5, r6, lr}
 800708a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800708e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007092:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007096:	bf1d      	ittte	ne
 8007098:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800709c:	ea94 0f0c 	teqne	r4, ip
 80070a0:	ea95 0f0c 	teqne	r5, ip
 80070a4:	f000 f8de 	bleq	8007264 <__aeabi_dmul+0x1dc>
 80070a8:	442c      	add	r4, r5
 80070aa:	ea81 0603 	eor.w	r6, r1, r3
 80070ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80070b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80070b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80070ba:	bf18      	it	ne
 80070bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80070c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80070c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070c8:	d038      	beq.n	800713c <__aeabi_dmul+0xb4>
 80070ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80070ce:	f04f 0500 	mov.w	r5, #0
 80070d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80070d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80070da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80070de:	f04f 0600 	mov.w	r6, #0
 80070e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80070e6:	f09c 0f00 	teq	ip, #0
 80070ea:	bf18      	it	ne
 80070ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80070f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80070f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80070f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80070fc:	d204      	bcs.n	8007108 <__aeabi_dmul+0x80>
 80070fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8007102:	416d      	adcs	r5, r5
 8007104:	eb46 0606 	adc.w	r6, r6, r6
 8007108:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800710c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8007110:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8007114:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8007118:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800711c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007120:	bf88      	it	hi
 8007122:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007126:	d81e      	bhi.n	8007166 <__aeabi_dmul+0xde>
 8007128:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800712c:	bf08      	it	eq
 800712e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8007132:	f150 0000 	adcs.w	r0, r0, #0
 8007136:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800713a:	bd70      	pop	{r4, r5, r6, pc}
 800713c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8007140:	ea46 0101 	orr.w	r1, r6, r1
 8007144:	ea40 0002 	orr.w	r0, r0, r2
 8007148:	ea81 0103 	eor.w	r1, r1, r3
 800714c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8007150:	bfc2      	ittt	gt
 8007152:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007156:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800715a:	bd70      	popgt	{r4, r5, r6, pc}
 800715c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007160:	f04f 0e00 	mov.w	lr, #0
 8007164:	3c01      	subs	r4, #1
 8007166:	f300 80ab 	bgt.w	80072c0 <__aeabi_dmul+0x238>
 800716a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800716e:	bfde      	ittt	le
 8007170:	2000      	movle	r0, #0
 8007172:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8007176:	bd70      	pople	{r4, r5, r6, pc}
 8007178:	f1c4 0400 	rsb	r4, r4, #0
 800717c:	3c20      	subs	r4, #32
 800717e:	da35      	bge.n	80071ec <__aeabi_dmul+0x164>
 8007180:	340c      	adds	r4, #12
 8007182:	dc1b      	bgt.n	80071bc <__aeabi_dmul+0x134>
 8007184:	f104 0414 	add.w	r4, r4, #20
 8007188:	f1c4 0520 	rsb	r5, r4, #32
 800718c:	fa00 f305 	lsl.w	r3, r0, r5
 8007190:	fa20 f004 	lsr.w	r0, r0, r4
 8007194:	fa01 f205 	lsl.w	r2, r1, r5
 8007198:	ea40 0002 	orr.w	r0, r0, r2
 800719c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80071a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80071a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80071a8:	fa21 f604 	lsr.w	r6, r1, r4
 80071ac:	eb42 0106 	adc.w	r1, r2, r6
 80071b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80071b4:	bf08      	it	eq
 80071b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80071ba:	bd70      	pop	{r4, r5, r6, pc}
 80071bc:	f1c4 040c 	rsb	r4, r4, #12
 80071c0:	f1c4 0520 	rsb	r5, r4, #32
 80071c4:	fa00 f304 	lsl.w	r3, r0, r4
 80071c8:	fa20 f005 	lsr.w	r0, r0, r5
 80071cc:	fa01 f204 	lsl.w	r2, r1, r4
 80071d0:	ea40 0002 	orr.w	r0, r0, r2
 80071d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80071d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80071dc:	f141 0100 	adc.w	r1, r1, #0
 80071e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80071e4:	bf08      	it	eq
 80071e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80071ea:	bd70      	pop	{r4, r5, r6, pc}
 80071ec:	f1c4 0520 	rsb	r5, r4, #32
 80071f0:	fa00 f205 	lsl.w	r2, r0, r5
 80071f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80071f8:	fa20 f304 	lsr.w	r3, r0, r4
 80071fc:	fa01 f205 	lsl.w	r2, r1, r5
 8007200:	ea43 0302 	orr.w	r3, r3, r2
 8007204:	fa21 f004 	lsr.w	r0, r1, r4
 8007208:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800720c:	fa21 f204 	lsr.w	r2, r1, r4
 8007210:	ea20 0002 	bic.w	r0, r0, r2
 8007214:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8007218:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800721c:	bf08      	it	eq
 800721e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007222:	bd70      	pop	{r4, r5, r6, pc}
 8007224:	f094 0f00 	teq	r4, #0
 8007228:	d10f      	bne.n	800724a <__aeabi_dmul+0x1c2>
 800722a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800722e:	0040      	lsls	r0, r0, #1
 8007230:	eb41 0101 	adc.w	r1, r1, r1
 8007234:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007238:	bf08      	it	eq
 800723a:	3c01      	subeq	r4, #1
 800723c:	d0f7      	beq.n	800722e <__aeabi_dmul+0x1a6>
 800723e:	ea41 0106 	orr.w	r1, r1, r6
 8007242:	f095 0f00 	teq	r5, #0
 8007246:	bf18      	it	ne
 8007248:	4770      	bxne	lr
 800724a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800724e:	0052      	lsls	r2, r2, #1
 8007250:	eb43 0303 	adc.w	r3, r3, r3
 8007254:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007258:	bf08      	it	eq
 800725a:	3d01      	subeq	r5, #1
 800725c:	d0f7      	beq.n	800724e <__aeabi_dmul+0x1c6>
 800725e:	ea43 0306 	orr.w	r3, r3, r6
 8007262:	4770      	bx	lr
 8007264:	ea94 0f0c 	teq	r4, ip
 8007268:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800726c:	bf18      	it	ne
 800726e:	ea95 0f0c 	teqne	r5, ip
 8007272:	d00c      	beq.n	800728e <__aeabi_dmul+0x206>
 8007274:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007278:	bf18      	it	ne
 800727a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800727e:	d1d1      	bne.n	8007224 <__aeabi_dmul+0x19c>
 8007280:	ea81 0103 	eor.w	r1, r1, r3
 8007284:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007288:	f04f 0000 	mov.w	r0, #0
 800728c:	bd70      	pop	{r4, r5, r6, pc}
 800728e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007292:	bf06      	itte	eq
 8007294:	4610      	moveq	r0, r2
 8007296:	4619      	moveq	r1, r3
 8007298:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800729c:	d019      	beq.n	80072d2 <__aeabi_dmul+0x24a>
 800729e:	ea94 0f0c 	teq	r4, ip
 80072a2:	d102      	bne.n	80072aa <__aeabi_dmul+0x222>
 80072a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80072a8:	d113      	bne.n	80072d2 <__aeabi_dmul+0x24a>
 80072aa:	ea95 0f0c 	teq	r5, ip
 80072ae:	d105      	bne.n	80072bc <__aeabi_dmul+0x234>
 80072b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80072b4:	bf1c      	itt	ne
 80072b6:	4610      	movne	r0, r2
 80072b8:	4619      	movne	r1, r3
 80072ba:	d10a      	bne.n	80072d2 <__aeabi_dmul+0x24a>
 80072bc:	ea81 0103 	eor.w	r1, r1, r3
 80072c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80072c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80072c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072cc:	f04f 0000 	mov.w	r0, #0
 80072d0:	bd70      	pop	{r4, r5, r6, pc}
 80072d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80072d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80072da:	bd70      	pop	{r4, r5, r6, pc}

080072dc <__aeabi_ddiv>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80072e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80072e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80072ea:	bf1d      	ittte	ne
 80072ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80072f0:	ea94 0f0c 	teqne	r4, ip
 80072f4:	ea95 0f0c 	teqne	r5, ip
 80072f8:	f000 f8a7 	bleq	800744a <__aeabi_ddiv+0x16e>
 80072fc:	eba4 0405 	sub.w	r4, r4, r5
 8007300:	ea81 0e03 	eor.w	lr, r1, r3
 8007304:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800730c:	f000 8088 	beq.w	8007420 <__aeabi_ddiv+0x144>
 8007310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007314:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8007318:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800731c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8007320:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8007324:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8007328:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800732c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8007330:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8007334:	429d      	cmp	r5, r3
 8007336:	bf08      	it	eq
 8007338:	4296      	cmpeq	r6, r2
 800733a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800733e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8007342:	d202      	bcs.n	800734a <__aeabi_ddiv+0x6e>
 8007344:	085b      	lsrs	r3, r3, #1
 8007346:	ea4f 0232 	mov.w	r2, r2, rrx
 800734a:	1ab6      	subs	r6, r6, r2
 800734c:	eb65 0503 	sbc.w	r5, r5, r3
 8007350:	085b      	lsrs	r3, r3, #1
 8007352:	ea4f 0232 	mov.w	r2, r2, rrx
 8007356:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800735a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800735e:	ebb6 0e02 	subs.w	lr, r6, r2
 8007362:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007366:	bf22      	ittt	cs
 8007368:	1ab6      	subcs	r6, r6, r2
 800736a:	4675      	movcs	r5, lr
 800736c:	ea40 000c 	orrcs.w	r0, r0, ip
 8007370:	085b      	lsrs	r3, r3, #1
 8007372:	ea4f 0232 	mov.w	r2, r2, rrx
 8007376:	ebb6 0e02 	subs.w	lr, r6, r2
 800737a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800737e:	bf22      	ittt	cs
 8007380:	1ab6      	subcs	r6, r6, r2
 8007382:	4675      	movcs	r5, lr
 8007384:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8007388:	085b      	lsrs	r3, r3, #1
 800738a:	ea4f 0232 	mov.w	r2, r2, rrx
 800738e:	ebb6 0e02 	subs.w	lr, r6, r2
 8007392:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007396:	bf22      	ittt	cs
 8007398:	1ab6      	subcs	r6, r6, r2
 800739a:	4675      	movcs	r5, lr
 800739c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80073a0:	085b      	lsrs	r3, r3, #1
 80073a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80073a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80073aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80073ae:	bf22      	ittt	cs
 80073b0:	1ab6      	subcs	r6, r6, r2
 80073b2:	4675      	movcs	r5, lr
 80073b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80073b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80073bc:	d018      	beq.n	80073f0 <__aeabi_ddiv+0x114>
 80073be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80073c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80073c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80073ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80073ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80073d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80073d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80073da:	d1c0      	bne.n	800735e <__aeabi_ddiv+0x82>
 80073dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80073e0:	d10b      	bne.n	80073fa <__aeabi_ddiv+0x11e>
 80073e2:	ea41 0100 	orr.w	r1, r1, r0
 80073e6:	f04f 0000 	mov.w	r0, #0
 80073ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80073ee:	e7b6      	b.n	800735e <__aeabi_ddiv+0x82>
 80073f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80073f4:	bf04      	itt	eq
 80073f6:	4301      	orreq	r1, r0
 80073f8:	2000      	moveq	r0, #0
 80073fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80073fe:	bf88      	it	hi
 8007400:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007404:	f63f aeaf 	bhi.w	8007166 <__aeabi_dmul+0xde>
 8007408:	ebb5 0c03 	subs.w	ip, r5, r3
 800740c:	bf04      	itt	eq
 800740e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8007412:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007416:	f150 0000 	adcs.w	r0, r0, #0
 800741a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800741e:	bd70      	pop	{r4, r5, r6, pc}
 8007420:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8007424:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8007428:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800742c:	bfc2      	ittt	gt
 800742e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007432:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007436:	bd70      	popgt	{r4, r5, r6, pc}
 8007438:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800743c:	f04f 0e00 	mov.w	lr, #0
 8007440:	3c01      	subs	r4, #1
 8007442:	e690      	b.n	8007166 <__aeabi_dmul+0xde>
 8007444:	ea45 0e06 	orr.w	lr, r5, r6
 8007448:	e68d      	b.n	8007166 <__aeabi_dmul+0xde>
 800744a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800744e:	ea94 0f0c 	teq	r4, ip
 8007452:	bf08      	it	eq
 8007454:	ea95 0f0c 	teqeq	r5, ip
 8007458:	f43f af3b 	beq.w	80072d2 <__aeabi_dmul+0x24a>
 800745c:	ea94 0f0c 	teq	r4, ip
 8007460:	d10a      	bne.n	8007478 <__aeabi_ddiv+0x19c>
 8007462:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007466:	f47f af34 	bne.w	80072d2 <__aeabi_dmul+0x24a>
 800746a:	ea95 0f0c 	teq	r5, ip
 800746e:	f47f af25 	bne.w	80072bc <__aeabi_dmul+0x234>
 8007472:	4610      	mov	r0, r2
 8007474:	4619      	mov	r1, r3
 8007476:	e72c      	b.n	80072d2 <__aeabi_dmul+0x24a>
 8007478:	ea95 0f0c 	teq	r5, ip
 800747c:	d106      	bne.n	800748c <__aeabi_ddiv+0x1b0>
 800747e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007482:	f43f aefd 	beq.w	8007280 <__aeabi_dmul+0x1f8>
 8007486:	4610      	mov	r0, r2
 8007488:	4619      	mov	r1, r3
 800748a:	e722      	b.n	80072d2 <__aeabi_dmul+0x24a>
 800748c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007490:	bf18      	it	ne
 8007492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007496:	f47f aec5 	bne.w	8007224 <__aeabi_dmul+0x19c>
 800749a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800749e:	f47f af0d 	bne.w	80072bc <__aeabi_dmul+0x234>
 80074a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80074a6:	f47f aeeb 	bne.w	8007280 <__aeabi_dmul+0x1f8>
 80074aa:	e712      	b.n	80072d2 <__aeabi_dmul+0x24a>

080074ac <__gedf2>:
 80074ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80074b0:	e006      	b.n	80074c0 <__cmpdf2+0x4>
 80074b2:	bf00      	nop

080074b4 <__ledf2>:
 80074b4:	f04f 0c01 	mov.w	ip, #1
 80074b8:	e002      	b.n	80074c0 <__cmpdf2+0x4>
 80074ba:	bf00      	nop

080074bc <__cmpdf2>:
 80074bc:	f04f 0c01 	mov.w	ip, #1
 80074c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80074c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80074c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80074cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80074d0:	bf18      	it	ne
 80074d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80074d6:	d01b      	beq.n	8007510 <__cmpdf2+0x54>
 80074d8:	b001      	add	sp, #4
 80074da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80074de:	bf0c      	ite	eq
 80074e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80074e4:	ea91 0f03 	teqne	r1, r3
 80074e8:	bf02      	ittt	eq
 80074ea:	ea90 0f02 	teqeq	r0, r2
 80074ee:	2000      	moveq	r0, #0
 80074f0:	4770      	bxeq	lr
 80074f2:	f110 0f00 	cmn.w	r0, #0
 80074f6:	ea91 0f03 	teq	r1, r3
 80074fa:	bf58      	it	pl
 80074fc:	4299      	cmppl	r1, r3
 80074fe:	bf08      	it	eq
 8007500:	4290      	cmpeq	r0, r2
 8007502:	bf2c      	ite	cs
 8007504:	17d8      	asrcs	r0, r3, #31
 8007506:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800750a:	f040 0001 	orr.w	r0, r0, #1
 800750e:	4770      	bx	lr
 8007510:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007514:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007518:	d102      	bne.n	8007520 <__cmpdf2+0x64>
 800751a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800751e:	d107      	bne.n	8007530 <__cmpdf2+0x74>
 8007520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007528:	d1d6      	bne.n	80074d8 <__cmpdf2+0x1c>
 800752a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800752e:	d0d3      	beq.n	80074d8 <__cmpdf2+0x1c>
 8007530:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop

08007538 <__aeabi_cdrcmple>:
 8007538:	4684      	mov	ip, r0
 800753a:	4610      	mov	r0, r2
 800753c:	4662      	mov	r2, ip
 800753e:	468c      	mov	ip, r1
 8007540:	4619      	mov	r1, r3
 8007542:	4663      	mov	r3, ip
 8007544:	e000      	b.n	8007548 <__aeabi_cdcmpeq>
 8007546:	bf00      	nop

08007548 <__aeabi_cdcmpeq>:
 8007548:	b501      	push	{r0, lr}
 800754a:	f7ff ffb7 	bl	80074bc <__cmpdf2>
 800754e:	2800      	cmp	r0, #0
 8007550:	bf48      	it	mi
 8007552:	f110 0f00 	cmnmi.w	r0, #0
 8007556:	bd01      	pop	{r0, pc}

08007558 <__aeabi_dcmpeq>:
 8007558:	f84d ed08 	str.w	lr, [sp, #-8]!
 800755c:	f7ff fff4 	bl	8007548 <__aeabi_cdcmpeq>
 8007560:	bf0c      	ite	eq
 8007562:	2001      	moveq	r0, #1
 8007564:	2000      	movne	r0, #0
 8007566:	f85d fb08 	ldr.w	pc, [sp], #8
 800756a:	bf00      	nop

0800756c <__aeabi_dcmplt>:
 800756c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007570:	f7ff ffea 	bl	8007548 <__aeabi_cdcmpeq>
 8007574:	bf34      	ite	cc
 8007576:	2001      	movcc	r0, #1
 8007578:	2000      	movcs	r0, #0
 800757a:	f85d fb08 	ldr.w	pc, [sp], #8
 800757e:	bf00      	nop

08007580 <__aeabi_dcmple>:
 8007580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007584:	f7ff ffe0 	bl	8007548 <__aeabi_cdcmpeq>
 8007588:	bf94      	ite	ls
 800758a:	2001      	movls	r0, #1
 800758c:	2000      	movhi	r0, #0
 800758e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007592:	bf00      	nop

08007594 <__aeabi_dcmpge>:
 8007594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007598:	f7ff ffce 	bl	8007538 <__aeabi_cdrcmple>
 800759c:	bf94      	ite	ls
 800759e:	2001      	movls	r0, #1
 80075a0:	2000      	movhi	r0, #0
 80075a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80075a6:	bf00      	nop

080075a8 <__aeabi_dcmpgt>:
 80075a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80075ac:	f7ff ffc4 	bl	8007538 <__aeabi_cdrcmple>
 80075b0:	bf34      	ite	cc
 80075b2:	2001      	movcc	r0, #1
 80075b4:	2000      	movcs	r0, #0
 80075b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80075ba:	bf00      	nop

080075bc <__aeabi_d2iz>:
 80075bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80075c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80075c4:	d215      	bcs.n	80075f2 <__aeabi_d2iz+0x36>
 80075c6:	d511      	bpl.n	80075ec <__aeabi_d2iz+0x30>
 80075c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80075cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80075d0:	d912      	bls.n	80075f8 <__aeabi_d2iz+0x3c>
 80075d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80075d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80075de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80075e2:	fa23 f002 	lsr.w	r0, r3, r2
 80075e6:	bf18      	it	ne
 80075e8:	4240      	negne	r0, r0
 80075ea:	4770      	bx	lr
 80075ec:	f04f 0000 	mov.w	r0, #0
 80075f0:	4770      	bx	lr
 80075f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80075f6:	d105      	bne.n	8007604 <__aeabi_d2iz+0x48>
 80075f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80075fc:	bf08      	it	eq
 80075fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007602:	4770      	bx	lr
 8007604:	f04f 0000 	mov.w	r0, #0
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop

0800760c <__aeabi_uldivmod>:
 800760c:	b94b      	cbnz	r3, 8007622 <__aeabi_uldivmod+0x16>
 800760e:	b942      	cbnz	r2, 8007622 <__aeabi_uldivmod+0x16>
 8007610:	2900      	cmp	r1, #0
 8007612:	bf08      	it	eq
 8007614:	2800      	cmpeq	r0, #0
 8007616:	d002      	beq.n	800761e <__aeabi_uldivmod+0x12>
 8007618:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800761c:	4608      	mov	r0, r1
 800761e:	f000 b83b 	b.w	8007698 <__aeabi_idiv0>
 8007622:	b082      	sub	sp, #8
 8007624:	46ec      	mov	ip, sp
 8007626:	e92d 5000 	stmdb	sp!, {ip, lr}
 800762a:	f000 f81d 	bl	8007668 <__gnu_uldivmod_helper>
 800762e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007632:	b002      	add	sp, #8
 8007634:	bc0c      	pop	{r2, r3}
 8007636:	4770      	bx	lr

08007638 <__gnu_ldivmod_helper>:
 8007638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800763c:	9c06      	ldr	r4, [sp, #24]
 800763e:	4615      	mov	r5, r2
 8007640:	4606      	mov	r6, r0
 8007642:	460f      	mov	r7, r1
 8007644:	4698      	mov	r8, r3
 8007646:	f000 f829 	bl	800769c <__divdi3>
 800764a:	fb05 f301 	mul.w	r3, r5, r1
 800764e:	fb00 3808 	mla	r8, r0, r8, r3
 8007652:	fba5 2300 	umull	r2, r3, r5, r0
 8007656:	4443      	add	r3, r8
 8007658:	1ab2      	subs	r2, r6, r2
 800765a:	eb67 0303 	sbc.w	r3, r7, r3
 800765e:	e9c4 2300 	strd	r2, r3, [r4]
 8007662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007666:	bf00      	nop

08007668 <__gnu_uldivmod_helper>:
 8007668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800766c:	9c06      	ldr	r4, [sp, #24]
 800766e:	4615      	mov	r5, r2
 8007670:	4606      	mov	r6, r0
 8007672:	460f      	mov	r7, r1
 8007674:	4698      	mov	r8, r3
 8007676:	f000 f967 	bl	8007948 <__udivdi3>
 800767a:	fb00 f808 	mul.w	r8, r0, r8
 800767e:	fba0 2305 	umull	r2, r3, r0, r5
 8007682:	fb05 8801 	mla	r8, r5, r1, r8
 8007686:	4443      	add	r3, r8
 8007688:	1ab2      	subs	r2, r6, r2
 800768a:	eb67 0303 	sbc.w	r3, r7, r3
 800768e:	e9c4 2300 	strd	r2, r3, [r4]
 8007692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007696:	bf00      	nop

08007698 <__aeabi_idiv0>:
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop

0800769c <__divdi3>:
 800769c:	2900      	cmp	r1, #0
 800769e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80076a2:	bfa8      	it	ge
 80076a4:	2600      	movge	r6, #0
 80076a6:	f2c0 80a9 	blt.w	80077fc <__divdi3+0x160>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f2c0 80a1 	blt.w	80077f2 <__divdi3+0x156>
 80076b0:	4689      	mov	r9, r1
 80076b2:	4690      	mov	r8, r2
 80076b4:	469c      	mov	ip, r3
 80076b6:	4614      	mov	r4, r2
 80076b8:	4605      	mov	r5, r0
 80076ba:	460f      	mov	r7, r1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d147      	bne.n	8007750 <__divdi3+0xb4>
 80076c0:	428a      	cmp	r2, r1
 80076c2:	d95b      	bls.n	800777c <__divdi3+0xe0>
 80076c4:	fab2 f382 	clz	r3, r2
 80076c8:	b153      	cbz	r3, 80076e0 <__divdi3+0x44>
 80076ca:	f1c3 0220 	rsb	r2, r3, #32
 80076ce:	fa01 f703 	lsl.w	r7, r1, r3
 80076d2:	fa20 f202 	lsr.w	r2, r0, r2
 80076d6:	fa08 f403 	lsl.w	r4, r8, r3
 80076da:	4317      	orrs	r7, r2
 80076dc:	fa00 f503 	lsl.w	r5, r0, r3
 80076e0:	0c21      	lsrs	r1, r4, #16
 80076e2:	fbb7 f2f1 	udiv	r2, r7, r1
 80076e6:	0c2b      	lsrs	r3, r5, #16
 80076e8:	fb01 7c12 	mls	ip, r1, r2, r7
 80076ec:	b2a0      	uxth	r0, r4
 80076ee:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
 80076f2:	fb00 f302 	mul.w	r3, r0, r2
 80076f6:	42bb      	cmp	r3, r7
 80076f8:	d909      	bls.n	800770e <__divdi3+0x72>
 80076fa:	193f      	adds	r7, r7, r4
 80076fc:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8007700:	d204      	bcs.n	800770c <__divdi3+0x70>
 8007702:	42bb      	cmp	r3, r7
 8007704:	bf84      	itt	hi
 8007706:	3a02      	subhi	r2, #2
 8007708:	193f      	addhi	r7, r7, r4
 800770a:	d800      	bhi.n	800770e <__divdi3+0x72>
 800770c:	4662      	mov	r2, ip
 800770e:	1aff      	subs	r7, r7, r3
 8007710:	fbb7 f3f1 	udiv	r3, r7, r1
 8007714:	b2ad      	uxth	r5, r5
 8007716:	fb01 7113 	mls	r1, r1, r3, r7
 800771a:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 800771e:	fb00 f003 	mul.w	r0, r0, r3
 8007722:	4288      	cmp	r0, r1
 8007724:	d908      	bls.n	8007738 <__divdi3+0x9c>
 8007726:	1909      	adds	r1, r1, r4
 8007728:	f103 37ff 	add.w	r7, r3, #4294967295	; 0xffffffff
 800772c:	d203      	bcs.n	8007736 <__divdi3+0x9a>
 800772e:	4288      	cmp	r0, r1
 8007730:	bf88      	it	hi
 8007732:	3b02      	subhi	r3, #2
 8007734:	d800      	bhi.n	8007738 <__divdi3+0x9c>
 8007736:	463b      	mov	r3, r7
 8007738:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800773c:	2200      	movs	r2, #0
 800773e:	4618      	mov	r0, r3
 8007740:	4611      	mov	r1, r2
 8007742:	b116      	cbz	r6, 800774a <__divdi3+0xae>
 8007744:	4240      	negs	r0, r0
 8007746:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800774a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800774e:	4770      	bx	lr
 8007750:	428b      	cmp	r3, r1
 8007752:	bf84      	itt	hi
 8007754:	2200      	movhi	r2, #0
 8007756:	4613      	movhi	r3, r2
 8007758:	d8f1      	bhi.n	800773e <__divdi3+0xa2>
 800775a:	fabc f18c 	clz	r1, ip
 800775e:	2900      	cmp	r1, #0
 8007760:	f040 8090 	bne.w	8007884 <__divdi3+0x1e8>
 8007764:	45cc      	cmp	ip, r9
 8007766:	bf28      	it	cs
 8007768:	4580      	cmpcs	r8, r0
 800776a:	bf8c      	ite	hi
 800776c:	2200      	movhi	r2, #0
 800776e:	2201      	movls	r2, #1
 8007770:	bf9c      	itt	ls
 8007772:	2301      	movls	r3, #1
 8007774:	460a      	movls	r2, r1
 8007776:	d9e2      	bls.n	800773e <__divdi3+0xa2>
 8007778:	4613      	mov	r3, r2
 800777a:	e7e0      	b.n	800773e <__divdi3+0xa2>
 800777c:	b912      	cbnz	r2, 8007784 <__divdi3+0xe8>
 800777e:	2301      	movs	r3, #1
 8007780:	fbb3 f4f2 	udiv	r4, r3, r2
 8007784:	fab4 f384 	clz	r3, r4
 8007788:	2b00      	cmp	r3, #0
 800778a:	d13d      	bne.n	8007808 <__divdi3+0x16c>
 800778c:	1b3f      	subs	r7, r7, r4
 800778e:	0c20      	lsrs	r0, r4, #16
 8007790:	fa1f fc84 	uxth.w	ip, r4
 8007794:	2201      	movs	r2, #1
 8007796:	fbb7 f1f0 	udiv	r1, r7, r0
 800779a:	0c2b      	lsrs	r3, r5, #16
 800779c:	fb00 7711 	mls	r7, r0, r1, r7
 80077a0:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 80077a4:	fb0c f301 	mul.w	r3, ip, r1
 80077a8:	42bb      	cmp	r3, r7
 80077aa:	d90a      	bls.n	80077c2 <__divdi3+0x126>
 80077ac:	193f      	adds	r7, r7, r4
 80077ae:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80077b2:	f080 80c1 	bcs.w	8007938 <__divdi3+0x29c>
 80077b6:	42bb      	cmp	r3, r7
 80077b8:	bf84      	itt	hi
 80077ba:	3902      	subhi	r1, #2
 80077bc:	193f      	addhi	r7, r7, r4
 80077be:	f240 80bb 	bls.w	8007938 <__divdi3+0x29c>
 80077c2:	1aff      	subs	r7, r7, r3
 80077c4:	fbb7 f3f0 	udiv	r3, r7, r0
 80077c8:	b2ad      	uxth	r5, r5
 80077ca:	fb00 7013 	mls	r0, r0, r3, r7
 80077ce:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 80077d2:	fb0c fc03 	mul.w	ip, ip, r3
 80077d6:	4584      	cmp	ip, r0
 80077d8:	d908      	bls.n	80077ec <__divdi3+0x150>
 80077da:	1900      	adds	r0, r0, r4
 80077dc:	f103 37ff 	add.w	r7, r3, #4294967295	; 0xffffffff
 80077e0:	d203      	bcs.n	80077ea <__divdi3+0x14e>
 80077e2:	4584      	cmp	ip, r0
 80077e4:	bf88      	it	hi
 80077e6:	3b02      	subhi	r3, #2
 80077e8:	d800      	bhi.n	80077ec <__divdi3+0x150>
 80077ea:	463b      	mov	r3, r7
 80077ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80077f0:	e7a5      	b.n	800773e <__divdi3+0xa2>
 80077f2:	43f6      	mvns	r6, r6
 80077f4:	4252      	negs	r2, r2
 80077f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80077fa:	e759      	b.n	80076b0 <__divdi3+0x14>
 80077fc:	4240      	negs	r0, r0
 80077fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007802:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8007806:	e750      	b.n	80076aa <__divdi3+0xe>
 8007808:	409c      	lsls	r4, r3
 800780a:	f1c3 0220 	rsb	r2, r3, #32
 800780e:	fa27 f102 	lsr.w	r1, r7, r2
 8007812:	0c20      	lsrs	r0, r4, #16
 8007814:	fa25 f202 	lsr.w	r2, r5, r2
 8007818:	409f      	lsls	r7, r3
 800781a:	4317      	orrs	r7, r2
 800781c:	fbb1 f2f0 	udiv	r2, r1, r0
 8007820:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8007824:	fb00 1112 	mls	r1, r0, r2, r1
 8007828:	fa1f fc84 	uxth.w	ip, r4
 800782c:	ea48 4101 	orr.w	r1, r8, r1, lsl #16
 8007830:	fb0c f802 	mul.w	r8, ip, r2
 8007834:	4588      	cmp	r8, r1
 8007836:	fa05 f503 	lsl.w	r5, r5, r3
 800783a:	d908      	bls.n	800784e <__divdi3+0x1b2>
 800783c:	1909      	adds	r1, r1, r4
 800783e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8007842:	d27f      	bcs.n	8007944 <__divdi3+0x2a8>
 8007844:	4588      	cmp	r8, r1
 8007846:	bf84      	itt	hi
 8007848:	3a02      	subhi	r2, #2
 800784a:	1909      	addhi	r1, r1, r4
 800784c:	d97a      	bls.n	8007944 <__divdi3+0x2a8>
 800784e:	ebc8 0101 	rsb	r1, r8, r1
 8007852:	fbb1 f3f0 	udiv	r3, r1, r0
 8007856:	fb00 1113 	mls	r1, r0, r3, r1
 800785a:	b2bf      	uxth	r7, r7
 800785c:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8007860:	fb0c f103 	mul.w	r1, ip, r3
 8007864:	42b9      	cmp	r1, r7
 8007866:	d909      	bls.n	800787c <__divdi3+0x1e0>
 8007868:	193f      	adds	r7, r7, r4
 800786a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800786e:	d204      	bcs.n	800787a <__divdi3+0x1de>
 8007870:	42b9      	cmp	r1, r7
 8007872:	bf84      	itt	hi
 8007874:	3b02      	subhi	r3, #2
 8007876:	193f      	addhi	r7, r7, r4
 8007878:	d800      	bhi.n	800787c <__divdi3+0x1e0>
 800787a:	4643      	mov	r3, r8
 800787c:	1a7f      	subs	r7, r7, r1
 800787e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8007882:	e788      	b.n	8007796 <__divdi3+0xfa>
 8007884:	f1c1 0320 	rsb	r3, r1, #32
 8007888:	fa28 f203 	lsr.w	r2, r8, r3
 800788c:	fa0c fc01 	lsl.w	ip, ip, r1
 8007890:	ea42 0c0c 	orr.w	ip, r2, ip
 8007894:	fa29 f403 	lsr.w	r4, r9, r3
 8007898:	ea4f 4a1c 	mov.w	sl, ip, lsr #16
 800789c:	fa20 f303 	lsr.w	r3, r0, r3
 80078a0:	fa09 f901 	lsl.w	r9, r9, r1
 80078a4:	ea43 0009 	orr.w	r0, r3, r9
 80078a8:	fbb4 f7fa 	udiv	r7, r4, sl
 80078ac:	fb0a 4417 	mls	r4, sl, r7, r4
 80078b0:	0c03      	lsrs	r3, r0, #16
 80078b2:	fa1f f98c 	uxth.w	r9, ip
 80078b6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80078ba:	fb09 fb07 	mul.w	fp, r9, r7
 80078be:	45a3      	cmp	fp, r4
 80078c0:	fa08 f201 	lsl.w	r2, r8, r1
 80078c4:	d909      	bls.n	80078da <__divdi3+0x23e>
 80078c6:	eb14 040c 	adds.w	r4, r4, ip
 80078ca:	f107 33ff 	add.w	r3, r7, #4294967295	; 0xffffffff
 80078ce:	d237      	bcs.n	8007940 <__divdi3+0x2a4>
 80078d0:	45a3      	cmp	fp, r4
 80078d2:	bf84      	itt	hi
 80078d4:	3f02      	subhi	r7, #2
 80078d6:	4464      	addhi	r4, ip
 80078d8:	d932      	bls.n	8007940 <__divdi3+0x2a4>
 80078da:	ebcb 0404 	rsb	r4, fp, r4
 80078de:	fbb4 f3fa 	udiv	r3, r4, sl
 80078e2:	fb0a 4413 	mls	r4, sl, r3, r4
 80078e6:	b280      	uxth	r0, r0
 80078e8:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80078ec:	fb09 f403 	mul.w	r4, r9, r3
 80078f0:	4284      	cmp	r4, r0
 80078f2:	d909      	bls.n	8007908 <__divdi3+0x26c>
 80078f4:	eb10 000c 	adds.w	r0, r0, ip
 80078f8:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80078fc:	d21e      	bcs.n	800793c <__divdi3+0x2a0>
 80078fe:	4284      	cmp	r4, r0
 8007900:	bf84      	itt	hi
 8007902:	3b02      	subhi	r3, #2
 8007904:	4460      	addhi	r0, ip
 8007906:	d919      	bls.n	800793c <__divdi3+0x2a0>
 8007908:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800790c:	1b00      	subs	r0, r0, r4
 800790e:	fba7 2302 	umull	r2, r3, r7, r2
 8007912:	4298      	cmp	r0, r3
 8007914:	d30d      	bcc.n	8007932 <__divdi3+0x296>
 8007916:	bf14      	ite	ne
 8007918:	2300      	movne	r3, #0
 800791a:	2301      	moveq	r3, #1
 800791c:	fa05 f101 	lsl.w	r1, r5, r1
 8007920:	4291      	cmp	r1, r2
 8007922:	bf2c      	ite	cs
 8007924:	2200      	movcs	r2, #0
 8007926:	f003 0201 	andcc.w	r2, r3, #1
 800792a:	463b      	mov	r3, r7
 800792c:	2a00      	cmp	r2, #0
 800792e:	f43f af06 	beq.w	800773e <__divdi3+0xa2>
 8007932:	1e7b      	subs	r3, r7, #1
 8007934:	2200      	movs	r2, #0
 8007936:	e702      	b.n	800773e <__divdi3+0xa2>
 8007938:	4641      	mov	r1, r8
 800793a:	e742      	b.n	80077c2 <__divdi3+0x126>
 800793c:	4643      	mov	r3, r8
 800793e:	e7e3      	b.n	8007908 <__divdi3+0x26c>
 8007940:	461f      	mov	r7, r3
 8007942:	e7ca      	b.n	80078da <__divdi3+0x23e>
 8007944:	461a      	mov	r2, r3
 8007946:	e782      	b.n	800784e <__divdi3+0x1b2>

08007948 <__udivdi3>:
 8007948:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800794c:	4614      	mov	r4, r2
 800794e:	4605      	mov	r5, r0
 8007950:	460e      	mov	r6, r1
 8007952:	2b00      	cmp	r3, #0
 8007954:	d141      	bne.n	80079da <__udivdi3+0x92>
 8007956:	428a      	cmp	r2, r1
 8007958:	d954      	bls.n	8007a04 <__udivdi3+0xbc>
 800795a:	fab2 f382 	clz	r3, r2
 800795e:	b14b      	cbz	r3, 8007974 <__udivdi3+0x2c>
 8007960:	f1c3 0620 	rsb	r6, r3, #32
 8007964:	4099      	lsls	r1, r3
 8007966:	fa20 f606 	lsr.w	r6, r0, r6
 800796a:	fa02 f403 	lsl.w	r4, r2, r3
 800796e:	430e      	orrs	r6, r1
 8007970:	fa00 f503 	lsl.w	r5, r0, r3
 8007974:	0c22      	lsrs	r2, r4, #16
 8007976:	fbb6 f0f2 	udiv	r0, r6, r2
 800797a:	0c2b      	lsrs	r3, r5, #16
 800797c:	fb02 6110 	mls	r1, r2, r0, r6
 8007980:	b2a7      	uxth	r7, r4
 8007982:	ea43 4601 	orr.w	r6, r3, r1, lsl #16
 8007986:	fb07 f300 	mul.w	r3, r7, r0
 800798a:	42b3      	cmp	r3, r6
 800798c:	d909      	bls.n	80079a2 <__udivdi3+0x5a>
 800798e:	1936      	adds	r6, r6, r4
 8007990:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8007994:	d204      	bcs.n	80079a0 <__udivdi3+0x58>
 8007996:	42b3      	cmp	r3, r6
 8007998:	bf84      	itt	hi
 800799a:	3802      	subhi	r0, #2
 800799c:	1936      	addhi	r6, r6, r4
 800799e:	d800      	bhi.n	80079a2 <__udivdi3+0x5a>
 80079a0:	4608      	mov	r0, r1
 80079a2:	1af6      	subs	r6, r6, r3
 80079a4:	fbb6 f3f2 	udiv	r3, r6, r2
 80079a8:	b2ad      	uxth	r5, r5
 80079aa:	fb02 6213 	mls	r2, r2, r3, r6
 80079ae:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 80079b2:	fb07 f703 	mul.w	r7, r7, r3
 80079b6:	4297      	cmp	r7, r2
 80079b8:	d909      	bls.n	80079ce <__udivdi3+0x86>
 80079ba:	1912      	adds	r2, r2, r4
 80079bc:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 80079c0:	f080 80ea 	bcs.w	8007b98 <__udivdi3+0x250>
 80079c4:	4297      	cmp	r7, r2
 80079c6:	bf88      	it	hi
 80079c8:	3b02      	subhi	r3, #2
 80079ca:	f240 80e5 	bls.w	8007b98 <__udivdi3+0x250>
 80079ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80079d2:	2100      	movs	r1, #0
 80079d4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80079d8:	4770      	bx	lr
 80079da:	428b      	cmp	r3, r1
 80079dc:	bf84      	itt	hi
 80079de:	2100      	movhi	r1, #0
 80079e0:	4608      	movhi	r0, r1
 80079e2:	d8f7      	bhi.n	80079d4 <__udivdi3+0x8c>
 80079e4:	fab3 f483 	clz	r4, r3
 80079e8:	2c00      	cmp	r4, #0
 80079ea:	d149      	bne.n	8007a80 <__udivdi3+0x138>
 80079ec:	428b      	cmp	r3, r1
 80079ee:	bf28      	it	cs
 80079f0:	4282      	cmpcs	r2, r0
 80079f2:	bf8c      	ite	hi
 80079f4:	2100      	movhi	r1, #0
 80079f6:	2101      	movls	r1, #1
 80079f8:	bf9c      	itt	ls
 80079fa:	2001      	movls	r0, #1
 80079fc:	4621      	movls	r1, r4
 80079fe:	d9e9      	bls.n	80079d4 <__udivdi3+0x8c>
 8007a00:	4608      	mov	r0, r1
 8007a02:	e7e7      	b.n	80079d4 <__udivdi3+0x8c>
 8007a04:	b912      	cbnz	r2, 8007a0c <__udivdi3+0xc4>
 8007a06:	2401      	movs	r4, #1
 8007a08:	fbb4 f4f2 	udiv	r4, r4, r2
 8007a0c:	fab4 f784 	clz	r7, r4
 8007a10:	2f00      	cmp	r7, #0
 8007a12:	f040 8082 	bne.w	8007b1a <__udivdi3+0x1d2>
 8007a16:	1b0b      	subs	r3, r1, r4
 8007a18:	0c26      	lsrs	r6, r4, #16
 8007a1a:	b2a7      	uxth	r7, r4
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	fbb3 f0f6 	udiv	r0, r3, r6
 8007a22:	0c2a      	lsrs	r2, r5, #16
 8007a24:	fb06 3310 	mls	r3, r6, r0, r3
 8007a28:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8007a2c:	fb07 f200 	mul.w	r2, r7, r0
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d90a      	bls.n	8007a4a <__udivdi3+0x102>
 8007a34:	191b      	adds	r3, r3, r4
 8007a36:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8007a3a:	f080 80af 	bcs.w	8007b9c <__udivdi3+0x254>
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	bf84      	itt	hi
 8007a42:	3802      	subhi	r0, #2
 8007a44:	191b      	addhi	r3, r3, r4
 8007a46:	f240 80a9 	bls.w	8007b9c <__udivdi3+0x254>
 8007a4a:	1a9b      	subs	r3, r3, r2
 8007a4c:	fbb3 f2f6 	udiv	r2, r3, r6
 8007a50:	b2ad      	uxth	r5, r5
 8007a52:	fb06 3312 	mls	r3, r6, r2, r3
 8007a56:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8007a5a:	fb07 f702 	mul.w	r7, r7, r2
 8007a5e:	42af      	cmp	r7, r5
 8007a60:	d909      	bls.n	8007a76 <__udivdi3+0x12e>
 8007a62:	192c      	adds	r4, r5, r4
 8007a64:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8007a68:	f080 809a 	bcs.w	8007ba0 <__udivdi3+0x258>
 8007a6c:	42a7      	cmp	r7, r4
 8007a6e:	bf88      	it	hi
 8007a70:	3a02      	subhi	r2, #2
 8007a72:	f240 8095 	bls.w	8007ba0 <__udivdi3+0x258>
 8007a76:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8007a7a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8007a7e:	4770      	bx	lr
 8007a80:	f1c4 0520 	rsb	r5, r4, #32
 8007a84:	fa22 f605 	lsr.w	r6, r2, r5
 8007a88:	40a3      	lsls	r3, r4
 8007a8a:	4333      	orrs	r3, r6
 8007a8c:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8007a90:	fa21 f605 	lsr.w	r6, r1, r5
 8007a94:	40a1      	lsls	r1, r4
 8007a96:	fa20 f505 	lsr.w	r5, r0, r5
 8007a9a:	fbb6 fcf8 	udiv	ip, r6, r8
 8007a9e:	430d      	orrs	r5, r1
 8007aa0:	fb08 661c 	mls	r6, r8, ip, r6
 8007aa4:	0c29      	lsrs	r1, r5, #16
 8007aa6:	fa1f f983 	uxth.w	r9, r3
 8007aaa:	ea41 4606 	orr.w	r6, r1, r6, lsl #16
 8007aae:	fb09 f70c 	mul.w	r7, r9, ip
 8007ab2:	42b7      	cmp	r7, r6
 8007ab4:	fa02 f204 	lsl.w	r2, r2, r4
 8007ab8:	d904      	bls.n	8007ac4 <__udivdi3+0x17c>
 8007aba:	18f6      	adds	r6, r6, r3
 8007abc:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8007ac0:	d376      	bcc.n	8007bb0 <__udivdi3+0x268>
 8007ac2:	468c      	mov	ip, r1
 8007ac4:	1bf6      	subs	r6, r6, r7
 8007ac6:	fbb6 f7f8 	udiv	r7, r6, r8
 8007aca:	fb08 6617 	mls	r6, r8, r7, r6
 8007ace:	b2ad      	uxth	r5, r5
 8007ad0:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8007ad4:	fb09 f607 	mul.w	r6, r9, r7
 8007ad8:	42ae      	cmp	r6, r5
 8007ada:	d904      	bls.n	8007ae6 <__udivdi3+0x19e>
 8007adc:	18ed      	adds	r5, r5, r3
 8007ade:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8007ae2:	d35f      	bcc.n	8007ba4 <__udivdi3+0x25c>
 8007ae4:	460f      	mov	r7, r1
 8007ae6:	ea47 470c 	orr.w	r7, r7, ip, lsl #16
 8007aea:	1bad      	subs	r5, r5, r6
 8007aec:	fba7 2302 	umull	r2, r3, r7, r2
 8007af0:	429d      	cmp	r5, r3
 8007af2:	d30d      	bcc.n	8007b10 <__udivdi3+0x1c8>
 8007af4:	fa00 f104 	lsl.w	r1, r0, r4
 8007af8:	bf14      	ite	ne
 8007afa:	2500      	movne	r5, #0
 8007afc:	2501      	moveq	r5, #1
 8007afe:	4291      	cmp	r1, r2
 8007b00:	bf2c      	ite	cs
 8007b02:	2100      	movcs	r1, #0
 8007b04:	f005 0101 	andcc.w	r1, r5, #1
 8007b08:	4638      	mov	r0, r7
 8007b0a:	2900      	cmp	r1, #0
 8007b0c:	f43f af62 	beq.w	80079d4 <__udivdi3+0x8c>
 8007b10:	1e78      	subs	r0, r7, #1
 8007b12:	2100      	movs	r1, #0
 8007b14:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8007b18:	4770      	bx	lr
 8007b1a:	40bc      	lsls	r4, r7
 8007b1c:	f1c7 0320 	rsb	r3, r7, #32
 8007b20:	fa21 fc03 	lsr.w	ip, r1, r3
 8007b24:	0c26      	lsrs	r6, r4, #16
 8007b26:	40b9      	lsls	r1, r7
 8007b28:	fa20 f303 	lsr.w	r3, r0, r3
 8007b2c:	430b      	orrs	r3, r1
 8007b2e:	fbbc f1f6 	udiv	r1, ip, r6
 8007b32:	0c1a      	lsrs	r2, r3, #16
 8007b34:	fb06 cc11 	mls	ip, r6, r1, ip
 8007b38:	fa1f f884 	uxth.w	r8, r4
 8007b3c:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 8007b40:	fb08 f201 	mul.w	r2, r8, r1
 8007b44:	4562      	cmp	r2, ip
 8007b46:	fa00 f507 	lsl.w	r5, r0, r7
 8007b4a:	d909      	bls.n	8007b60 <__udivdi3+0x218>
 8007b4c:	eb1c 0c04 	adds.w	ip, ip, r4
 8007b50:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8007b54:	d233      	bcs.n	8007bbe <__udivdi3+0x276>
 8007b56:	4562      	cmp	r2, ip
 8007b58:	bf84      	itt	hi
 8007b5a:	3902      	subhi	r1, #2
 8007b5c:	44a4      	addhi	ip, r4
 8007b5e:	d92e      	bls.n	8007bbe <__udivdi3+0x276>
 8007b60:	ebc2 0c0c 	rsb	ip, r2, ip
 8007b64:	fbbc f2f6 	udiv	r2, ip, r6
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	fb06 cc12 	mls	ip, r6, r2, ip
 8007b6e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8007b72:	fb08 f002 	mul.w	r0, r8, r2
 8007b76:	4298      	cmp	r0, r3
 8007b78:	d909      	bls.n	8007b8e <__udivdi3+0x246>
 8007b7a:	191b      	adds	r3, r3, r4
 8007b7c:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
 8007b80:	d204      	bcs.n	8007b8c <__udivdi3+0x244>
 8007b82:	4298      	cmp	r0, r3
 8007b84:	bf84      	itt	hi
 8007b86:	3a02      	subhi	r2, #2
 8007b88:	191b      	addhi	r3, r3, r4
 8007b8a:	d800      	bhi.n	8007b8e <__udivdi3+0x246>
 8007b8c:	463a      	mov	r2, r7
 8007b8e:	1a1b      	subs	r3, r3, r0
 8007b90:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8007b94:	4647      	mov	r7, r8
 8007b96:	e742      	b.n	8007a1e <__udivdi3+0xd6>
 8007b98:	460b      	mov	r3, r1
 8007b9a:	e718      	b.n	80079ce <__udivdi3+0x86>
 8007b9c:	4660      	mov	r0, ip
 8007b9e:	e754      	b.n	8007a4a <__udivdi3+0x102>
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	e768      	b.n	8007a76 <__udivdi3+0x12e>
 8007ba4:	42ae      	cmp	r6, r5
 8007ba6:	bf84      	itt	hi
 8007ba8:	3f02      	subhi	r7, #2
 8007baa:	18ed      	addhi	r5, r5, r3
 8007bac:	d89b      	bhi.n	8007ae6 <__udivdi3+0x19e>
 8007bae:	e799      	b.n	8007ae4 <__udivdi3+0x19c>
 8007bb0:	42b7      	cmp	r7, r6
 8007bb2:	bf84      	itt	hi
 8007bb4:	f1ac 0c02 	subhi.w	ip, ip, #2
 8007bb8:	18f6      	addhi	r6, r6, r3
 8007bba:	d883      	bhi.n	8007ac4 <__udivdi3+0x17c>
 8007bbc:	e781      	b.n	8007ac2 <__udivdi3+0x17a>
 8007bbe:	4601      	mov	r1, r0
 8007bc0:	e7ce      	b.n	8007b60 <__udivdi3+0x218>
 8007bc2:	bf00      	nop
 8007bc4:	322e3625 	.word	0x322e3625
 8007bc8:	000a2066 	.word	0x000a2066
 8007bcc:	696b7341 	.word	0x696b7341
 8007bd0:	6620676e 	.word	0x6620676e
 8007bd4:	203a726f 	.word	0x203a726f
 8007bd8:	79622000 	.word	0x79622000
 8007bdc:	2e736574 	.word	0x2e736574
 8007be0:	6548000a 	.word	0x6548000a
 8007be4:	6f207061 	.word	0x6f207061
 8007be8:	66726576 	.word	0x66726576
 8007bec:	21776f6c 	.word	0x21776f6c
 8007bf0:	6463000a 	.word	0x6463000a
 8007bf4:	6d636163 	.word	0x6d636163
 8007bf8:	00000000 	.word	0x00000000

08007bfc <dotab_cdcacm>:
 8007bfc:	08007bf2 080008c9 080008cd 080008f1     .{..............
 8007c0c:	0800094d                                M...

08007c10 <dev>:
 8007c10:	02000112 40000002 57400483 02010200     .......@..@W....
 8007c20:	05070103                                         ..

08007c22 <data_endp>:
 8007c22:	02010507 07010040 40028205 02090100              ....@......@..

08007c30 <config>:
 8007c30:	00000209 80000102 007c4032 00000008     ........2@|.....

08007c40 <ifaces>:
 8007c40:	00000001 00000000 08007c58 00000001     ........X|......
 8007c50:	00000000 08007c92                       .....|..

08007c58 <comm_iface>:
 8007c58:	00000409 01020201 007ca700 007cae08     ..........|...|.
 8007c68:	00001308 43524100 6c2d534f 55206261     .....ARCOS-lab U
 8007c78:	43005243 412d4344 55204d43 20545241     CR.CDC-ACM UART 
 8007c88:	65746e49 63616672 04090065                       Interface.

08007c92 <data_iface>:
 8007c92:	00010409 00000a02 007c2200 00000008     ........."|.....
 8007ca2:	00000000 83050700                                .....

08007ca7 <comm_endp>:
 8007ca7:	03830507 05ff0010                                .......

08007cae <cdcacm_functional_descriptors>:
 8007cae:	10002405 01240501 24040100 24050202     .$....$....$...$
 8007cbe:	00010006 00080000                                ......

08007cc4 <hse_8mhz_3v3>:
 8007cc4:	00600008 00000202 00000603 01040500     ..`.............
 8007cd4:	00b71b00 016e3600 00f00008 00000502     .....6n.........
 8007ce4:	00000603 01040500 01c9c380 03938700     ................
 8007cf4:	01500008 00000702 00000605 00040500     ..P.............
 8007d04:	0280de80 0501bd00                       ........

08007d0c <CSWTCH.22>:
 8007d0c:	080015ab 00000000 00000000 00000000     ................
 8007d1c:	00000000 08001625 0800164d 00000000     ....%...M.......
 8007d2c:	0800157d 0800154b                       }...K...

08007d34 <CSWTCH.24>:
 8007d34:	080015c3 00000000 00000000 00000000     ................
	...
 8007d5c:	0800159f 08001591                       ........

08007d64 <stm32f107_usb_driver>:
 8007d64:	08001bc5 08001d51 08001d69 08001e9f     ....Q...i.......
 8007d74:	08001ea9 08001f15 08001ef7 08001f3d     ............=...
 8007d84:	08001f95 08002021 08002127 50000000     ....! ..'!.....P
 8007d94:	00800001 00000043                       ....C...

08007d9c <zeroes.6775>:
 8007d9c:	30303030 30303030 30303030 30303030     0000000000000000
 8007dac:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 8007dbc:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8007dcc:	00000000 33323130 37363534 62613938     ....0123456789ab
 8007ddc:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 8007dec:	00000030                                0...

08007df0 <blanks.6774>:
 8007df0:	20202020 20202020 20202020 20202020                     
 8007e00:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 8007e10:	49534f50 00000058 0000002e 00000000     POSIX...........

08007e20 <__mprec_tens>:
 8007e20:	00000000 3ff00000 00000000 40240000     .......?......$@
 8007e30:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8007e40:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8007e50:	00000000 412e8480 00000000 416312d0     .......A......cA
 8007e60:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8007e70:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8007e80:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8007e90:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8007ea0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8007eb0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8007ec0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8007ed0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8007ee0:	79d99db4 44ea7843                       ...yCx.D

08007ee8 <__mprec_bigtens>:
 8007ee8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8007ef8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8007f08:	7f73bf3c 75154fdd                       <.s..O.u

08007f10 <p05.5266>:
 8007f10:	00000005 00000019 0000007d              ........}...
